<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>websocket网络通信</title>
      <link href="/posts/368e27d4/"/>
      <url>/posts/368e27d4/</url>
      
        <content type="html"><![CDATA[<h3 id="一、定义handle"><a href="#一、定义handle" class="headerlink" title="一、定义handle"></a>一、定义handle</h3><p>​      以下的handle只是做简单演示，可以根据需要做更多功能的扩展，比如根据session的具体属性，接收指定session的信息，给指定的session发送信息等等。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.springframework.web.socket.CloseStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.TextMessage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketSession;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.handler.TextWebSocketHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyWebSocketHandler</span> <span class="keyword">extends</span> <span class="title class_">TextWebSocketHandler</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;WebSocketSession&gt; sessions = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到新的链接&quot;</span>);</span><br><span class="line">        sessions.add(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">handleTextMessage</span><span class="params">(WebSocketSession session, TextMessage message)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 处理接收到的消息</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">receivedMessage</span> <span class="operator">=</span> message.getPayload();</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到新的消息：&quot;</span> + receivedMessage);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus status)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;断开链接&quot;</span>);</span><br><span class="line">        sessions.remove(session);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessageToAllSessions</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">TextMessage</span> <span class="variable">textMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TextMessage</span>(message);</span><br><span class="line">        <span class="keyword">for</span> (WebSocketSession session : sessions) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;发送消息&quot;</span>);</span><br><span class="line">            session.sendMessage(textMessage);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、spring配置类"><a href="#二、spring配置类" class="headerlink" title="二、spring配置类"></a>二、spring配置类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.flux.handler.MyWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.WebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.EnableWebSocket;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketConfigurer;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.socket.config.annotation.WebSocketHandlerRegistry;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebsocketConfig</span> <span class="keyword">implements</span> <span class="title class_">WebSocketConfigurer</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry registry)</span> &#123;</span><br><span class="line">        registry.addHandler(myWebSocketHandler(), <span class="string">&quot;/websocket&quot;</span>).setAllowedOrigins(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> WebSocketHandler <span class="title function_">myWebSocketHandler</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyWebSocketHandler</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="三、后端使用"><a href="#三、后端使用" class="headerlink" title="三、后端使用"></a>三、后端使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.flux.handler.MyWebSocketHandler;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.Resource;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MyWebSocketHandler myWebSocketHandler;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/sendMessage&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendMessage</span><span class="params">(String message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        myWebSocketHandler.sendMessageToAllSessions(message);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="四、前端使用"><a href="#四、前端使用" class="headerlink" title="四、前端使用"></a>四、前端使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://127.0.0.1:18080/websocket&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听连接成功事件</span></span><br><span class="line">socket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接已打开&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收消息</span></span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;接收到消息:&#x27;</span>, event.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听连接关闭事件</span></span><br><span class="line">socket.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接已关闭&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 监听连接错误事件</span></span><br><span class="line">socket.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">error</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&#x27;WebSocket连接发生错误:&#x27;</span>, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 准备要发送的数据</span></span><br><span class="line"><span class="keyword">const</span> message = <span class="string">&#x27;Hello, WebSocket Server!&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line">socket.<span class="title function_">send</span>(message)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;消息已发送&#x27;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 网络通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socket网络通信</title>
      <link href="/posts/4a0d6d40/"/>
      <url>/posts/4a0d6d40/</url>
      
        <content type="html"><![CDATA[<h2 id="Socket通信的两种方式"><a href="#Socket通信的两种方式" class="headerlink" title="Socket通信的两种方式"></a>Socket通信的两种方式</h2><h3 id="一、TCP协议通信"><a href="#一、TCP协议通信" class="headerlink" title="一、TCP协议通信"></a>一、TCP协议通信</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建一个Socket对象，指定目标IP地址和端口号</span></span><br><span class="line">    <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">18080</span>);</span><br><span class="line">    <span class="comment">// 获取输出流</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">outputStream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 准备要发送的数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello world!&quot;</span>;</span><br><span class="line">    <span class="type">byte</span>[] sendData = message.getBytes();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    outputStream.write(sendData);</span><br><span class="line">    outputStream.flush();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭Socket连接</span></span><br><span class="line">    socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二、UDP协议通信"><a href="#二、UDP协议通信" class="headerlink" title="二、UDP协议通信"></a>二、UDP协议通信</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">// 创建 DatagramSocket 对象</span></span><br><span class="line">    <span class="type">DatagramSocket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramSocket</span>();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 服务器地址和端口</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">serverAddress</span> <span class="operator">=</span> InetAddress.getByName(<span class="string">&quot;127.0.0.1&quot;</span>);</span><br><span class="line">    <span class="type">int</span> <span class="variable">serverPort</span> <span class="operator">=</span> Integer.parseInt(<span class="number">18080</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 准备要发送的数据</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">message</span> <span class="operator">=</span> <span class="string">&quot;Hello world!&quot;</span></span><br><span class="line">    <span class="type">byte</span>[] sendData = message.getBytes();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 创建 DatagramPacket 对象，包含要发送的数据和服务器地址信息</span></span><br><span class="line">    <span class="type">DatagramPacket</span> <span class="variable">sendPacket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DatagramPacket</span>(sendData, sendData.length, serverAddress, serverPort);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 发送数据</span></span><br><span class="line">    socket.send(sendPacket);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 关闭 socket</span></span><br><span class="line">    socket.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、两种通信协议的总结"><a href="#三、两种通信协议的总结" class="headerlink" title="三、两种通信协议的总结"></a>三、两种通信协议的总结</h3><p>UDP（User Datagram Protocol）和TCP（Transmission Control Protocol）是两种不同的传输层协议，用于在网络上发送数据。它们在以下几个方面有所不同：</p><ol><li><strong>连接性：</strong>TCP是面向连接的协议，它在通信之前建立连接，并确保数据的可靠传输。UDP是无连接的协议，它不需要在通信之前建立连接。</li><li><strong>可靠性：</strong>TCP提供可靠的数据传输，它使用序列号、确认和重传机制来确保数据的可靠性。UDP不提供可靠性保证，它以尽最大努力交付数据，但不保证数据的顺序、完整性或可靠性。</li><li><strong>速度和效率：</strong>由于TCP的连接管理和可靠性机制，它的传输速度相对较慢，并且在网络拥塞时可能会有较高的延迟。UDP没有这些机制，因此传输速度较快，延迟较低。</li><li><strong>数据大小限制：</strong>TCP对发送的数据进行分段，并确保它们按正确的顺序组装。它没有严格的数据大小限制。UDP的数据包大小有限制，每个数据包的最大大小为64KB。</li><li><strong>适用场景：</strong>TCP适用于需要可靠数据传输和按顺序传输的应用程序，例如文件传输、电子邮件和Web浏览器。UDP适用于对实时性要求较高的应用程序，例如音频&#x2F;视频流传输、实时游戏和实时通信。</li></ol><p>总之，TCP提供可靠的、面向连接的通信，适用于对数据可靠性和顺序要求较高的应用。UDP提供快速、无连接的通信，适用于实时性要求较高且可靠性要求相对较低的应用。选择使用哪种协议取决于应用的需求和特定的使用情境。</p>]]></content>
      
      
      <categories>
          
          <category> 网络通信 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶之浏览器是如何渲染页面的</title>
      <link href="/posts/2c289212/"/>
      <url>/posts/2c289212/</url>
      
        <content type="html"><![CDATA[<h2 id="浏览器是如何渲染页面的？"><a href="#浏览器是如何渲染页面的？" class="headerlink" title="浏览器是如何渲染页面的？"></a>浏览器是如何渲染页面的？</h2><p>当浏览器的网络线程收到 HTML 文档后，会产生一个渲染任务，并将其传递给渲染主线程的消息队列。</p><p>在事件循环机制的作用下，渲染主线程取出消息队列中的渲染任务，开启渲染流程。</p><hr><p>整个渲染流程分为多个阶段，分别是： HTML 解析、样式计算、布局、分层、绘制、分块、光栅化、画</p><p>每个阶段都有明确的输入输出，上一个阶段的输出会成为下一个阶段的输入。</p><p>这样，整个渲染流程就形成了一套组织严密的生产流水线。</p><hr><p>渲染的第一步是<strong>解析 HTML</strong>。</p><p>解析过程中遇到 CSS 解析 CSS，遇到 JS 执行 JS。为了提高解析效率，浏览器在开始解析前，会启动一个预解析的线程，率先下载 HTML 中的外部 CSS 文件和 外部的 JS 文件。</p><p>如果主线程解析到<code>link</code>位置，此时外部的 CSS 文件还没有下载解析好，主线程不会等待，继续解析后续的 HTML。这是因为下载和解析 CSS 的工作是在预解析线程中进行的。这就是 CSS 不会阻塞 HTML 解析的根本原因。</p><p>如果主线程解析到<code>script</code>位置，会停止解析 HTML，转而等待 JS 文件下载好，并将全局代码解析执行完成后，才能继续解析 HTML。这是因为 JS 代码的执行过程可能会修改当前的 DOM 树，所以 DOM 树的生成必须暂停。这就是 JS 会阻塞 HTML 解析的根本原因。</p><p>第一步完成后，会得到 DOM 树和 CSSOM 树，浏览器的默认样式、内部样式、外部样式、行内样式均会包含在 CSSOM 树中。</p><hr><p>渲染的下一步是<strong>样式计算</strong>。</p><p>主线程会遍历得到的 DOM 树，依次为树中的每个节点计算出它最终的样式，称之为 Computed Style。</p><p>在这一过程中，很多预设值会变成绝对值，比如<code>red</code>会变成<code>rgb(255,0,0)</code>；相对单位会变成绝对单位，比如<code>em</code>会变成<code>px</code></p><p>这一步完成后，会得到一棵带有样式的 DOM 树。</p><hr><p>接下来是<strong>布局</strong>，布局完成后会得到布局树。</p><p>布局阶段会依次遍历 DOM 树的每一个节点，计算每个节点的几何信息。例如节点的宽高、相对包含块的位置。</p><p>大部分时候，DOM 树和布局树并非一一对应。</p><p>比如<code>display:none</code>的节点没有几何信息，因此不会生成到布局树；又比如使用了伪元素选择器，虽然 DOM 树中不存在这些伪元素节点，但它们拥有几何信息，所以会生成到布局树中。还有匿名行盒、匿名块盒等等都会导致 DOM 树和布局树无法一一对应。</p><hr><p>下一步是<strong>分层</strong></p><p>主线程会使用一套复杂的策略对整个布局树中进行分层。</p><p>分层的好处在于，将来某一个层改变后，仅会对该层进行后续处理，从而提升效率。</p><p>滚动条、堆叠上下文、transform、opacity 等样式都会或多或少的影响分层结果，也可以通过<code>will-change</code>属性更大程度的影响分层结果。</p><hr><p>再下一步是<strong>绘制</strong></p><p>主线程会为每个层单独产生绘制指令集，用于描述这一层的内容该如何画出来。</p><hr><p>完成绘制后，主线程将每个图层的绘制信息提交给合成线程，剩余工作将由合成线程完成。</p><p>合成线程首先对每个图层进行分块，将其划分为更多的小区域。</p><p>它会从线程池中拿取多个线程来完成分块工作。</p><hr><p>分块完成后，进入<strong>光栅化</strong>阶段。</p><p>合成线程会将块信息交给 GPU 进程，以极高的速度完成光栅化。</p><p>GPU 进程会开启多个线程来完成光栅化，并且优先处理靠近视口区域的块。</p><p>光栅化的结果，就是一块一块的位图</p><hr><p>最后一个阶段就是<strong>画</strong>了</p><p>合成线程拿到每个层、每个块的位图后，生成一个个「指引（quad）」信息。</p><p>指引会标识出每个位图应该画到屏幕的哪个位置，以及会考虑到旋转、缩放等变形。</p><p>变形发生在合成线程，与渲染主线程无关，这就是<code>transform</code>效率高的本质原因。</p><p>合成线程会把 quad 提交给 GPU 进程，由 GPU 进程产生系统调用，提交给 GPU 硬件，完成最终的屏幕成像。</p><h2 id="什么是-reflow？"><a href="#什么是-reflow？" class="headerlink" title="什么是 reflow？"></a>什么是 reflow？</h2><p>reflow 的本质就是重新计算 layout 树。</p><p>当进行了会影响布局树的操作后，需要重新计算布局树，会引发 layout。</p><p>为了避免连续的多次操作导致布局树反复计算，浏览器会合并这些操作，当 JS 代码全部完成后再进行统一计算。所以，改动属性造成的 reflow 是异步完成的。</p><p>也同样因为如此，当 JS 获取布局属性时，就可能造成无法获取到最新的布局信息。</p><p>浏览器在反复权衡下，最终决定获取属性立即 reflow。</p><h2 id="什么是-repaint？"><a href="#什么是-repaint？" class="headerlink" title="什么是 repaint？"></a>什么是 repaint？</h2><p>repaint 的本质就是重新根据分层信息计算了绘制指令。</p><p>当改动了可见样式后，就需要重新计算，会引发 repaint。</p><p>由于元素的布局信息也属于可见样式，所以 reflow 一定会引起 repaint。</p><h2 id="为什么-transform-的效率高？"><a href="#为什么-transform-的效率高？" class="headerlink" title="为什么 transform 的效率高？"></a>为什么 transform 的效率高？</h2><p>因为 transform 既不会影响布局也不会影响绘制指令，它影响的只是渲染流程的最后一个「draw」阶段</p><p>由于 draw 阶段在合成线程中，所以 transform 的变化几乎不会影响渲染主线程。反之，渲染主线程无论如何忙碌，也不会影响 transform 的变化。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶之你不知道的CSS之包含块</title>
      <link href="/posts/7e17d776/"/>
      <url>/posts/7e17d776/</url>
      
        <content type="html"><![CDATA[<h1 id="你不知道的-CSS-之包含块"><a href="#你不知道的-CSS-之包含块" class="headerlink" title="你不知道的 CSS 之包含块"></a>你不知道的 CSS 之包含块</h1><p>一说到 CSS 盒模型，这是很多小伙伴耳熟能详的知识，甚至有的小伙伴还能说出 border-box 和 content-box 这两种盒模型的区别。</p><p>但是一说到 CSS 包含块，有的小伙伴就懵圈了，什么是包含块？好像从来没有听说过这玩意儿。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-142005.png" alt="image-20220814222004395" style="zoom: 20%;" /><p>好吧，如果你对包含块的知识一无所知，那么系好安全带，咱们准备出发了。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-060434.png" alt="image-20220813140434032" style="zoom:50%;" /><p>包含块英语全称为<strong>containing block</strong>，实际上平时你在书写 CSS 时，大多数情况下你是感受不到它的存在，因此你不知道这个知识点也是一件很正常的事情。但是这玩意儿是确确实实存在的，在 CSS 规范中也是明确书写了的：</p><p><em><a href="https://drafts.csswg.org/css2/#containing-block-details">https://drafts.csswg.org/css2/#containing-block-details</a></em></p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-142459.png" alt="image-20220814222458695" style="zoom:50%;" /><p>并且，如果你不了解它的运作机制，有时就会出现一些你认为的莫名其妙的现象。</p><p>那么，这个包含块究竟说了什么内容呢？</p><p>说起来也简单，<strong>就是元素的尺寸和位置，会受它的包含块所影响。对于一些属性，例如 width, height, padding, margin，绝对定位元素的偏移值（比如 position 被设置为 absolute 或 fixed），当我们对其赋予百分比值时，这些值的计算值，就是通过元素的包含块计算得来。</strong></p><p>来吧，少年，让我们从最简单的 case 开始看。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-143153.png" alt="image-20220814223152726" style="zoom: 50%;" /><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请仔细阅读上面的代码，然后你认为 div.item 这个盒子的宽高是多少？</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-143451.png" alt="image-20220814223451349" style="zoom: 33%;" /><p>相信你能够很自信的回答这个简单的问题，div.item 盒子的 width 为 250px，height 为 150px。</p><p>这个答案确实是没有问题的，但是如果我追问你是怎么得到这个答案的，我猜不了解包含块的你大概率会说，因为它的父元素 div.container 的 width 为 500px，50% 就是 250px，height 为 300px，因此 50% 就是 150px。</p><p>这个答案实际上是不准确的。正确的答案应该是，<strong>div.item 的宽高是根据它的包含块来计算的</strong>，而这里包含块的大小，正是这个元素最近的祖先块元素的内容区。</p><p>因此正如我前面所说，<strong>很多时候你都感受不到包含块的存在。</strong></p><p>包含块分为两种，一种是根元素（HTML 元素）所在的包含块，被称之为初始包含块（<strong>initial containing block</strong>）。对于浏览器而言，初始包含块的的大小等于视口 viewport 的大小，基点在画布的原点（视口左上角）。它是作为元素绝对定位和固定定位的参照物。</p><p>另外一种是对于非根元素，对于非根元素的包含块判定就有几种不同的情况了。大致可以分为如下几种：</p><ul><li>如果元素的 positiion 是 relative 或 static ，那么包含块由离它最近的块容器（block container）的内容区域（content area）的边缘建立。</li><li>如果 position 属性是 fixed，那么包含块由视口建立。</li><li>如果元素使用了 absolute 定位，则包含块由它的最近的 position 的值不是 static （也就是值为fixed、absolute、relative 或 sticky）的祖先元素的内边距区的边缘组成。</li></ul><p>前面两条实际上都还比较好理解，第三条往往是初学者容易比较忽视的，我们来看一个示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先阅读上面的代码，然后你能在脑海里面想出其大致的样子么？或者用笔和纸画一下也行。</p><p>公布正确答案：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-153548.png" alt="image-20220814233548188" style="zoom: 33%;" /><p>怎么样？有没有和你所想象的对上？</p><p>其实原因也非常简单，根据上面的第三条规则，对于 div.item2 来讲，它的包含块应该是 div.container，而非 div.item。</p><p>如果你能把上面非根元素的包含块判定规则掌握，那么关于包含块的知识你就已经掌握 80% 了。</p><p>实际上对于非根元素来讲，包含块还有一种可能，那就是如果 position 属性是 absolute 或 fixed，包含块也可能是由满足以下条件的最近父级元素的内边距区的边缘组成的：</p><ul><li>transform 或 perspective 的值不是 none</li><li>will-change 的值是 transform 或 perspective </li><li>filter 的值不是 none 或 will-change 的值是 filter(只在 Firefox 下生效). </li><li>contain 的值是 paint (例如: contain: paint;)</li></ul><p>我们还是来看一个示例：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: skyblue;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>); <span class="comment">/* 新增代码 */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item2</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们对于上面的代码只新增了一条声明，那就是 transform: rotate(0deg)，此时的渲染效果却发生了改变，如下图所示：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154347.png" alt="image-20220814234347149" style="zoom:33%;" /><p>可以看到，此时对于 div.item2 来讲，包含块就变成了 div.item。</p><p>好了，到这里，关于包含块的知识就基本讲完了。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154655.png" alt="image-20220814234654914" style="zoom:33%;" /><p>我们再把 CSS 规范中所举的例子来看一下。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Illustration of containing blocks<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span> <span class="attr">id</span>=<span class="string">&quot;body&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;div1&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p1&quot;</span>&gt;</span>This is text in the first paragraph...<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span> <span class="attr">id</span>=<span class="string">&quot;p2&quot;</span>&gt;</span></span><br><span class="line">        This is text</span><br><span class="line">        <span class="tag">&lt;<span class="name">em</span> <span class="attr">id</span>=<span class="string">&quot;em1&quot;</span>&gt;</span></span><br><span class="line">          in the</span><br><span class="line">          <span class="tag">&lt;<span class="name">strong</span> <span class="attr">id</span>=<span class="string">&quot;strong1&quot;</span>&gt;</span>second<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line">          paragraph.</span><br><span class="line">        <span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面是一段简单的 HTML 代码，在没有添加任何 CSS 代码的情况下，你能说出各自的包含块么？</p><p>对应的结果如下：</p><table><thead><tr><th>元素</th><th>包含块</th></tr></thead><tbody><tr><td>html</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>body</td><td>html</td></tr><tr><td>div1</td><td>body</td></tr><tr><td>p1</td><td>div1</td></tr><tr><td>p2</td><td>div1</td></tr><tr><td>em1</td><td>p2</td></tr><tr><td>strong1</td><td>p2</td></tr></tbody></table><p>首先 HTML 作为根元素，对应的包含块就是前面我们所说的初始包含块，而对于 body 而言，这是一个 static 定位的元素，因此该元素的包含块参照第一条为 html，以此类推 div1、p1、p2 以及 em1 的包含块也都是它们的父元素。</p><p>不过 strong1 比较例外，它的包含块确实 p2，而非 em1。为什么会这样？建议你再把非根元素的第一条规则读一下：</p><ul><li>如果元素的 positiion 是 relative 或 static ，那么包含块由离它最近的<strong>块容器（block container）</strong>的内容区域（content area）的边缘建立。</li></ul><p>没错，因为 em1 不是块容器，而包含块是<strong>离它最近的块容器</strong>的内容区域，所以是 p2。</p><p>接下来添加如下的 CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>; <span class="attribute">top</span>: <span class="number">50px</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的代码我们对 div1 进行了定位，那么此时的包含块会发生变化么？你可以先在自己思考一下。</p><p>答案如下：</p><table><thead><tr><th>元素</th><th>包含块</th></tr></thead><tbody><tr><td>html</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>body</td><td>html</td></tr><tr><td>div1</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>p1</td><td>div1</td></tr><tr><td>p2</td><td>div1</td></tr><tr><td>em1</td><td>p2</td></tr><tr><td>strong1</td><td>p2</td></tr></tbody></table><p>可以看到，这里 div1 的包含块就发生了变化，变为了初始包含块。这里你可以参考前文中的这两句话：</p><ul><li>初始包含块（<strong>initial containing block</strong>）。对于浏览器而言，初始包含块的的大小等于视口 viewport 的大小，基点在画布的原点（视口左上角）。它是作为元素绝对定位和固定定位的参照物。</li><li>如果元素使用了 absolute 定位，则包含块由它的最近的 position 的值不是 static （也就是值为fixed、absolute、relative 或 sticky）的祖先元素的内边距区的边缘组成。</li></ul><p>是不是一下子就理解了。没错，因为我们对 div1 进行了定位，因此它会应用非根元素包含块计算规则的第三条规则，寻找离它最近的  position 的值不是 static 的祖先元素，不过显然 body 的定位方式为 static，因此 div1 的包含块最终就变成了初始包含块。</p><p>接下来我们继续修改我们的 CSS：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#div1</span> &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>; </span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span> </span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#em1</span>  &#123; </span><br><span class="line">  <span class="attribute">position</span>: absolute; </span><br><span class="line">  <span class="attribute">left</span>: <span class="number">100px</span>; </span><br><span class="line">  <span class="attribute">top</span>: <span class="number">100px</span> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们对 em1 同样进行了 absolute 绝对定位，你想一想会有什么样的变化？</p><p>没错，聪明的你大概应该知道，em1 的包含块不再是 p2，而变成了 div1，而 strong1 的包含块也不再是 p2 了，而是变成了 em1。</p><p>如下表所示：</p><table><thead><tr><th>元素</th><th>包含块</th></tr></thead><tbody><tr><td>html</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>body</td><td>html</td></tr><tr><td>div1</td><td>initial C.B. (UA-dependent)</td></tr><tr><td>p1</td><td>div1</td></tr><tr><td>p2</td><td>div1</td></tr><tr><td>em1</td><td>div1（因为定位了，参阅非根元素包含块确定规则的第三条）</td></tr><tr><td>strong1</td><td>em1（因为 em1 变为了块容器，参阅非根元素包含块确定规则的第一条）</td></tr></tbody></table><p>好了，这就是 CSS 规范中所举的例子。如果你全都能看明白，以后你还能跟别人说你是看过这一块知识对应的 CSS 规范的人。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-013519.png" alt="image-20220815093518833" style="zoom:33%;" /><p>另外，关于包含块的知识，在 MDN 上除了解说了什么是包含块以外，也举出了很多简单易懂的示例。</p><p>具体你可以移步到：<em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Containing_block">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Containing_block</a></em></p><p>好了，这就是有关包含块的所有内容了，你学会了么？-）</p><hr><p>-<em>EOF</em>-</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶之CSS属性计算过程</title>
      <link href="/posts/4171ab52/"/>
      <url>/posts/4171ab52/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS-属性计算过程"><a href="#CSS-属性计算过程" class="headerlink" title="CSS 属性计算过程"></a>CSS 属性计算过程</h1><p>你是否了解 CSS 的属性计算过程呢？</p><p>有的同学可能会讲，CSS属性我倒是知道，例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的 CSS 代码中，p 是元素选择器，color 就是其中的一个 CSS 属性。</p><p>但是要说 CSS 属性的计算过程，还真的不是很清楚。</p><p>没关系，通过此篇文章，能够让你彻底明白什么是 CSS 属性的计算流程。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-060434.png" alt="image-20220813140434032" style="zoom:50%;" /><p>首先，不知道你有没有考虑过这样的一个问题，假设在 HTML 中有这么一段代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是一个h1标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p>上面的代码也非常简单，就是在 body 中有一个 h1 标题而已，该 h1 标题呈现出来的外观是如下：</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-060724.png" alt="image-20220813140724136" style="zoom:50%;" /><p>目前我们没有设置该 h1 的任何样式，但是却能看到该 h1 有一定的默认样式，例如有默认的字体大小、默认的颜色。</p><p>那么问题来了，我们这个 h1 元素上面除了有默认字体大小、默认颜色等属性以外，究竟还有哪些属性呢？</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-014216.png" alt="image-20220815094215982" style="zoom:30%;" /><p>答案是<strong>该元素上面会有 CSS 所有的属性。</strong>你可以打开浏览器的开发者面板，选择【元素】，切换到【计算样式】，之后勾选【全部显示】，此时你就能看到在此 h1 上面所有 CSS 属性对应的值。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-061516.png" alt="image-20220813141516153"></p><p>换句话说，<strong>我们所书写的任何一个 HTML 元素，实际上都有完整的一整套 CSS 样式</strong>。这一点往往是让初学者比较意外的，因为我们平时在书写 CSS 样式时，往往只会书写必要的部分，例如前面的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这往往会给我们造成一种错觉，认为该 p 元素上面就只有 color 属性。而真实的情况确是，任何一个 HTML 元素，都有一套完整的 CSS 样式，只不过你没有书写的样式，<strong>大概率可能</strong>会使用其默认值。例如上图中 h1 一个样式都没有设置，全部都用的默认值。</p><p>但是注意，我这里强调的是“大概率可能”，难道还有我们“没有设置值，但是不使用默认值”的情况么？</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-15-014459.png" alt="image-20220815094458940" style="zoom:25%;" /><p>嗯，确实有的，所以我才强调你要了解“CSS 属性的计算过程”。</p><p>总的来讲，属性值的计算过程，分为如下这么 <em>4</em> 个步骤：</p><ul><li>确定声明值</li><li>层叠冲突</li><li>使用继承</li><li>使用默认值</li></ul><h2 id="确定声明值"><a href="#确定声明值" class="headerlink" title="确定声明值"></a>确定声明值</h2><p>首先第一步，是确定声明值。所谓声明值就是作者自己所书写的 CSS 样式，例如前面的：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们声明了 p 元素为红色，那么就会应用此属性设置。</p><p>当然，除了作者样式表，一般浏览器还会存在“用户代理样式表”，简单来讲就是浏览器内置了一套样式表。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-063500.png" alt="image-20220813143500066"></p><p>在上面的示例中，作者样式表中设置了 color 属性，而用户代理样式表（浏览器提供的样式表）中设置了诸如 display、margin-block-start、margin-block-end、margin-inline-start、margin-inline-end 等属性对应的值。</p><p>这些值目前来讲也没有什么冲突，因此最终就会应用这些属性值。</p><h2 id="层叠冲突"><a href="#层叠冲突" class="headerlink" title="层叠冲突"></a>层叠冲突</h2><p>在确定声明值时，可能出现一种情况，那就是声明的样式规则发生了冲突。</p><p>此时会进入解决层叠冲突的流程。而这一步又可以细分为下面这三个步骤：</p><ul><li>比较源的重要性</li><li>比较优先级</li><li>比较次序</li></ul><p>来来来，我们一步一步来看。</p><h3 id="比较源的重要性"><a href="#比较源的重要性" class="headerlink" title="比较源的重要性"></a>比较源的重要性</h3><p>当不同的 CSS 样式来源拥有相同的声明时，此时就会根据样式表来源的重要性来确定应用哪一条样式规则。</p><p>那么问题来了，咱们的样式表的源究竟有几种呢？</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-23-100047.png" alt="image-20220823180047075" style="zoom:40%;" /><p>整体来讲有三种来源：</p><ul><li>浏览器会有一个基本的样式表来给任何网页设置默认样式。这些样式统称<strong>用户代理样式</strong>。</li><li>网页的作者可以定义文档的样式，这是最常见的样式表，称之为<strong>页面作者样式</strong>。</li><li>浏览器的用户，可以使用自定义样式表定制使用体验，称之为<strong>用户样式</strong>。</li></ul><p>对应的重要性顺序依次为：页面作者样式 &gt; 用户样式 &gt; 用户代理样式</p><p>更详细的来源重要性比较，可以参阅 <em>MDN</em>：<em><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade">https://developer.mozilla.org/zh-CN/docs/Web/CSS/Cascade</a></em></p><p>我们来看一个示例。</p><p>例如现在有<strong>页面作者样式表</strong>和<strong>用户代理样式表</strong>中存在属性的冲突，那么会以作者样式表优先。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">  <span class="attribute">color</span> : red;</span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-064222.png" alt="image-20220813144222152"></p><p>可以明显的看到，作者样式表和用户代理样式表中同时存在的 display 属性的设置，最终作者样式表干掉了用户代理样式表中冲突的属性。这就是第一步，根据不同源的重要性来决定应用哪一个源的样式。</p><h3 id="比较优先级"><a href="#比较优先级" class="headerlink" title="比较优先级"></a>比较优先级</h3><p>那么接下来，如果是在在同一个源中有样式声明冲突怎么办呢？此时就会进行样式声明的优先级比较。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>test<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.test</span> <span class="selector-tag">h1</span>&#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，同属于<strong>页面作者样式</strong>，源的重要性是相同的，此时会以选择器的权重来比较重要性。</p><p>很明显，上面的选择器的权重要大于下面的选择器，因此最终标题呈现为 <em>50px</em>。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2021-09-16-071546.png" alt="image-20210916151546500" style="zoom: 40%;" /><p>可以看到，落败的作者样式在 <em>Elements&gt;Styles</em> 中会被划掉。</p><p>有关选择器权重的计算方式，不清楚的同学，可以进入此传送门：<em><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity">https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity</a></em></p><h3 id="比较次序"><a href="#比较次序" class="headerlink" title="比较次序"></a>比较次序</h3><p>经历了上面两个步骤，大多数的样式声明能够被确定下来。但是还剩下最后一种情况，那就是样式声明既是同源，权重也相同。</p><p>此时就会进入第三个步骤，比较样式声明的次序。</p><p>举个例子：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span> &#123;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，同样都是<strong>页面作者样式</strong>，<strong>选择器的权重也相同</strong>，此时位于下面的样式声明会层叠掉上面的那一条样式声明，最终会应用 <em>20px</em> 这一条属性值。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-23-103928.png" alt="image-20220823183928330"></p><p>至此，样式声明中存在冲突的所有情况，就全部被解决了。</p><h2 id="使用继承"><a href="#使用继承" class="headerlink" title="使用继承"></a>使用继承</h2><p>层叠冲突这一步完成后，解决了相同元素被声明了多条样式规则究竟应用哪一条样式规则的问题。</p><p>那么如果没有声明的属性呢？此时就使用默认值么？</p><p><em>No、No、No</em>，别急，此时还有第三个步骤，那就是使用继承而来的值。</p><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们针对 div 设置了 color 属性值为红色，而针对 p 元素我们没有声明任何的属性，但是由于 color 是可以继承的，因此 p 元素从最近的 div 身上继承到了 color 属性的值。</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-065102.png" alt="image-20220813145102293"></p><p>这里有两个点需要同学们注意一下。</p><p>首先第一个是我强调了是<strong>最近的</strong> div 元素，看下面的例子：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;test&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Lorem ipsum dolor sit amet.<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.test</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-065653.png" alt="image-20220813145652726"></p><p>因为这里并不涉及到选中 p 元素声明 color 值，而是从父元素上面继承到 color 对应的值，因此这里是<strong>谁近就听谁</strong>的，初学者往往会产生混淆，又去比较权重，但是这里根本不会涉及到权重比较，因为压根儿就没有选中到 p 元素。</p><p>第二个就是哪些属性能够继承？</p><p>关于这一点的话，大家可以在 MDN 上面很轻松的查阅到。例如我们以 text-align 为例，如下图所示：</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-070148.png" alt="image-20220813150147885"></p><h2 id="使用默认值"><a href="#使用默认值" class="headerlink" title="使用默认值"></a>使用默认值</h2><p>好了，目前走到这一步，如果属性值都还不能确定下来，那么就只能是使用默认值了。</p><p>如下图所示：</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-070825.png" alt="image-20220813150824752"></p><p>前面我们也说过，一个 HTML 元素要在浏览器中渲染出来，必须具备所有的 CSS 属性值，但是绝大部分我们是不会去设置的，用户代理样式表里面也不会去设置，也无法从继承拿到，因此最终都是用默认值。</p><p>好了，这就是关于 CSS 属性计算过程的所有知识了。</p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-14-154655.png" alt="image-20220814234654914" style="zoom:33%;" /><h2 id="一道面试题"><a href="#一道面试题" class="headerlink" title="一道面试题"></a>一道面试题</h2><p>好了，学习了今天的内容，让我来用一道面试题测试测试大家的理解程度。</p><p>下面的代码，最终渲染出来的效果，a 元素是什么颜色？p 元素又是什么颜色？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&quot;</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>test<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大家能说出为什么会呈现这样的结果么？</p><p>解答如下：</p><p><img src="https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-08-13-071941.png" alt="image-20220813151941113"></p><p>实际上原因很简单，因为 a 元素在用户代理样式表中已经设置了 color 属性对应的值，因此会应用此声明值。而在 p 元素中无论是作者样式表还是用户代理样式表，都没有对此属性进行声明，然而由于 color 属性是可以继承的，因此最终 p 元素的 color 属性值通过继承来自于父元素。</p><p>你答对了么？-）</p><hr><p>-<em>EOF</em>-</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端进阶-之事件循环</title>
      <link href="/posts/7e17d776/"/>
      <url>/posts/7e17d776/</url>
      
        <content type="html"><![CDATA[<h1 id="事件循环"><a href="#事件循环" class="headerlink" title="事件循环"></a>事件循环</h1><h2 id="浏览器的进程模型"><a href="#浏览器的进程模型" class="headerlink" title="浏览器的进程模型"></a>浏览器的进程模型</h2><h3 id="何为进程？"><a href="#何为进程？" class="headerlink" title="何为进程？"></a>何为进程？</h3><p>程序运行需要有它自己专属的内存空间，可以把这块内存空间简单的理解为进程</p><img src="http://mdrs.yuanjin.tech/img/202208092057573.png" alt="image-20220809205743532" style="zoom:50%;" /><p>每个应用至少有一个进程，进程之间相互独立，即使要通信，也需要双方同意。</p><h3 id="何为线程？"><a href="#何为线程？" class="headerlink" title="何为线程？"></a>何为线程？</h3><p>有了进程后，就可以运行程序的代码了。</p><p>运行代码的「人」称之为「线程」。</p><p>一个进程至少有一个线程，所以在进程开启后会自动创建一个线程来运行代码，该线程称之为主线程。</p><p>如果程序需要同时执行多块代码，主线程就会启动更多的线程来执行代码，所以一个进程中可以包含多个线程。</p><p><img src="http://mdrs.yuanjin.tech/img/202208092108499.png" alt="image-20220809210859457"></p><h3 id="浏览器有哪些进程和线程？"><a href="#浏览器有哪些进程和线程？" class="headerlink" title="浏览器有哪些进程和线程？"></a>浏览器有哪些进程和线程？</h3><p><strong>浏览器是一个多进程多线程的应用程序</strong></p><p>浏览器内部工作极其复杂。</p><p>为了避免相互影响，为了减少连环崩溃的几率，当启动浏览器后，它会自动启动多个进程。</p><p><img src="http://mdrs.yuanjin.tech/img/202208092131410.png" alt="image-20220809213152371"></p><blockquote><p>可以在浏览器的任务管理器中查看当前的所有进程</p></blockquote><p>其中，最主要的进程有：</p><ol><li><p>浏览器进程</p><p>主要负责界面显示、用户交互、子进程管理等。浏览器进程内部会启动多个线程处理不同的任务。</p></li><li><p>网络进程</p><p>负责加载网络资源。网络进程内部会启动多个线程来处理不同的网络任务。</p></li><li><p><strong>渲染进程</strong>（本节课重点讲解的进程）</p><p>渲染进程启动后，会开启一个<strong>渲染主线程</strong>，主线程负责执行 HTML、CSS、JS 代码。</p><p>默认情况下，浏览器会为每个标签页开启一个新的渲染进程，以保证不同的标签页之间不相互影响。</p><blockquote><p>将来该默认模式可能会有所改变，有兴趣的同学可参见<a href="https://chromium.googlesource.com/chromium/src/+/main/docs/process_model_and_site_isolation.md#Modes-and-Availability">chrome官方说明文档</a></p></blockquote></li></ol><h2 id="渲染主线程是如何工作的？"><a href="#渲染主线程是如何工作的？" class="headerlink" title="渲染主线程是如何工作的？"></a>渲染主线程是如何工作的？</h2><p>渲染主线程是浏览器中最繁忙的线程，需要它处理的任务包括但不限于：</p><ul><li>解析 HTML</li><li>解析 CSS</li><li>计算样式</li><li>布局</li><li>处理图层</li><li>每秒把页面画 60 次</li><li>执行全局 JS 代码</li><li>执行事件处理函数</li><li>执行计时器的回调函数</li><li>……</li></ul><blockquote><p>思考题：为什么渲染进程不适用多个线程来处理这些事情？</p></blockquote><p>要处理这么多的任务，主线程遇到了一个前所未有的难题：如何调度任务？</p><p>比如：</p><ul><li>我正在执行一个 JS 函数，执行到一半的时候用户点击了按钮，我该立即去执行点击事件的处理函数吗？</li><li>我正在执行一个 JS 函数，执行到一半的时候某个计时器到达了时间，我该立即去执行它的回调吗？</li><li>浏览器进程通知我“用户点击了按钮”，与此同时，某个计时器也到达了时间，我应该处理哪一个呢？</li><li>……</li></ul><p>渲染主线程想出了一个绝妙的主意来处理这个问题：排队</p><p><img src="http://mdrs.yuanjin.tech/img/202208092230847.png" alt="image-20220809223027806"></p><ol><li>在最开始的时候，渲染主线程会进入一个无限循环</li><li>每一次循环会检查消息队列中是否有任务存在。如果有，就取出第一个任务执行，执行完一个后进入下一次循环；如果没有，则进入休眠状态。</li><li>其他所有线程（包括其他进程的线程）可以随时向消息队列添加任务。新任务会加到消息队列的末尾。在添加新任务时，如果主线程是休眠状态，则会将其唤醒以继续循环拿取任务</li></ol><p>这样一来，就可以让每个任务有条不紊的、持续的进行下去了。</p><p><strong>整个过程，被称之为事件循环（消息循环）</strong></p><h2 id="若干解释"><a href="#若干解释" class="headerlink" title="若干解释"></a>若干解释</h2><h3 id="何为异步？"><a href="#何为异步？" class="headerlink" title="何为异步？"></a>何为异步？</h3><p>代码在执行过程中，会遇到一些无法立即处理的任务，比如：</p><ul><li>计时完成后需要执行的任务 —— <code>setTimeout</code>、<code>setInterval</code></li><li>网络通信完成后需要执行的任务 – <code>XHR</code>、<code>Fetch</code></li><li>用户操作后需要执行的任务 – <code>addEventListener</code></li></ul><p>如果让渲染主线程等待这些任务的时机达到，就会导致主线程长期处于「阻塞」的状态，从而导致浏览器「卡死」</p><p><img src="http://mdrs.yuanjin.tech/img/202208101043348.png" alt="image-20220810104344296"></p><p><strong>渲染主线程承担着极其重要的工作，无论如何都不能阻塞！</strong></p><p>因此，浏览器选择<strong>异步</strong>来解决这个问题</p><p><img src="http://mdrs.yuanjin.tech/img/202208101048899.png" alt="image-20220810104858857"></p><p>使用异步的方式，<strong>渲染主线程永不阻塞</strong></p><blockquote><p>面试题：如何理解 JS 的异步？</p><p>参考答案：</p><p>JS是一门单线程的语言，这是因为它运行在浏览器的渲染主线程中，而渲染主线程只有一个。</p><p>而渲染主线程承担着诸多的工作，渲染页面、执行 JS 都在其中运行。</p><p>如果使用同步的方式，就极有可能导致主线程产生阻塞，从而导致消息队列中的很多其他任务无法得到执行。这样一来，一方面会导致繁忙的主线程白白的消耗时间，另一方面导致页面无法及时更新，给用户造成卡死现象。</p><p>所以浏览器采用异步的方式来避免。具体做法是当某些任务发生时，比如计时器、网络、事件监听，主线程将任务交给其他线程去处理，自身立即结束任务的执行，转而执行后续代码。当其他线程完成时，将事先传递的回调函数包装成任务，加入到消息队列的末尾排队，等待主线程调度执行。</p><p>在这种异步模式下，浏览器永不阻塞，从而最大限度的保证了单线程的流畅运行。</p></blockquote><h3 id="JS为何会阻碍渲染？"><a href="#JS为何会阻碍渲染？" class="headerlink" title="JS为何会阻碍渲染？"></a>JS为何会阻碍渲染？</h3><p>先看代码</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Mr.Yuan is awesome!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span>&gt;</span>change<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> h1 = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;button&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  <span class="comment">// 死循环指定的时间</span></span></span><br><span class="line"><span class="language-javascript">  <span class="keyword">function</span> <span class="title function_">delay</span>(<span class="params">duration</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">var</span> start = <span class="title class_">Date</span>.<span class="title function_">now</span>();</span></span><br><span class="line"><span class="language-javascript">    <span class="keyword">while</span> (<span class="title class_">Date</span>.<span class="title function_">now</span>() - start &lt; duration) &#123;&#125;</span></span><br><span class="line"><span class="language-javascript">  &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">  btn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">    h1.<span class="property">textContent</span> = <span class="string">&#x27;袁老师很帅！&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">    <span class="title function_">delay</span>(<span class="number">3000</span>);</span></span><br><span class="line"><span class="language-javascript">  &#125;;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击按钮后，会发生什么呢？</p><p>&lt;见具体演示&gt;</p><h3 id="任务有优先级吗？"><a href="#任务有优先级吗？" class="headerlink" title="任务有优先级吗？"></a>任务有优先级吗？</h3><p>任务没有优先级，在消息队列中先进先出</p><p>但<strong>消息队列是有优先级的</strong></p><p>根据 W3C 的最新解释:</p><ul><li>每个任务都有一个任务类型，同一个类型的任务必须在一个队列，不同类型的任务可以分属于不同的队列。<br>在一次事件循环中，浏览器可以根据实际情况从不同的队列中取出任务执行。</li><li>浏览器必须准备好一个微队列，微队列中的任务优先所有其他任务执行<br><a href="https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint">https://html.spec.whatwg.org/multipage/webappapis.html#perform-a-microtask-checkpoint</a></li></ul><blockquote><p>随着浏览器的复杂度急剧提升，W3C 不再使用宏队列的说法</p></blockquote><p>在目前 chrome 的实现中，至少包含了下面的队列：</p><ul><li>延时队列：用于存放计时器到达后的回调任务，优先级「中」</li><li>交互队列：用于存放用户操作后产生的事件处理任务，优先级「高」</li><li>微队列：用户存放需要最快执行的任务，优先级「最高」</li></ul><blockquote><p>添加任务到微队列的主要方式主要是使用 Promise、MutationObserver</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 立即把一个函数添加到微队列</span></span><br><span class="line"><span class="title class_">Promise</span>.<span class="title function_">resolve</span>().<span class="title function_">then</span>(函数)</span><br></pre></td></tr></table></figure></blockquote><blockquote><p>浏览器还有很多其他的队列，由于和我们开发关系不大，不作考虑</p></blockquote><blockquote><p>面试题：阐述一下 JS 的事件循环</p><p>参考答案：</p><p>事件循环又叫做消息循环，是浏览器渲染主线程的工作方式。</p><p>在 Chrome 的源码中，它开启一个不会结束的 for 循环，每次循环从消息队列中取出第一个任务执行，而其他线程只需要在合适的时候将任务加入到队列末尾即可。</p><p>过去把消息队列简单分为宏队列和微队列，这种说法目前已无法满足复杂的浏览器环境，取而代之的是一种更加灵活多变的处理方式。</p><p>根据 W3C 官方的解释，每个任务有不同的类型，同类型的任务必须在同一个队列，不同的任务可以属于不同的队列。不同任务队列有不同的优先级，在一次事件循环中，由浏览器自行决定取哪一个队列的任务。但浏览器必须有一个微队列，微队列的任务一定具有最高的优先级，必须优先调度执行。</p></blockquote><blockquote><p>面试题：JS 中的计时器能做到精确计时吗？为什么？</p><p>参考答案：</p><p>不行，因为：</p><ol><li>计算机硬件没有原子钟，无法做到精确计时</li><li>操作系统的计时函数本身就有少量偏差，由于 JS 的计时器最终调用的是操作系统的函数，也就携带了这些偏差</li><li>按照 W3C 的标准，浏览器实现计时器时，如果嵌套层级超过 5 层，则会带有 4 毫秒的最少时间，这样在计时时间少于 4 毫秒时又带来了偏差</li><li>受事件循环的影响，计时器的回调函数只能在主线程空闲时运行，因此又带来了偏差</li></ol></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS工程化(八)-抽离css文件</title>
      <link href="/posts/9bfbc455/"/>
      <url>/posts/9bfbc455/</url>
      
        <content type="html"><![CDATA[<h1 id="抽离css文件"><a href="#抽离css文件" class="headerlink" title="抽离css文件"></a>抽离css文件</h1><p>目前，css代码被css-loader转换后，交给的是style-loader进行处理。</p><p>style-loader使用的方式是用一段js代码，将样式加入到style元素中。</p><p>而实际的开发中，我们往往希望依赖的样式最终形成一个css文件</p><p>此时，就需要用到一个库：<code>mini-css-extract-plugin</code></p><p>该库提供了1个plugin和1个loader</p><ul><li>plugin：负责生成css文件</li><li>loader：负责记录要生成的css文件的内容，同时导出开启css-module后的样式对象</li></ul><p>使用方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MiniCssExtractPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;mini-css-extract-plugin&quot;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, </span><br><span class="line">                <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader?modules&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="comment">// 负责生成css文件</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">filename</span>: <span class="string">&quot;css/[name].[contenthash:5].css&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>配置生成的文件名</strong></p><p>同<code>output.filename</code>的含义一样，即根据chunk生成的样式文件名</p><p>配置生成的文件名，例如<code>[name].[contenthash:5].css</code></p><p>默认情况下，每个chunk对应一个css文件</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS工程化(七)-Postcss</title>
      <link href="/posts/d79e90c0/"/>
      <url>/posts/d79e90c0/</url>
      
        <content type="html"><![CDATA[<h1 id="PostCss"><a href="#PostCss" class="headerlink" title="PostCss"></a>PostCss</h1><h1 id="什么是PostCss"><a href="#什么是PostCss" class="headerlink" title="什么是PostCss"></a>什么是PostCss</h1><p>可以看出，CSS工程化面临着诸多问题，而解决这些问题的方案多种多样。</p><p>如果把CSS单独拎出来看，光是样式本身，就有很多事情要处理。</p><p>既然有这么多事情要处理，何不把这些事情集中到一起统一处理呢？</p><p>PostCss就是基于这样的理念出现的。</p><p>PostCss类似于一个编译器，可以将样式源码编译成最终的CSS代码</p><p><img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E4%B8%83)-Postcss/image-20240918012513605.png" alt="image-20240918012513605"></p><p>看上去是不是和LESS、SASS一样呢？</p><p>但PostCss和LESS、SASS的思路不同，它其实只做一些代码分析之类的事情，将分析的结果交给插件，具体的代码转换操作是插件去完成的。</p><p><img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E4%B8%83)-Postcss/image-20240918012526078.png" alt="image-20240918012526078"></p><p>官方的一张图更能说明postcss的处理流程：</p><p><img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E4%B8%83)-Postcss/image-20240918012538039.png" alt="image-20240918012538039"></p><blockquote><p>这一点有点像webpack，webpack本身仅做依赖分析、抽象语法树分析，其他的操作是靠插件和加载器完成的。</p></blockquote><p>官网地址：<a href="https://postcss.org/">https://postcss.org/</a></p><p>github地址：<a href="https://github.com/postcss/postcss">https://github.com/postcss/postcss</a></p><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>PostCss是基于node编写的，因此可以使用npm安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss</span><br></pre></td></tr></table></figure><p>postcss库提供了对应的js api用于转换代码，如果你想使用postcss的一些高级功能，或者想开发postcss插件，就要api使用postcss，api的文档地址是：<a href="http://api.postcss.org/">http://api.postcss.org/</a></p><p>不过绝大部分时候，我们都是使用者，并不希望使用代码的方式来使用PostCss</p><p>因此，我们可以再安装一个postcss-cli，通过命令行来完成编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D postcss-cli</span><br></pre></td></tr></table></figure><p>postcss-cli提供一个命令，它调用postcss中的api来完成编译</p><p>命令的使用方式为：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">postcss 源码文件 -o 输出文件</span><br></pre></td></tr></table></figure><h1 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h1><p>和webpack类似，postcss有自己的配置文件，该配置文件会影响postcss的某些编译行为。</p><p>配置文件的默认名称是：<code>postcss.config.js</code></p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">map</span>: <span class="literal">false</span>, <span class="comment">//关闭source-map</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h1><p>光使用postcss是没有多少意义的，要让它真正的发挥作用，需要插件</p><p>postcss的插件市场：<a href="https://www.postcss.parts/">https://www.postcss.parts/</a></p><p>下面罗列一些postcss的常用插件</p><h2 id="postcss-preset-env"><a href="#postcss-preset-env" class="headerlink" title="postcss-preset-env"></a>postcss-preset-env</h2><p>过去使用postcss的时候，往往会使用大量的插件，它们各自解决一些问题</p><p>这样导致的结果是安装插件、配置插件都特别的繁琐</p><p>于是出现了这么一个插件<code>postcss-preset-env</code>，它称之为<code>postcss预设环境</code>，大意就是它整合了很多的常用插件到一起，并帮你完成了基本的配置，你只需要安装它一个插件，就相当于安装了很多插件了。</p><p>安装好该插件后，在postcss配置中加入下面的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">        <span class="string">&quot;postcss-preset-env&quot;</span>: &#123;&#125; <span class="comment">// &#123;&#125; 中可以填写插件的配置</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该插件的功能很多，下面一一介绍</p><h3 id="自动的厂商前缀"><a href="#自动的厂商前缀" class="headerlink" title="自动的厂商前缀"></a>自动的厂商前缀</h3><p>某些新的css样式需要在旧版本浏览器中使用厂商前缀方可实现</p><p>例如</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该功能在不同的旧版本浏览器中需要书写为</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">::-webkit-input-placeholder &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">::-moz-placeholder &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">:-ms-input-placeholder &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line">::-ms-input-placeholder &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">::placeholder</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>要完成这件事情，需要使用<code>autoprefixer</code>库。</p><p>而<code>postcss-preset-env</code>内部包含了该库，自动有了该功能。</p><p>如果需要调整<strong>兼容的浏览器</strong>范围，可以通过下面的方式进行配置</p><p><strong>方式1：在postcss-preset-env的配置中加入browsers</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">        <span class="string">&quot;postcss-preset-env&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">browsers</span>: [</span><br><span class="line">                <span class="string">&quot;last 2 version&quot;</span>,</span><br><span class="line">                <span class="string">&quot;&gt; 1%&quot;</span></span><br><span class="line">            ]</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>方式2【推荐】：添加 .browserslistrc 文件</strong></p><p>创建文件<code>.browserslistrc</code>，填写配置内容</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">last</span> <span class="number">2</span> <span class="built_in">version</span></span><br><span class="line">&gt; <span class="number">1</span>%</span><br></pre></td></tr></table></figure><p><strong>方式3【推荐】：在package.json的配置中加入browserslist</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;last 2 version&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure><p><code>browserslist</code>是一个多行的（数组形式的）标准字符串。</p><p>它的书写规范多而繁琐，详情见：<a href="https://github.com/browserslist/browserslist">https://github.com/browserslist/browserslist</a></p><p>一般情况下，大部分网站都使用下面的格式进行书写</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">last</span> <span class="number">2</span> <span class="built_in">version</span></span><br><span class="line">&gt; <span class="number">1</span>% <span class="keyword">in</span> CN</span><br><span class="line"><span class="keyword">not</span> ie &lt;= <span class="number">8</span></span><br></pre></td></tr></table></figure><ul><li><code>last 2 version</code>: 浏览器的兼容最近期的两个版本</li><li><code>&gt; 1% in CN</code>: 匹配中国大于1%的人使用的浏览器， <code>in CN</code>可省略</li><li><code>not ie &lt;= 8</code>: 排除掉版本号小于等于8的IE浏览器</li></ul><blockquote><p>默认情况下，匹配的结果求的是并集</p></blockquote><p>你可以通过网站：<a href="https://browserl.ist/">https://browserl.ist/</a> 对配置结果覆盖的浏览器进行查询，查询时，多行之间使用英文逗号分割</p><blockquote><p>browserlist的数据来自于<a href="http://caniuse.com/">CanIUse</a>网站，由于数据并非实时的，所以不会特别准确</p></blockquote><h3 id="未来的CSS语法"><a href="#未来的CSS语法" class="headerlink" title="未来的CSS语法"></a>未来的CSS语法</h3><p>CSS的某些前沿语法正在制定过程中，没有形成真正的标准，如果希望使用这部分语法，为了浏览器兼容性，需要进行编译</p><p>过去，完成该语法编译的是<code>cssnext</code>库，不过有了<code>postcss-preset-env</code>后，它自动包含了该功能。</p><p>你可以通过<code>postcss-preset-env</code>的<code>stage</code>配置，告知<code>postcss-preset-env</code>需要对哪个阶段的css语法进行兼容处理，它的默认值为2</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;postcss-preset-env&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">stage</span>: <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共有5个阶段可配置：</p><ul><li>Stage 0: Aspirational - 只是一个早期草案，极其不稳定</li><li>Stage 1: Experimental - 仍然极其不稳定，但是提议已被W3C公认</li><li>Stage 2: Allowable - 虽然还是不稳定，但已经可以使用了</li><li>Stage 3: Embraced - 比较稳定，可能将来会发生一些小的变化，它即将成为最终的标准</li><li>Stage 4: Standardized - 所有主流浏览器都应该支持的W3C标准</li></ul><p>了解了以上知识后，接下来了解一下未来的css语法，尽管某些语法仍处于非常早期的阶段，但是有该插件存在，编译后仍然可以被浏览器识别</p><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><p>未来的css语法是天然支持变量的</p><p>在<code>:root&#123;&#125;</code>中定义常用变量，使用<code>--</code>前缀命名变量</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span>&#123;</span><br><span class="line">    <span class="attr">--lightColor</span>: <span class="number">#ddd</span>;</span><br><span class="line">    <span class="attr">--darkColor</span>: <span class="number">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">var</span>(--lightColor);</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">var</span>(--darkColor);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>编译后，仍然可以看到原语法，因为某些新语法的存在并不会影响浏览器的渲染，尽管浏览器可能不认识</p><p>如果不希望在结果中看到新语法，可以配置<code>postcss-preset-env</code>的<code>preserve</code>为<code>false</code></p></blockquote><h4 id="自定义选择器"><a href="#自定义选择器" class="headerlink" title="自定义选择器"></a>自定义选择器</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@custom-selector</span> :--heading h1, h2, h3, h4, h5, h6;</span><br><span class="line"><span class="keyword">@custom-selector</span> :--enter :focus,:<span class="attribute">hover</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">a</span>:--enter&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:--heading&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">:--heading.active&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:focus</span>,<span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#f40</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span>,<span class="selector-tag">h2</span>,<span class="selector-tag">h3</span>,<span class="selector-tag">h4</span>,<span class="selector-tag">h5</span>,<span class="selector-tag">h6</span>&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">h1</span><span class="selector-class">.active</span>,<span class="selector-tag">h2</span><span class="selector-class">.active</span>,<span class="selector-tag">h3</span><span class="selector-class">.active</span>,<span class="selector-tag">h4</span><span class="selector-class">.active</span>,<span class="selector-tag">h5</span><span class="selector-class">.active</span>,<span class="selector-tag">h6</span><span class="selector-class">.active</span>&#123;</span><br><span class="line">    <span class="attribute">font-weight</span>:bold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="嵌套"><a href="#嵌套" class="headerlink" title="嵌套"></a>嵌套</h4><p>与LESS相同，只不过嵌套的选择器前必须使用符号<code>&amp;</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red;</span><br><span class="line">    <span class="selector-tag">&amp;</span> <span class="selector-class">.b</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: green;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span> &gt; <span class="selector-class">.b</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: blue;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">        <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.a</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: red</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span> <span class="selector-class">.b</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span>&gt;<span class="selector-class">.b</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: blue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.a</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="postcss-apply"><a href="#postcss-apply" class="headerlink" title="postcss-apply"></a>postcss-apply</h2><p>该插件可以支持在css中书写属性集</p><p>类似于LESS中的混入，可以利用CSS的新语法定义一个CSS代码片段，然后在需要的时候应用它</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-pseudo">:root</span> &#123;</span><br><span class="line">  <span class="attr">--center</span>: &#123;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">    <span class="variable">@apply</span> --center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span>&#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  -webkit-<span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>实际上，该功能也属于cssnext，不知为何<code>postcss-preset-env</code>没有支持</p></blockquote><h2 id="postcss-color-function"><a href="#postcss-color-function" class="headerlink" title="postcss-color-function"></a>postcss-color-function</h2><p>该插件支持在源码中使用一些颜色函数</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 使用颜色#aabbcc，不做任何处理，等同于直接书写 #aabbcc */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">color</span>(<span class="number">#aabbcc</span>);</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc透明度设置为90% */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">color</span>(<span class="number">#aabbcc</span> <span class="built_in">a</span>(<span class="number">90%</span>));</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc的红色部分设置为90% */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">color</span>(<span class="number">#aabbcc</span> <span class="built_in">red</span>(<span class="number">90%</span>));</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc调亮50%（更加趋近于白色），类似于less中的lighten函数 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">color</span>(<span class="number">#aabbcc</span> <span class="built_in">tint</span>(<span class="number">50%</span>));</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc调暗50%（更加趋近于黑色），类似于less中的darken函数 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">color</span>(<span class="number">#aabbcc</span> <span class="built_in">shade</span>(<span class="number">50%</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="comment">/* 使用颜色#aabbcc，不做任何处理，等同于直接书写 #aabbcc */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">170</span>, <span class="number">187</span>, <span class="number">204</span>);</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc透明度设置为90% */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">170</span>, <span class="number">187</span>, <span class="number">204</span>, <span class="number">0.9</span>);</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc的红色部分设置为90% */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">230</span>, <span class="number">187</span>, <span class="number">204</span>);</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc调亮50%（更加趋近于白色），类似于less中的lighten函数 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">213</span>, <span class="number">221</span>, <span class="number">230</span>);</span><br><span class="line">    <span class="comment">/* 将颜色#aabbcc调暗50%（更加趋近于黑色），类似于less中的darken函数 */</span></span><br><span class="line">    <span class="attribute">color</span>: <span class="built_in">rgb</span>(<span class="number">85</span>, <span class="number">94</span>, <span class="number">102</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="扩展-postcss-import"><a href="#扩展-postcss-import" class="headerlink" title="[扩展]postcss-import"></a>[扩展]postcss-import</h2><p>该插件可以让你在<code>postcss</code>文件中导入其他样式代码，通过该插件可以将它们合并</p><blockquote><p>由于后续的课程中，会将postcss加入到webpack中，而webpack本身具有依赖分析的功能，所以该插件的实际意义不大</p></blockquote><h2 id="stylelint"><a href="#stylelint" class="headerlink" title="stylelint"></a>stylelint</h2><blockquote><p>官网：<a href="https://stylelint.io/">https://stylelint.io/</a></p></blockquote><p>在实际的开发中，我们可能会错误的或不规范的书写一些css代码，stylelint插件会即时的发现错误</p><p>由于不同的公司可能使用不同的CSS书写规范，stylelint为了保持灵活，它本身并没有提供具体的规则验证</p><p>你需要安装或自行编写规则验证方案</p><p>通常，我们会安装<code>stylelint-config-standard</code>库来提供标准的CSS规则判定</p><p>安装好后，我们需要告诉stylelint使用该库来进行规则验证</p><p>告知的方式有多种，比较常见的是使用文件<code>.stylelintrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//.styleintrc</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stylelint-config-standard&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>此时，如果你的代码出现不规范的地方，编译时将会报出错误</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">    <span class="attribute">background</span>: #f4;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E4%B8%83)-Postcss/image-20240918012901523.png" alt="image-20240918012901523"></p><p>发生了两处错误：</p><ol><li>缩进应该只有两个空格</li><li>十六进制的颜色值不正确</li></ol><p>如果某些规则并非你所期望的，可以在配置中进行设置</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;stylelint-config-standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rules&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;indentation&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">null</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>设置为<code>null</code>可以禁用该规则，或者设置为4，表示一个缩进有4个空格。具体的设置需要参见stylelint文档：<a href="https://stylelint.io/">https://stylelint.io/</a></p><p>但是这种错误报告需要在编译时才会发生，如果我希望在编写代码时就自动在编辑器里报错呢？</p><p>既然想在编辑器里达到该功能，那么就要在编辑器里做文章</p><p>安装vscode的插件<code>stylelint</code>即可，它会读取你工程中的配置文件，按照配置进行实时报错</p><blockquote><p>实际上，如果你拥有了<code>stylelint</code>插件，可以不需要在postcss中使用该插件了</p></blockquote><h1 id="在webpack中使用PostCss"><a href="#在webpack中使用PostCss" class="headerlink" title="在webpack中使用PostCss"></a>在webpack中使用PostCss</h1><h2 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装postcss，postcss-loader，postcss-preset-env</span><br><span class="line">npm install -D postcss postcss-loader postcss-preset-env</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>添加postcss.config.js，添加.browserslintrc</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// postcss.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">map</span>: <span class="literal">false</span>, <span class="comment">//关闭source-map</span></span><br><span class="line">    <span class="attr">plugins</span>: &#123;</span><br><span class="line">        <span class="string">&quot;postcss-preset-env&quot;</span>: &#123;</span><br><span class="line">            <span class="attr">stage</span>: <span class="number">0</span>, <span class="comment">//哪怕是处于草案阶段的语法，也需要转换</span></span><br><span class="line">            <span class="attr">preserve</span>: <span class="literal">false</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">.browserslintrc</span></span><br><span class="line"></span><br><span class="line">last 3 <span class="keyword">version</span></span><br><span class="line">&gt; 1%</span><br><span class="line">not ie &lt;= 8</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS工程化(六)-预编译器less</title>
      <link href="/posts/4d32a482/"/>
      <url>/posts/4d32a482/</url>
      
        <content type="html"><![CDATA[<h1 id="CSS预编译器"><a href="#CSS预编译器" class="headerlink" title="CSS预编译器"></a>CSS预编译器</h1><h2 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h2><p>编写css时，受限于css语言本身，常常难以处理一些问题：</p><ul><li>重复的样式值：例如常用颜色、常用尺寸</li><li>重复的代码段：例如绝对定位居中、清除浮动</li><li>重复的嵌套书写</li></ul><p>由于官方迟迟不对css语言本身做出改进，一些第三方机构开始想办法来解决这些问题</p><p>其中一种方案，便是预编译器</p><p>预编译器的原理很简单，即使用一种更加优雅的方式来书写样式代码，通过一个编译器，将其转换为可被浏览器识别的传统css代码</p><p><img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E5%85%AD)-%E9%A2%84%E7%BC%96%E8%AF%91%E5%99%A8less/image-20240918011931776.png" alt="image-20240918011931776"></p><p>目前，最流行的预编译器有<strong>LESS</strong>和<strong>SASS</strong>，由于它们两者特别相似，因此仅学习一种即可<img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E5%85%AD)-%E9%A2%84%E7%BC%96%E8%AF%91%E5%99%A8less/image-20240918011936010.png" alt="image-20240918011936010"></p><blockquote><p>less官网：<a href="http://lesscss.org/">http://lesscss.org/</a></p><p>less中文文档1（非官方）：<a href="http://lesscss.cn/">http://lesscss.cn/</a></p><p>less中文文档2（非官方）：<a href="https://less.bootcss.com/">https://less.bootcss.com/</a></p><p>sass官网：<a href="https://sass-lang.com/">https://sass-lang.com/</a></p><p>sass中文文档1（非官方）：<a href="https://www.sass.hk/">https://www.sass.hk/</a></p><p>sass中文文档2（非官方）：<a href="https://sass.bootcss.com/">https://sass.bootcss.com/</a></p></blockquote><h2 id="LESS的安装和使用"><a href="#LESS的安装和使用" class="headerlink" title="LESS的安装和使用"></a>LESS的安装和使用</h2><p>从原理可知，要使用LESS，必须要安装LESS编译器</p><p>LESS编译器是基于node开发的，可以通过npm下载安装</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D less</span><br></pre></td></tr></table></figure><p>安装好了less之后，它提供了一个CLI工具<code>lessc</code>，通过该工具即可完成编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc less代码文件 编译后的文件</span><br></pre></td></tr></table></figure><p>试一试:</p><p>新建一个<code>index.less</code>文件，编写内容如下：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// less代码</span></span><br><span class="line"><span class="variable">@red:</span> <span class="number">#f40</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.redcolor</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@red</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lessc index.less index.css</span><br></pre></td></tr></table></figure><p>可以看到编译之后的代码：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.redcolor</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#f40</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="LESS的基本使用"><a href="#LESS的基本使用" class="headerlink" title="LESS的基本使用"></a>LESS的基本使用</h2><p>具体的使用见文档：<a href="https://less.bootcss.com/">https://less.bootcss.com/</a></p><ul><li>变量</li><li>混合</li><li>嵌套</li><li>运算</li><li>函数</li><li>作用域</li><li>注释</li><li>导入</li></ul><h1 id="在webpack中使用LESS"><a href="#在webpack中使用LESS" class="headerlink" title="在webpack中使用LESS"></a>在webpack中使用LESS</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 安装less和less-loader</span><br><span class="line">npm install less less-loader</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>] &#125;,</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.less$/</span>, <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader?modules&quot;</span>, <span class="string">&quot;less-loader&quot;</span>] &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置好后，即可在项目中书写less文件，如：</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// assets/index.less</span></span><br><span class="line"></span><br><span class="line"><span class="variable">@color:</span> <span class="number">#f40</span>;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="variable">@color</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">2em</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> styles <span class="keyword">from</span> <span class="string">&quot;./assets/index.less&quot;</span></span><br><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;app&quot;</span>);</span><br><span class="line">div.<span class="property">className</span> = styles.<span class="property">main</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS工程化(五)-css module</title>
      <link href="/posts/cad6351b/"/>
      <url>/posts/cad6351b/</url>
      
        <content type="html"><![CDATA[<h1 id="css-module"><a href="#css-module" class="headerlink" title="css module"></a>css module</h1><blockquote><p>通过命名规范来限制类名太过死板，而css in js虽然足够灵活，但是书写不便。</p><p>css module 开辟一种全新的思路来解决类名冲突的问题</p></blockquote><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>css module 遵循以下思路解决类名冲突问题：</p><ol><li>css的类名冲突往往发生在大型项目中</li><li>大型项目往往会使用构建工具（webpack等）搭建工程</li><li>构建工具允许将css样式切分为更加精细的模块</li><li>同JS的变量一样，每个css模块文件中难以出现冲突的类名，冲突的类名往往发生在不同的css模块文件中</li><li>只需要保证构建工具在合并样式代码后不会出现类名冲突即可</li></ol><p><img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E4%BA%94" alt="image-20240918011605147">-css module&#x2F;image-20240918011605147.png)</p><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p>在webpack中，作为处理css的css-loader，它实现了css module的思想，要启用css module，需要将css-loader的配置<code>modules</code>设置为<code>true</code>。</p><p>css-loader的实现方式如下：</p><p><img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E4%BA%94" alt="image-20240918011620210">-css module&#x2F;image-20240918011620210.png)</p><p>原理极其简单，开启了css module后，css-loader会将样式中的类名进行转换，转换为一个唯一的hash值。</p><p>由于hash值是根据模块路径和类名生成的，因此，不同的css模块，哪怕具有相同的类名，转换后的hash值也不一样。</p><p><img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E4%BA%94" alt="image-20240918011624794">-css module&#x2F;image-20240918011624794.png)</p><h2 id="如何应用样式"><a href="#如何应用样式" class="headerlink" title="如何应用样式"></a>如何应用样式</h2><p>css module带来了一个新的问题：源代码的类名和最终生成的类名是不一样的，而开发者只知道自己写的源代码中的类名，并不知道最终的类名是什么，那如何应用类名到元素上呢？</p><p>为了解决这个问题，css-loader会导出原类名和最终类名的对应关系，该关系是通过一个对象描述的</p><p><img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E4%BA%94" alt="image-20240918011630097">-css module&#x2F;image-20240918011630097.png)</p><p>这样一来，我们就可以在js代码中获取到css模块导出的结果，从而应用类名了</p><p>style-loader为了我们更加方便的应用类名，会去除掉其他信息，仅暴露对应关系</p><h2 id="其他操作"><a href="#其他操作" class="headerlink" title="其他操作"></a>其他操作</h2><h3 id="全局类名"><a href="#全局类名" class="headerlink" title="全局类名"></a>全局类名</h3><p>某些类名是全局的、静态的，不需要进行转换，仅需要在类名位置使用一个特殊的语法即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">global</span>(.main)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了global的类名不会进行转换，相反的，没有使用global的类名，表示默认使用了local</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">:<span class="built_in">local</span>(.main)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用了local的类名表示局部类名，是可能会造成冲突的类名，会被css module进行转换</p><h3 id="如何控制最终的类名"><a href="#如何控制最终的类名" class="headerlink" title="如何控制最终的类名"></a>如何控制最终的类名</h3><p>绝大部分情况下，我们都不需要控制最终的类名，因为控制它没有任何意义</p><p>如果一定要控制最终的类名，需要配置css-loader的<code>localIdentName</code></p><h2 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h2><ul><li>css module往往配合构建工具使用</li><li>css module仅处理顶级类名，尽量不要书写嵌套的类名，也没有这个必要</li><li>css module仅处理类名，不处理其他选择器</li><li>css module还会处理id选择器，不过任何时候都没有使用id选择器的理由</li><li>使用了css module后，只要能做到让类名望文知意即可，不需要遵守其他任何的命名规范</li></ul><h3 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// test: /\.css$/, use: [&quot;style-loader&quot;, &#123;</span></span><br><span class="line">                <span class="comment">//     loader: &quot;css-loader&quot;,</span></span><br><span class="line">                <span class="comment">//     options: &#123;</span></span><br><span class="line">                <span class="comment">//         // modules: &#123;</span></span><br><span class="line">                <span class="comment">//         //     localIdentName: &quot;[local]-[hash:5]&quot;</span></span><br><span class="line">                <span class="comment">//         // &#125;</span></span><br><span class="line">                <span class="comment">//         modules:true</span></span><br><span class="line">                <span class="comment">//     &#125;</span></span><br><span class="line">                <span class="comment">// &#125;]</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>:[<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader?modules&quot;</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS工程化(四)-css-in-js</title>
      <link href="/posts/2c556a9a/"/>
      <url>/posts/2c556a9a/</url>
      
        <content type="html"><![CDATA[<h1 id="css-in-js"><a href="#css-in-js" class="headerlink" title="css in js"></a>css in js</h1><p>css in js 的核心思想是：用一个JS对象来描述样式，而不是css样式表</p><p>例如下面的对象就是一个用于描述样式的对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> styles = &#123;</span><br><span class="line">    <span class="attr">backgroundColor</span>: <span class="string">&quot;#f40&quot;</span>,</span><br><span class="line">    <span class="attr">color</span>: <span class="string">&quot;#fff&quot;</span>,</span><br><span class="line">    <span class="attr">width</span>: <span class="string">&quot;400px&quot;</span>,</span><br><span class="line">    <span class="attr">height</span>: <span class="string">&quot;500px&quot;</span>,</span><br><span class="line">    <span class="attr">margin</span>: <span class="string">&quot;0 auto&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于这种描述样式的方式<strong>根本就不存在类名</strong>，自然不会有类名冲突</p><p>至于如何把样式应用到界面上，不是它所关心的事情，你可以用任何技术、任何框架、任何方式将它应用到界面。</p><blockquote><p>后续学习的vue、react都支持css in js，可以非常轻松的应用到界面</p></blockquote><p>css in js的特点：</p><ul><li><strong>绝无冲突的可能</strong>：由于它根本不存在类名，所以绝不可能出现类名冲突</li><li><strong>更加灵活</strong>：可以充分利用JS语言灵活的特点，用各种招式来处理样式</li><li><strong>应用面更广</strong>：只要支持js语言，就可以支持css in js，因此，在一些用JS语言开发移动端应用的时候非常好用，因为移动端应用很有可能并不支持css</li><li><strong>书写不便</strong>：书写样式，特别是公共样式的时候，处理起来不是很方便</li><li><strong>在页面中增加了大量冗余内容</strong>：在页面中处理css in js时，往往是将样式加入到元素的style属性中，会大量增加元素的内联样式，并且可能会有大量重复，不易阅读最终的页面代码</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS工程化(三)-BEM</title>
      <link href="/posts/c6122d30/"/>
      <url>/posts/c6122d30/</url>
      
        <content type="html"><![CDATA[<h1 id="BEM"><a href="#BEM" class="headerlink" title="BEM"></a>BEM</h1><p>BEM是一套针对css类样式的命名方法。</p><blockquote><p>其他命名方法还有：OOCSS、AMCSS、SMACSS等等</p></blockquote><p>BEM全称是：<strong>B</strong>lock <strong>E</strong>lement <strong>M</strong>odifier</p><p>一个完整的BEM类名：block__element_modifier，例如：<code>banner__dot_selected</code>，可以表示：轮播图中，处于选中状态的小圆点</p><p><img src="/./assets/CSS%E5%B7%A5%E7%A8%8B%E5%8C%96(%E4%B8%89)-BEM/image-20240918011450814.png" alt="image-20240918011450814"></p><p>三个部分的具体含义为：</p><ul><li><strong>Block</strong>：页面中的大区域，表示最顶级的划分，例如：轮播图(<code>banner</code>)、布局(<code>layout</code>)、文章(<code>article</code>)等等</li><li><strong>element</strong>：区域中的组成部分，例如：轮播图中的横幅图片(<code>banner__img</code>)、轮播图中的容器（<code>banner__container</code>）、布局中的头部(<code>layout__header</code>)、文章中的标题(<code>article_title</code>)</li><li><strong>modifier</strong>：可选。通常表示状态，例如：处于展开状态的布局左边栏（<code>layout__left_expand</code>）、处于选中状态的轮播图小圆点(<code>banner__dot_selected</code>)</li></ul><p>在某些大型工程中，如果使用BEM命名法，还可能会增加一个前缀，来表示类名的用途，常见的前缀有：</p><ul><li><strong>l</strong>: layout，表示这个样式是用于布局的</li><li><strong>c</strong>: component，表示这个样式是一个组件，即一个功能区域</li><li><strong>u</strong>: util，表示这个样式是一个通用的、工具性质的样式</li><li><strong>j</strong>: javascript，表示这个样式没有实际意义，是专门提供给js获取元素使用的</li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS工程化(二)-利用webpack拆分css</title>
      <link href="/posts/9f5212c6/"/>
      <url>/posts/9f5212c6/</url>
      
        <content type="html"><![CDATA[<h1 id="利用webpack拆分css"><a href="#利用webpack拆分css" class="headerlink" title="利用webpack拆分css"></a>利用webpack拆分css</h1><p>要拆分css，就必须把css当成像js那样的模块；要把css当成模块，就必须有一个构建工具（webpack），它具备合并代码的能力</p><p>而webpack本身只能读取css文件的内容、将其当作JS代码进行分析，因此，会导致错误</p><p>于是，就必须有一个loader，能够将css代码转换为js代码</p><h2 id="css-loader"><a href="#css-loader" class="headerlink" title="css-loader"></a>css-loader</h2><p>css-loader的作用，就是将css代码转换为js代码</p><p>它的处理原理极其简单：将css代码作为字符串导出</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="string">&quot;#f40&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过css-loader转换后变成js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">`.red&#123;</span></span><br><span class="line"><span class="string">    color:&quot;#f40&quot;;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的js代码是经过简化后的，不代表真实的css-loader的转换后代码，css-loader转换后的代码会有些复杂，同时会导出更多的信息，但核心思想不变</p></blockquote><p>再例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="string">&quot;#f40&quot;</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;./bg.png&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过css-loader转换后变成js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> import1 = <span class="built_in">require</span>(<span class="string">&quot;./bg.png&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">`.red&#123;</span></span><br><span class="line"><span class="string">    color:&quot;#f40&quot;;</span></span><br><span class="line"><span class="string">    background:url(&quot;<span class="subst">$&#123;import1&#125;</span>&quot;)</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br></pre></td></tr></table></figure><p>这样一来，经过webpack的后续处理，会把依赖<code>./bg.png</code>添加到模块列表，然后再将代码转换为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> import1 = <span class="title function_">__webpack_require__</span>(<span class="string">&quot;./src/bg.png&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">`.red&#123;</span></span><br><span class="line"><span class="string">    color:&quot;#f40&quot;;</span></span><br><span class="line"><span class="string">    background:url(&quot;<span class="subst">$&#123;import1&#125;</span>&quot;)</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br></pre></td></tr></table></figure><p>再例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@import</span> <span class="string">&quot;./reset.css&quot;</span>;</span><br><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="string">&quot;#f40&quot;</span>;</span><br><span class="line">    <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">&quot;./bg.png&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>会转换为：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> import1 = <span class="built_in">require</span>(<span class="string">&quot;./reset.css&quot;</span>);</span><br><span class="line"><span class="keyword">var</span> import2 = <span class="built_in">require</span>(<span class="string">&quot;./bg.png&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">`<span class="subst">$&#123;import1&#125;</span></span></span><br><span class="line"><span class="string">.red&#123;</span></span><br><span class="line"><span class="string">    color:&quot;#f40&quot;;</span></span><br><span class="line"><span class="string">    background:url(&quot;<span class="subst">$&#123;import2&#125;</span>&quot;)</span></span><br><span class="line"><span class="string">&#125;`</span>;</span><br></pre></td></tr></table></figure><p>总结，css-loader干了什么：</p><ol><li>将css文件的内容作为字符串导出</li><li>将css中的其他依赖作为require导入，以便webpack分析依赖</li></ol><h2 id="style-loader"><a href="#style-loader" class="headerlink" title="style-loader"></a>style-loader</h2><p>由于css-loader仅提供了将css转换为字符串导出的能力，剩余的事情要交给其他loader或plugin来处理</p><p>style-loader可以将css-loader转换后的代码进一步处理，将css-loader导出的字符串加入到页面的style元素中</p><p>例如：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.red</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>:<span class="string">&quot;#f40&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过css-loader转换后变成js代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">`.red&#123;</span></span><br><span class="line"><span class="string">    color:&quot;#f40&quot;;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br></pre></td></tr></table></figure><p>经过style-loader转换后变成：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="string">`.red&#123;</span></span><br><span class="line"><span class="string">    color:&quot;#f40&quot;;</span></span><br><span class="line"><span class="string">&#125;`</span></span><br><span class="line"><span class="keyword">var</span> style = <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"><span class="keyword">var</span> styleElem = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;style&quot;</span>);</span><br><span class="line">styleElem.<span class="property">innerHTML</span> = style;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">head</span>.<span class="title function_">appendChild</span>(styleElem);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;&#125;</span><br></pre></td></tr></table></figure><blockquote><p>以上代码均为简化后的代码，并不代表真实的代码</p><p>style-loader有能力避免同一个样式的重复导入</p></blockquote><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 安装css-loader和style-loader</span><br><span class="line"></span><br><span class="line">npm install -D css-laoder style-loader</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">watch</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="string">&quot;style-loader&quot;</span>, <span class="string">&quot;css-loader&quot;</span>] &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.png$/</span>, <span class="attr">use</span>: <span class="string">&quot;file-loader&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS工程化(一)-工程化概述</title>
      <link href="/posts/f5464c01/"/>
      <url>/posts/f5464c01/</url>
      
        <content type="html"><![CDATA[<h1 id="css工程化概述"><a href="#css工程化概述" class="headerlink" title="css工程化概述"></a>css工程化概述</h1><h2 id="css的问题"><a href="#css的问题" class="headerlink" title="css的问题"></a>css的问题</h2><h3 id="类名冲突的问题"><a href="#类名冲突的问题" class="headerlink" title="类名冲突的问题"></a>类名冲突的问题</h3><p>当你写一个css类的时候，你是写全局的类呢，还是写多个层级选择后的类呢？</p><p>你会发现，怎么都不好</p><ul><li>过深的层级不利于编写、阅读、压缩、复用</li><li>过浅的层级容易导致类名冲突</li></ul><p>一旦样式多起来，这个问题就会变得越发严重，其实归根结底，就是类名冲突不好解决的问题</p><h3 id="重复样式"><a href="#重复样式" class="headerlink" title="重复样式"></a>重复样式</h3><p>这种问题就更普遍了，一些重复的样式值总是不断的出现在css代码中，维护起来极其困难</p><p>比如，一个网站的颜色一般就那么几种：</p><ul><li>primary</li><li>info</li><li>warn</li><li>error</li><li>success</li></ul><p>如果有更多的颜色，都是从这些色调中自然变化得来，可以想象，这些颜色会到处充斥到诸如背景、文字、边框中，一旦要做颜色调整，是一个非常大的工程</p><h3 id="css文件细分问题"><a href="#css文件细分问题" class="headerlink" title="css文件细分问题"></a>css文件细分问题</h3><p>在大型项目中，css也需要更细的拆分，这样有利于css代码的维护。</p><p>比如，有一个做轮播图的模块，它不仅需要依赖js功能，还需要依赖css样式，既然依赖的js功能仅关心轮播图，那css样式也应该仅关心轮播图，由此类推，不同的功能依赖不同的css样式、公共样式可以单独抽离，这样就形成了不同于过去的css文件结构：文件更多、拆分的更细</p><p>而同时，在真实的运行环境下，我们却希望文件越少越好，这种情况和JS遇到的情况是一致的</p><p>因此，对于css，也需要工程化管理</p><p>从另一个角度来说，css的工程化会遇到更多的挑战，因为css不像JS，它的语法本身经过这么多年并没有发生多少的变化（css3也仅仅是多了一些属性而已），对于css语法本身的改变也是一个工程化的课题</p><h2 id="如何解决"><a href="#如何解决" class="headerlink" title="如何解决"></a>如何解决</h2><p>这么多年来，官方一直没有提出方案来解决上述问题</p><p>一些第三方机构针对不同的问题，提出了自己的解决方案</p><h3 id="解决类名冲突"><a href="#解决类名冲突" class="headerlink" title="解决类名冲突"></a>解决类名冲突</h3><p>一些第三方机构提出了一些方案来解决该问题，常见的解决方案如下：</p><p><strong>命名约定</strong></p><p>即提供一种命名的标准，来解决冲突，常见的标准有：</p><ul><li>BEM</li><li>OOCSS</li><li>AMCSS</li><li>SMACSS</li><li>其他</li></ul><p><strong>css in js</strong></p><p>这种方案非常大胆，它觉得，css语言本身几乎无可救药了，干脆直接用js对象来表示样式，然后把样式直接应用到元素的style中</p><p>这样一来，css变成了一个一个的对象，就可以完全利用到js语言的优势，你可以：</p><ul><li>通过一个函数返回一个样式对象</li><li>把公共的样式提取到公共模块中返回</li><li>应用js的各种特性操作对象，比如：混合、提取、拆分</li><li>更多的花样</li></ul><blockquote><p>这种方案在手机端的React Native中大行其道</p></blockquote><p><strong>css module</strong></p><p>非常有趣和好用的css模块化方案，编写简单，绝对不重名</p><p>具体的课程中详细介绍</p><h3 id="解决重复样式的问题"><a href="#解决重复样式的问题" class="headerlink" title="解决重复样式的问题"></a>解决重复样式的问题</h3><p><strong>css in js</strong></p><p>这种方案虽然可以利用js语言解决重复样式值的问题，但由于太过激进，很多习惯写css的开发者编写起来并不是很适应</p><p><strong>预编译器</strong></p><p>有些第三方搞出一套css语言的进化版来解决这个问题，它支持变量、函数等高级语法，然后经过编译器将其编译成为正常的css</p><p>这种方案特别像构建工具，不过它仅针对css</p><p>常见的预编译器支持的语言有：</p><ul><li>less</li><li>sass</li></ul><h3 id="解决css文件细分问题"><a href="#解决css文件细分问题" class="headerlink" title="解决css文件细分问题"></a>解决css文件细分问题</h3><p>这一部分，就要依靠构建工具，例如webpack来解决了</p><p>利用一些loader或plugin来打包、合并、压缩css文件</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js兼容性(四)-在webpack中使用babel</title>
      <link href="/posts/d9a194fb/"/>
      <url>/posts/d9a194fb/</url>
      
        <content type="html"><![CDATA[<h1 id="在webpack中使用babel"><a href="#在webpack中使用babel" class="headerlink" title="在webpack中使用babel"></a>在webpack中使用babel</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @<span class="keyword">babel/core </span>@<span class="keyword">babel/preset-env </span><span class="keyword">babel-loader </span>core-<span class="keyword">js </span>regenerator-runtime</span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">.babelrc</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;presets&quot;</span>: [</span><br><span class="line">        [<span class="string">&quot;@babel/preset-env&quot;</span>, &#123;</span><br><span class="line">            <span class="string">&quot;useBuiltIns&quot;</span>: <span class="string">&quot;usage&quot;</span>,</span><br><span class="line">            <span class="string">&quot;corejs&quot;</span>: 3</span><br><span class="line">        &#125;]</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">//</span> <span class="string">.browserslistrc</span></span><br><span class="line"></span><br><span class="line">last 3 <span class="keyword">version</span></span><br><span class="line">&gt; 1%</span><br><span class="line">not ie &lt;= 8</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123; <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="attr">use</span>: <span class="string">&quot;babel-loader&quot;</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js兼容性(二)-babel预设</title>
      <link href="/posts/32dad9ce/"/>
      <url>/posts/32dad9ce/</url>
      
        <content type="html"><![CDATA[<h1 id="babel预设"><a href="#babel预设" class="headerlink" title="babel预设"></a>babel预设</h1><p>babel有多种预设，最常见的预设是<code>@babel/preset-env</code></p><p><code>@babel/preset-env</code>可以让你使用最新的JS语法，而无需针对每种语法转换设置具体的插件</p><p><strong>配置</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="string">&quot;@babel/preset-env&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><strong>兼容的浏览器</strong></p><p><code>@babel/preset-env</code>需要根据兼容的浏览器范围来确定如何编译，和postcss一样，可以使用文件<code>.browserslistrc</code>来描述浏览器的兼容范围</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">last</span> <span class="number">3</span> <span class="built_in">version</span></span><br><span class="line">&gt; <span class="number">1</span>%</span><br><span class="line"><span class="keyword">not</span> ie &lt;= <span class="number">8</span></span><br></pre></td></tr></table></figure><p><strong>自身的配置</strong></p><p>和<code>postcss-preset-env</code>一样，<code>@babel/preset-env</code>自身也有一些配置</p><blockquote><p>具体的配置见：<a href="https://www.babeljs.cn/docs/babel-preset-env#options">https://www.babeljs.cn/docs/babel-preset-env#options</a></p></blockquote><p>配置方式是：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;配置项1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配置值&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;配置项2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配置值&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;配置项3&quot;</span><span class="punctuation">:</span> <span class="string">&quot;配置值&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>其中一个比较常见的配置项是<code>usebuiltins</code>，该配置的默认值是false</p><p>它有什么用呢？由于该预设仅转换新的语法，并不对新的API进行任何处理</p><p>例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="title function_">resolve</span>()</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>转换的结果为</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span> (<span class="params">resolve</span>) &#123;</span><br><span class="line">  <span class="title function_">resolve</span>();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>如果遇到没有Promise构造函数的旧版本浏览器，该代码就会报错</p><p>而配置<code>usebuiltins</code>可以在编译结果中注入这些新的API，它的值默认为<code>false</code>，表示不注入任何新的API，可以将其设置为<code>usage</code>，表示根据API的使用情况，按需导入API</p><p>此时需要安装core-js，如果需要使用更新的async&#x2F;await，还需要引入regenerator-runtime</p><figure class="highlight coffeescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">npm</span> i -D core-js regenerator-runtime</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">[</span><span class="string">&quot;@babel/preset-env&quot;</span><span class="punctuation">,</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;useBuiltIns&quot;</span><span class="punctuation">:</span> <span class="string">&quot;usage&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;corejs&quot;</span><span class="punctuation">:</span> <span class="number">3</span> <span class="comment">// babel默认支持的时core-js 2</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">]</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js兼容性(三)-babel插件</title>
      <link href="/posts/93fec053/"/>
      <url>/posts/93fec053/</url>
      
        <content type="html"><![CDATA[<h1 id="babel-插件"><a href="#babel-插件" class="headerlink" title="babel 插件"></a>babel 插件</h1><p>除了预设可以转换代码之外，插件也可以转换代码，它们的顺序是：</p><ul><li>插件在 Presets 前运行。</li><li>插件顺序从前往后排列。</li><li>Preset 顺序是颠倒的（从后往前）。</li></ul><p>通常情况下，<code>@babel/preset-env</code>只转换那些已经形成正式标准的语法，对于某些处于早期阶段、还没有确定的语法不做转换。</p><p>如果要转换这些语法，就要单独使用插件</p><p>下面随便列举一些插件</p><h2 id="babel-plugin-proposal-class-properties"><a href="#babel-plugin-proposal-class-properties" class="headerlink" title="@babel/plugin-proposal-class-properties"></a><code>@babel/plugin-proposal-class-properties</code></h2><p>该插件可以让你在类中书写初始化字段</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">  a = <span class="number">1</span>;</span><br><span class="line">  <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">b</span> = <span class="number">3</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="babel-plugin-proposal-function-bind"><a href="#babel-plugin-proposal-function-bind" class="headerlink" title="@babel/plugin-proposal-function-bind"></a><code>@babel/plugin-proposal-function-bind</code></h2><p>该插件可以让你轻松的为某个方法绑定 this</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Print</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">loginId</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">loginId</span>: <span class="string">&quot;abc&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="attr">obj</span>::<span class="title class_">Print</span>(); <span class="comment">//相当于：Print.call(obj);</span></span><br></pre></td></tr></table></figure><blockquote><p>遗憾的是，目前 vscode 无法识别该语法，会在代码中报错，虽然并不会有什么实际性的危害，但是影响观感</p></blockquote><h2 id="babel-plugin-proposal-optional-chaining"><a href="#babel-plugin-proposal-optional-chaining" class="headerlink" title="@babel/plugin-proposal-optional-chaining"></a><code>@babel/plugin-proposal-optional-chaining</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: &#123;</span><br><span class="line">    <span class="attr">bar</span>: &#123;</span><br><span class="line">      <span class="attr">baz</span>: <span class="number">42</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> baz = obj?.<span class="property">foo</span>?.<span class="property">bar</span>?.<span class="property">baz</span>; <span class="comment">// 42</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> safe = obj?.<span class="property">qux</span>?.<span class="property">baz</span>; <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-remove-console"><a href="#babel-plugin-transform-remove-console" class="headerlink" title="babel-plugin-transform-remove-console"></a><code>babel-plugin-transform-remove-console</code></h2><p>该插件会移除源码中的控制台输出语句</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">error</span>(<span class="string">&quot;bar&quot;</span>);</span><br></pre></td></tr></table></figure><p>编译后</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure><h2 id="babel-plugin-transform-runtime"><a href="#babel-plugin-transform-runtime" class="headerlink" title="@babel/plugin-transform-runtime"></a><code>@babel/plugin-transform-runtime</code></h2><p>用于提供一些公共的 API，这些 API 会帮助代码转换</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js兼容性(一)-babel的安装和使用</title>
      <link href="/posts/294efb28/"/>
      <url>/posts/294efb28/</url>
      
        <content type="html"><![CDATA[<h1 id="babel的安装和使用-ignore"><a href="#babel的安装和使用-ignore" class="headerlink" title="babel的安装和使用 {ignore}"></a>babel的安装和使用 {ignore}</h1><blockquote><p>官网：<a href="https://babeljs.io/">https://babeljs.io/</a><br>民间中文网：<a href="https://www.babeljs.cn/">https://www.babeljs.cn/</a></p></blockquote><h2 id="babel简介"><a href="#babel简介" class="headerlink" title="babel简介"></a>babel简介</h2><p>babel一词来自于希伯来语，直译为巴别塔</p><p><img src="/./assets/Js%E5%85%BC%E5%AE%B9%E6%80%A7(%E4%B8%80)-babel%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240918013808830.png" alt="image-20240918013808830"></p><p>巴别塔象征的统一的国度、统一的语言</p><p>而今天的JS世界缺少一座巴别塔，不同版本的浏览器能识别的ES标准并不相同，就导致了开发者面对不同版本的浏览器要使用不同的语言，和古巴比伦一样，前端开发也面临着这样的困境。</p><p>babel的出现，就是用于解决这样的问题，它是一个编译器，可以把不同标准书写的语言，编译为统一的、能被各种浏览器识别的语言</p><p><img src="/./assets/Js%E5%85%BC%E5%AE%B9%E6%80%A7(%E4%B8%80)-babel%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240918013816100.png" alt="image-20240918013816100"></p><p>由于语言的转换工作灵活多样，babel的做法和postcss、webpack差不多，它本身仅提供一些分析功能，真正的转换需要依托于插件完成</p><p><img src="/./assets/Js%E5%85%BC%E5%AE%B9%E6%80%A7(%E4%B8%80)-babel%E7%9A%84%E5%AE%89%E8%A3%85%E5%92%8C%E4%BD%BF%E7%94%A8/image-20240918013821019.png" alt="image-20240918013821019"></p><h2 id="babel的安装"><a href="#babel的安装" class="headerlink" title="babel的安装"></a>babel的安装</h2><p>babel可以和构建工具联合使用，也可以独立使用</p><p>如果要独立的使用babel，需要安装下面两个库：</p><ul><li>@babel&#x2F;core：babel核心库，提供了编译所需的所有api</li><li>@babel&#x2F;cli：提供一个命令行工具，调用核心库的api完成编译</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D @babel/core @babel/cli</span><br></pre></td></tr></table></figure><h2 id="babel的使用"><a href="#babel的使用" class="headerlink" title="babel的使用"></a>babel的使用</h2><p>@babel&#x2F;cli的使用极其简单</p><p>它提供了一个命令<code>babel</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按文件编译</span></span><br><span class="line">babel 要编译的文件 -o 编辑结果文件</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">按目录编译</span></span><br><span class="line">babel 要编译的整个目录 -d 编译结果放置的目录</span><br></pre></td></tr></table></figure><h2 id="babel的配置"><a href="#babel的配置" class="headerlink" title="babel的配置"></a>babel的配置</h2><p>可以看到，babel本身没有做任何事情，真正的编译要依托于<strong>babel插件</strong>和<strong>babel预设</strong>来完成</p><blockquote><p>babel预设和postcss预设含义一样，是多个插件的集合体，用于解决一系列常见的兼容问题</p></blockquote><p>如何告诉babel要使用哪些插件或预设呢？需要通过一个配置文件<code>.babelrc</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;presets&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(十二).md</title>
      <link href="/posts/37fb3828/"/>
      <url>/posts/37fb3828/</url>
      
        <content type="html"><![CDATA[<h1 id="gzip"><a href="#gzip" class="headerlink" title="gzip"></a>gzip</h1><p>gzip是一种压缩文件的算法</p><p>主要依赖<strong>CmpressionWebpackPlugin</strong>插件实现，同时需要后端服务进行支持，对于nginx来说，需要配置gzip为on</p><h1 id="B-S结构中的压缩传输"><a href="#B-S结构中的压缩传输" class="headerlink" title="B&#x2F;S结构中的压缩传输"></a>B&#x2F;S结构中的压缩传输</h1><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E5%8D%81%E4%BA%8C)/image-20240918005702991.png" alt="image-20240918005702991"></p><p>优点：传输效率可能得到大幅提升</p><p>缺点：服务器的压缩需要时间，客户端的解压需要时间</p><h1 id="使用webpack进行预压缩"><a href="#使用webpack进行预压缩" class="headerlink" title="使用webpack进行预压缩"></a>使用webpack进行预压缩</h1><p>使用<code>compression-webpack-plugin</code>插件对打包结果进行预压缩，可以移除服务器的压缩时间</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E5%8D%81%E4%BA%8C)/image-20240918005708588.png" alt="image-20240918005708588"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CmpressionWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;compression-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CmpressionWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="comment">// 对js文件进行gzip压缩</span></span><br><span class="line">      <span class="attr">test</span>: <span class="regexp">/\.js/</span>,</span><br><span class="line">      <span class="comment">// 对能达到该压缩比率的文件进行压缩</span></span><br><span class="line">      <span class="attr">minRatio</span>: <span class="number">0.5</span></span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-date-picker自动格式化输入时间</title>
      <link href="/posts/c15868c5/"/>
      <url>/posts/c15868c5/</url>
      
        <content type="html"><![CDATA[<p>在el-date-picker中，如果用户自行输入时间，总是要按照标准的时间格式(yyyy-MM-dd HH:mm:ss)进行输入，对于用户很不友好，我们可以通过代码允许用户随意输入，由代码来自动进行格式化</p><h3 id="解决办法："><a href="#解决办法：" class="headerlink" title="解决办法："></a>解决办法：</h3><p>通过自定义指令实现</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-date-picker</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-date-format</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;searchDate&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">type</span>=<span class="string">&quot;datetimerange&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">value-format</span>=<span class="string">&quot;yyyy-MM-dd HH:mm:ss&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">range-separator</span>=<span class="string">&quot;至&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">start-placeholder</span>=<span class="string">&quot;开始日期&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">end-placeholder</span>=<span class="string">&quot;结束日期&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-date-picker</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 以下代码，仅对一种格式进行了处理，即用户输入全数字(yyyyMMddHHmmss)</span></span><br><span class="line"><span class="comment">// 如果需要允许更多格式，可自行对代码进行修改</span></span><br><span class="line"><span class="comment">// 最后的事件是为了，用户完成输入后，绑定格式化后的时间，并关闭输入窗口</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> moment <span class="keyword">from</span> <span class="string">&#x27;moment&#x27;</span></span><br><span class="line"><span class="comment">// 时间选择器 - 输入格式转换</span></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">directive</span>(<span class="string">&#x27;dateFormat&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">inserted</span>: <span class="keyword">function</span>(<span class="params">el, binding, vnode</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">context</span>: _this, data &#125; = vnode</span><br><span class="line">    <span class="keyword">const</span> &#123; <span class="attr">expression</span>: key &#125; = data.<span class="property">model</span></span><br><span class="line">    <span class="keyword">const</span> modelValue = <span class="keyword">function</span>(<span class="params">value, index</span>) &#123;</span><br><span class="line">      <span class="comment">// 把所有数字提取出来</span></span><br><span class="line">      value = value.<span class="title function_">replace</span>(<span class="regexp">/\D/g</span>, <span class="string">&#x27;&#x27;</span>)</span><br><span class="line">      <span class="comment">// 按照指定格式解析日期</span></span><br><span class="line">      <span class="keyword">const</span> time = value &amp;&amp; value.<span class="property">constructor</span> === <span class="title class_">String</span> ? <span class="title function_">moment</span>(value, <span class="string">&#x27;YYYYMMDDHHmmss&#x27;</span>).<span class="title function_">format</span>(<span class="string">&#x27;YYYY-MM-DD HH:mm:ss&#x27;</span>) : value  <span class="comment">// 转换时间格式</span></span><br><span class="line">      <span class="comment">// 如果存在index，说明是范围选择的，绑定值为数组</span></span><br><span class="line">      <span class="keyword">if</span> (index === <span class="number">0</span> || index === <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> keys = key.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>)</span><br><span class="line">        <span class="keyword">const</span> [key1, key2] = keys</span><br><span class="line">        <span class="keyword">if</span> (key2) &#123;</span><br><span class="line">          <span class="keyword">if</span> (!_this[key1][key2]) &#123;</span><br><span class="line">            _this.$set(_this[key1], key2, [])</span><br><span class="line">          &#125;</span><br><span class="line">          _this.$set(_this[key1][key2], index, time)</span><br><span class="line">          <span class="keyword">if</span> (index === <span class="number">0</span> &amp;&amp; !_this[key1][key2][<span class="number">1</span>]) &#123;</span><br><span class="line">            _this.$set(_this[key1][key2], <span class="number">1</span>, time)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (index === <span class="number">1</span> &amp;&amp; !_this[key1][key2][<span class="number">0</span>]) &#123;</span><br><span class="line">            _this.$set(_this[key1][key2], <span class="number">0</span>, time)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="keyword">if</span> (!_this[key1]) &#123;</span><br><span class="line">            _this.$set(_this, key1, [])</span><br><span class="line">          &#125;</span><br><span class="line">          _this.$set(_this[key1], index, time)</span><br><span class="line">          <span class="keyword">if</span> (index === <span class="number">0</span> &amp;&amp; !_this[key1][<span class="number">1</span>]) &#123;</span><br><span class="line">            _this.$set(_this[key1], <span class="number">1</span>, time)</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (index === <span class="number">1</span> &amp;&amp; !_this[key1][<span class="number">0</span>]) &#123;</span><br><span class="line">            _this.$set(_this[key1], <span class="number">0</span>, time)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        _this.$set(_this, key, time)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_this &amp;&amp; _this.<span class="property">_isVue</span>) &#123;</span><br><span class="line">      <span class="keyword">const</span> input1 = el.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">      <span class="keyword">const</span> input2 = el.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>)[<span class="number">1</span>]</span><br><span class="line">      <span class="comment">// 判断是范围的还是单个独立的日期时间控件，范围的两个输入框都要绑定change事件</span></span><br><span class="line">      <span class="keyword">if</span> (el.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;input&#x27;</span>).<span class="property">length</span> &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        input1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">modelValue</span>(input1.<span class="property">value</span>, <span class="number">0</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        input1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (event.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span><br><span class="line">            el.<span class="property">__vue__</span>.<span class="title function_">handleClose</span>()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        input2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="title function_">modelValue</span>(input2.<span class="property">value</span>, <span class="number">1</span>)</span><br><span class="line">        &#125;)</span><br><span class="line">        input2.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keyup&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (event.<span class="property">key</span> === <span class="string">&#x27;Enter&#x27;</span>) &#123;</span><br><span class="line">            el.<span class="property">__vue__</span>.<span class="title function_">handleClose</span>()</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        input1.<span class="title function_">addEventListener</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">let</span> value = input1.<span class="property">value</span></span><br><span class="line">          <span class="title function_">modelValue</span>(value)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(十一)</title>
      <link href="/posts/2c680859/"/>
      <url>/posts/2c680859/</url>
      
        <content type="html"><![CDATA[<h1 id="bundle-analyzer"><a href="#bundle-analyzer" class="headerlink" title="bundle analyzer"></a>bundle analyzer</h1><p>WebpackBundleAnalyzer，使用该插件，对项目进行编译打包后，会自动启动一个http服务，打开该服务监听的端口，能够查看打包出的文件大小和占比情况，如下图：</p><p>我们可以通过分析最终的打包结果，对文件进行针对性处理。</p><p>比如将独立模块进行分包，或者压缩，或者替换更加轻量化的框架模块。</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E5%8D%81%E4%B8%80)/image-20240918005410486.png" alt="image-20240918005410486"></p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E5%8D%81%E4%B8%80)/image-20240918005439513.png" alt="image-20240918005439513"></p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(十)</title>
      <link href="/posts/50c0734e/"/>
      <url>/posts/50c0734e/</url>
      
        <content type="html"><![CDATA[<h1 id="ESLint-ignore"><a href="#ESLint-ignore" class="headerlink" title="ESLint {ignore}"></a>ESLint {ignore}</h1><p>ESLint是一个针对JS的代码风格<strong>检查</strong>工具，当不满足其要求的风格时，会给予警告或错误</p><p>官网：<a href="https://eslint.org/">https://eslint.org/</a></p><p>民间中文网：<a href="https://eslint.bootcss.com/">https://eslint.bootcss.com/</a></p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><p>ESLint通常配合编辑器使用</p><ol><li>在vscode中安装<code>ESLint</code></li></ol><p>该工具会自动检查工程中的JS文件</p><p>检查的工作交给<code>eslint</code>库，如果当前工程没有，则会去全局库中查找，如果都没有，则无法完成检查</p><p>另外，检查的依据是<code>eslint</code>的配置文件<code>.eslintrc</code>，如果找不到工程中的配置文件，也无法完成检查</p><ol start="2"><li>安装<code>eslint</code></li></ol><p><code>npm i [-g] eslint</code></p><ol start="3"><li>创建配置文件</li></ol><p>可以通过<code>eslint</code>交互式命令创建配置文件</p><blockquote><p>由于windows环境中git窗口对交互式命名支持不是很好，建议使用powershell</p></blockquote><p><code>npx eslint --init</code></p><blockquote><p>eslint会识别工程中的<code>.eslintrc.*</code>文件，也能够识别<code>package.json</code>中的<code>eslintConfig</code>字段</p></blockquote><h1 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h1><h2 id="env"><a href="#env" class="headerlink" title="env"></a>env</h2><p>配置代码的运行环境</p><ul><li>browser：代码是否在浏览器环境中运行</li><li>es6：是否启用ES6的全局API，例如<code>Promise</code>等</li></ul><h2 id="parser"><a href="#parser" class="headerlink" title="parser"></a>parser</h2><p><code>eslint</code>的工作原理是先将代码进行解析，然后按照规则进行分析</p><p><code>eslint</code> 默认使用<code>Espree</code>作为其解析器，你可以在配置文件中指定一个不同的解析器。</p><h2 id="parserOptions"><a href="#parserOptions" class="headerlink" title="parserOptions"></a>parserOptions</h2><p>该配置指定<code>eslint</code>对哪些语法的支持</p><ul><li>ecmaVersion: 支持的ES语法版本</li><li>sourceType<ul><li>script：传统脚本</li><li>module：模块化脚本</li></ul></li></ul><h2 id="globals"><a href="#globals" class="headerlink" title="globals"></a>globals</h2><p>配置可以使用的额外的全局变量</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;globals&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;var1&quot;</span><span class="punctuation">:</span> <span class="string">&quot;readonly&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;var2&quot;</span><span class="punctuation">:</span> <span class="string">&quot;writable&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><code>eslint</code>支持注释形式的配置，在代码中使用下面的注释也可以完成配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* global var1, var2 */</span></span><br><span class="line"><span class="comment">/* global var3:writable, var4:writable */</span></span><br></pre></td></tr></table></figure><h2 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h2><p>该配置继承自哪里</p><p>它的值可以是字符串或者数组</p><p>比如：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;extends&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint:recommended&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>表示，该配置缺失的位置，使用<code>eslint</code>推荐的规则</p><h2 id="plugins"><a href="#plugins" class="headerlink" title="plugins"></a>plugins</h2><p>plugin插件主要时为eslint新增一些检查规则</p><h2 id="ignoreFiles"><a href="#ignoreFiles" class="headerlink" title="ignoreFiles"></a>ignoreFiles</h2><p>排除掉某些不需要验证的文件</p><p><code>.eslintignore</code></p><figure class="highlight processing"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dist</span><span class="comment">/**/</span>*.<span class="property">js</span></span><br><span class="line">node_modules</span><br></pre></td></tr></table></figure><h2 id="rules"><a href="#rules" class="headerlink" title="rules"></a>rules</h2><p><code>eslint</code>规则集</p><p>每条规则影响某个方面的代码风格</p><p>每条规则都有下面几个取值：</p><ul><li>off 或 0 或 false: 关闭该规则的检查</li><li>warn 或 1 或 true：警告，不会导致程序退出</li><li>error 或 2：错误，当被触发的时候，程序会退出</li></ul><p>除了在配置文件中使用规则外，还可以在注释中使用：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint eqeqeq: &quot;off&quot;, curly: &quot;error&quot; */</span></span><br></pre></td></tr></table></figure><blockquote><p><a href="https://eslint.bootcss.com/docs/rules/">https://eslint.bootcss.com/docs/rules/</a></p></blockquote><h1 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h1><p>下面以一个vue项目的eslint配置为例。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">// 安装eslint</span><br><span class="line">npm install eslint --save-dev</span><br><span class="line"></span><br><span class="line">// 安装解析vue文件需要用到的解析器和插件</span><br><span class="line">npm install vue-eslint-parser eslint-plugin-vue --save-dev</span><br><span class="line"></span><br><span class="line">// 执行修正命令，eslint中，带有扳手图标的配置项就是可以由eslint自动进行纠正的配置项</span><br><span class="line">npx eslint --fix</span><br></pre></td></tr></table></figure><p>在根目录下添加一个.eslintrc.js文件，配置如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="comment">// 指定解析器为 ESLint 解析 ES6+ 代码</span></span><br><span class="line">  <span class="attr">parser</span>: <span class="string">&quot;vue-eslint-parser&quot;</span>,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 设置解析器选项，控制要使用的 ECMAScript 特性</span></span><br><span class="line">  <span class="attr">parserOptions</span>: &#123;</span><br><span class="line">    <span class="attr">ecmaVersion</span>: <span class="number">2020</span>, <span class="comment">// 支持 ES2020 的语法</span></span><br><span class="line">    <span class="attr">sourceType</span>: <span class="string">&quot;module&quot;</span>, <span class="comment">// 使用 ES 模块化</span></span><br><span class="line">    <span class="attr">ecmaFeatures</span>: &#123;</span><br><span class="line">      <span class="attr">jsx</span>: <span class="literal">true</span> <span class="comment">// 如果需要支持 JSX（一般是 Vue3 中用 Composition API 的场景）</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 扩展现有的规则集或插件</span></span><br><span class="line">  <span class="attr">extends</span>: [</span><br><span class="line">    <span class="string">&quot;eslint:recommended&quot;</span>, <span class="comment">// 基于 ESLint 推荐的规则</span></span><br><span class="line">    <span class="string">&quot;plugin:vue/vue3-recommended&quot;</span> <span class="comment">// Vue 3 推荐的 ESLint 规则集</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 指定代码运行的环境（例如浏览器、Node.js）</span></span><br><span class="line">  <span class="attr">env</span>: &#123;</span><br><span class="line">    <span class="attr">browser</span>: <span class="literal">true</span>, <span class="comment">// 浏览器环境</span></span><br><span class="line">    <span class="attr">node</span>: <span class="literal">true</span>, <span class="comment">// Node.js 环境</span></span><br><span class="line">    <span class="attr">es2020</span>: <span class="literal">true</span> <span class="comment">// 启用 ES2020 全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 添加自定义规则或覆盖扩展的规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&quot;no-unused-vars&quot;</span>: <span class="string">&quot;warn&quot;</span>, <span class="comment">// 未使用变量仅发出警告，而不是报错</span></span><br><span class="line">    <span class="string">&quot;vue/no-mutating-props&quot;</span>: <span class="string">&quot;error&quot;</span>, <span class="comment">// 禁止在 Vue 中直接修改 prop</span></span><br><span class="line">    <span class="string">&quot;semi&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;always&quot;</span>], <span class="comment">// 强制使用分号</span></span><br><span class="line">    <span class="string">&quot;quotes&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="string">&quot;single&quot;</span>], <span class="comment">// 强制使用单引号</span></span><br><span class="line">    <span class="string">&quot;indent&quot;</span>: [<span class="string">&quot;error&quot;</span>, <span class="number">2</span>], <span class="comment">// 强制使用 2 空格缩进</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 引入额外的 ESLint 插件</span></span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="string">&quot;vue&quot;</span> <span class="comment">// 允许 ESLint 校验 .vue 文件</span></span><br><span class="line">  ],</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 可以忽略某些文件或目录，使其不被 ESLint 校验</span></span><br><span class="line">  <span class="attr">ignorePatterns</span>: [<span class="string">&quot;dist/&quot;</span>, <span class="string">&quot;node_modules/&quot;</span>], <span class="comment">// 忽略打包输出和依赖目录</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>el-select下拉选项设置为表格</title>
      <link href="/posts/d5d15103/"/>
      <url>/posts/d5d15103/</url>
      
        <content type="html"><![CDATA[<p>在工作中，遇到下拉需要打开一个表格，通过双击表格行内容，来进行选择。使用表格的原因是为了在下拉选项中展示更多内容。</p><h3 id="两种方案："><a href="#两种方案：" class="headerlink" title="两种方案："></a>两种方案：</h3><h4 id="方案一："><a href="#方案一：" class="headerlink" title="方案一："></a>方案一：</h4><p>通过el-select原生的slot来处理，el-select原生有具名插槽empty，用于无选项时展示</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 代码仅作简单展示，具体属性请自行绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-select</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span> <span class="attr">slot</span>=<span class="string">&quot;empty&quot;</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">row-dblclick</span>=<span class="string">&quot;(row) =&gt; changeUser(scope.$index, row)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-select</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方案二："><a href="#方案二：" class="headerlink" title="方案二："></a>方案二：</h4><p>通过el-popover模拟实现下拉时展示表格</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-popover</span></span></span><br><span class="line"><span class="tag">  <span class="attr">placement</span>=<span class="string">&quot;bottom&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">trigger</span>=<span class="string">&quot;manual&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-model</span>=<span class="string">&quot;popoverVisible&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">template</span> <span class="attr">slot</span>=<span class="string">&quot;reference&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;popoverVisible = !popoverVisible&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display:inline-block; width: 68px&quot;</span>&gt;</span>请选择<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-arrow-down&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">    @<span class="attr">row-dblclick</span>=<span class="string">&quot;(row) =&gt; changeUser(scope.$index, row)&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span> &gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;年龄&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;age&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-table-column</span> <span class="attr">label</span>=<span class="string">&quot;性别&quot;</span> <span class="attr">prop</span>=<span class="string">&quot;sex&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span> <span class="attr">style</span>=<span class="string">&quot;display: inline-block;margin-top: 16px;&quot;</span>&gt;</span>注：双击一行以选择数据<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">size</span>=<span class="string">&quot;small&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top: 16px; float: right&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;popoverVisible = false&quot;</span>&gt;</span>取消<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-popover</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(九).md</title>
      <link href="/posts/2ee07ec0/"/>
      <url>/posts/2ee07ec0/</url>
      
        <content type="html"><![CDATA[<h1 id="懒加载"><a href="#懒加载" class="headerlink" title="懒加载"></a>懒加载</h1><p>懒加载就是延迟加载内容，也叫动态加载，如下方式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// util.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123; chunk &#125; <span class="keyword">from</span> <span class="string">&quot;lodash-es&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&quot;button&quot;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">async</span> <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 动态加载</span></span><br><span class="line">  <span class="comment">// import 是ES6的草案</span></span><br><span class="line">  <span class="comment">// 浏览器会使用JSOP的方式远程去读取一个js模块</span></span><br><span class="line">  <span class="comment">// import()会返回一个promise   （* as obj）</span></span><br><span class="line">  <span class="comment">// const &#123; chunk &#125; = await import(/* webpackChunkName:&quot;lodash&quot; */&quot;lodash-es&quot;);</span></span><br><span class="line">  <span class="keyword">const</span> &#123; chunk &#125; = <span class="keyword">await</span> <span class="keyword">import</span>(<span class="string">&quot;./util&quot;</span>);</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title function_">chunk</span>([<span class="number">3</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">87</span>], <span class="number">2</span>);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(八).md</title>
      <link href="/posts/d54eff84/"/>
      <url>/posts/d54eff84/</url>
      
        <content type="html"><![CDATA[<h1 id="tree-shaking"><a href="#tree-shaking" class="headerlink" title="tree shaking"></a>tree shaking</h1><blockquote><p>压缩可以移除模块内部的无效代码</p><p>tree shaking 可以移除模块之间的无效代码</p></blockquote><p>tree shaking，中文翻译为摇树，当我们摇动一棵树时，树上一些成熟的果子或者树叶就会自动掉下来，这个过程就可以理解为移除无效代码的过程。</p><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>某些模块导出的代码并不一定会被用到</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// myMath.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;add&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> a+b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">sub</span>(<span class="params">a, b</span>)&#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sub&quot;</span>)</span><br><span class="line">  <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;add&#125; <span class="keyword">from</span> <span class="string">&quot;./myMath&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">add</span>(<span class="number">1</span>,<span class="number">2</span>));</span><br></pre></td></tr></table></figure><p>tree shaking 用于移除掉不会用到的导出，这里只导出了add函数，在打包时，tree shaking会自动将sub函数移除</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight autohotkey"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">webpack2`开始就支持了`tree shaking</span><br></pre></td></tr></table></figure><p>只要是生产环境，<code>tree shaking</code>自动开启</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>webpack会从入口模块出发寻找依赖关系</p><p>当解析一个模块时，webpack会根据ES6的模块导入语句来判断，该模块依赖了另一个模块的哪个导出</p><p>webpack之所以选择ES6的模块导入语句，是因为ES6模块有以下特点：</p><ol><li>导入导出语句只能是顶层语句</li><li>import的模块名只能是字符串常量</li><li>import绑定的变量是不可变的</li></ol><p>这些特征都非常有利于分析出稳定的依赖</p><p>在具体分析依赖时，webpack坚持的原则是：<strong>保证代码正常运行，然后再尽量tree shaking</strong></p><p>所以，如果你依赖的是一个导出的对象，由于JS语言的动态特性，以及<code>webpack</code>还不够智能，为了保证代码正常运行，它不会移除对象中的任何信息</p><p>因此，我们在编写代码的时候，<strong>尽量</strong>：</p><ul><li>使用<code>export xxx</code>导出，而不使用<code>export default &#123;xxx&#125;</code>导出</li><li>使用<code>import &#123;xxx&#125; from &quot;xxx&quot;</code>导入，而不使用<code>import xxx from &quot;xxx&quot;</code>导入</li></ul><p>依赖分析完毕后，<code>webpack</code>会根据每个模块每个导出是否被使用，标记其他导出为<code>dead code</code>，然后交给代码压缩工具处理</p><p>代码压缩工具最终移除掉那些<code>dead code</code>代码</p><h1 id="使用第三方库"><a href="#使用第三方库" class="headerlink" title="使用第三方库"></a>使用第三方库</h1><p>某些第三方库可能使用的是<code>commonjs</code>的方式导出，比如<code>lodash</code></p><p>又或者没有提供普通的ES6方式导出</p><p>对于这些库，<code>tree shaking</code>是无法发挥作用的</p><p>因此要寻找这些库的<code>es6</code>版本，好在很多流行但没有使用的<code>ES6</code>的第三方库，都发布了它的<code>ES6</code>版本，比如<code>lodash-es</code></p><h1 id="作用域分析"><a href="#作用域分析" class="headerlink" title="作用域分析"></a>作用域分析</h1><p><code>tree shaking</code>本身并没有完善的作用域分析，可能导致在一些<code>dead code</code>（不会被执行的代码，比如return返回后，后面书写的代码就是dead code）函数中的依赖仍然会被视为依赖</p><p>插件<code>webpack-deep-scope-plugin</code>提供了作用域分析，可解决这些问题</p><h1 id="副作用问题"><a href="#副作用问题" class="headerlink" title="副作用问题"></a>副作用问题</h1><p>webpack在<code>tree shaking</code>的使用，有一个原则：<strong>一定要保证代码正确运行</strong></p><p>在满足该原则的基础上，再来决定如何<code>tree shaking</code></p><p>因此，当<code>webpack</code>无法确定某个模块是否有副作用时，它往往将其视为有副作用</p><p>因此，某些情况可能并不是我们所想要的</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//common.js</span></span><br><span class="line"><span class="keyword">var</span> n  = <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.js</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;./common.js&quot;</span></span><br></pre></td></tr></table></figure><p>虽然我们根本没用有<code>common.js</code>的导出，但<code>webpack</code>担心<code>common.js</code>有副作用，如果去掉会影响某些功能</p><p>如果要解决该问题，就需要标记该文件是没有副作用的</p><p>在<code>package.json</code>中加入<code>sideEffects</code></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;sideEffects&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>有两种配置方式：</p><ul><li>false：当前工程中，所有模块都没有副作用。注意，这种写法会影响到某些css文件的导入</li><li>数组：设置哪些文件拥有副作用，例如：<code>[&quot;!src/common.js&quot;]</code>，表示只要不是<code>src/common.js</code>的文件，都有副作用</li></ul><blockquote><p>这种方式我们一般不处理，通常是一些第三方库在它们自己的<code>package.json</code>中标注</p></blockquote><h1 id="css-tree-shaking"><a href="#css-tree-shaking" class="headerlink" title="css tree shaking"></a>css tree shaking</h1><p><code>webpack</code>无法对<code>css</code>完成<code>tree shaking</code>，因为<code>css</code>跟<code>es6</code>没有半毛钱关系</p><p>因此对<code>css</code>的<code>tree shaking</code>需要其他插件完成</p><p>例如：<code>purgecss-webpack-plugin</code></p><blockquote><p>注意：<code>purgecss-webpack-plugin</code>对<code>css module</code>无能为力</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(七)</title>
      <link href="/posts/f8ea51d2/"/>
      <url>/posts/f8ea51d2/</url>
      
        <content type="html"><![CDATA[<h1 id="代码压缩"><a href="#代码压缩" class="headerlink" title="代码压缩"></a>代码压缩</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ol><li><strong>为什么要进行代码压缩</strong></li></ol><p>减少代码体积；破坏代码的可读性，提升破解成本；</p><ol start="2"><li><strong>什么时候要进行代码压缩</strong></li></ol><p>生产环境</p><ol start="3"><li><strong>使用什么压缩工具</strong></li></ol><p>目前最流行的代码压缩工具主要有两个：<code>UglifyJs</code>和<code>Terser</code></p><p><code>UglifyJs</code>是一个传统的代码压缩工具，已存在多年，曾经是前端应用的必备工具，但由于它不支持<code>ES6</code>语法，所以目前的流行度已有所下降。</p><p><code>Terser</code>是一个新起的代码压缩工具，支持<code>ES6+</code>语法，因此被很多构建工具内置使用。<code>webpack</code>安装后会内置<code>Terser</code>，当启用生产环境后即可用其进行代码压缩。</p><p>因此，我们选择<code>Terser</code></p><p><strong>关于副作用 side effect</strong></p><p>副作用：函数运行过程中，可能会对外部环境造成影响的功能</p><p>如果函数中包含以下代码，该函数叫做副作用函数:</p><ul><li>异步代码</li><li>localStorage</li><li>对外部数据的修改</li></ul><p>如果一个函数没有副作用，同时，函数的返回结果仅依赖参数，则该函数叫做纯函数(pure function)，即一个函数传入一个或多个参数，无论该函数执行多少次，返回的结果始终是固定不变的，并且这个过程中，不会对外部环境造成影响，那这个函数就是纯函数。</p><h1 id="Terser"><a href="#Terser" class="headerlink" title="Terser"></a>Terser</h1><p>在<code>Terser</code>的官网可尝试它的压缩效果</p><blockquote><p>Terser 官网：<a href="https://terser.org/">https://terser.org/</a></p></blockquote><h1 id="webpack-Terser"><a href="#webpack-Terser" class="headerlink" title="webpack+Terser"></a>webpack+Terser</h1><p>webpack 自动集成了 Terser</p><p>如果你想更改、添加压缩工具，又或者是想对 Terser 进行配置，使用下面的 webpack 配置即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">TerserPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;terser-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">OptimizeCSSAssetsPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;optimize-css-assets-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="comment">// 是否要启用压缩，默认情况下，生产环境会自动开启</span></span><br><span class="line">    <span class="attr">minimize</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">minimizer</span>: [</span><br><span class="line">      <span class="comment">// 压缩时使用的插件，可以有多个</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">TerserPlugin</span>(),</span><br><span class="line">      <span class="comment">// 这个是压缩CSS代码的插件</span></span><br><span class="line">      <span class="keyword">new</span> <span class="title class_">OptimizeCSSAssetsPlugin</span>(),</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="string">``</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(六)</title>
      <link href="/posts/67e24958/"/>
      <url>/posts/67e24958/</url>
      
        <content type="html"><![CDATA[<h1 id="自动分包"><a href="#自动分包" class="headerlink" title="自动分包"></a>自动分包</h1><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>不同与手动分包，自动分包是从<strong>实际的角度</strong>出发，从一个更加<strong>宏观的角度</strong>来控制分包，而一般不对具体哪个包要分出去进行控制</p><p>因此使用自动分包，不仅非常方便，而且更加贴合实际的开发需要</p><p>要控制自动分包，关键是要配置一个合理的<strong>分包策略</strong></p><p>有了分包策略之后，不需要额外安装任何插件，webpack会自动的按照策略进行分包</p><blockquote><p>实际上，webpack在内部是使用<code>SplitChunksPlugin</code>进行分包的，过去有一个库<code>CommonsChunkPlugin</code>也可以实现分包，不过由于该库某些地方并不完善，到了<code>webpack4</code>之后，已被<code>SplitChunksPlugin</code>取代</p></blockquote><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E5%85%AD)/image-20240918001316703.png" alt="image-20240918001316703"></p><p>从分包流程中至少可以看出以下几点：</p><ul><li>分包策略至关重要，它决定了如何分包</li><li>分包时，webpack开启了一个<strong>新的chunk</strong>，对分离的模块进行打包</li><li>打包结果中，公共的部分被提取出来形成了一个单独的文件，它是新chunk的产物</li></ul><h1 id="分包策略的基本配置"><a href="#分包策略的基本配置" class="headerlink" title="分包策略的基本配置"></a>分包策略的基本配置</h1><p>webpack提供了<code>optimization</code>配置项，用于配置一些优化信息</p><p>其中<code>splitChunks</code>是分包策略的配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="comment">// 分包策略</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>事实上，分包策略有其默认的配置，我们只需要轻微的改动，即可应对大部分分包场景</p><ol><li>chunks</li></ol><p>该配置项用于配置需要应用分包策略的chunk</p><p>我们知道，分包是从已有的chunk中分离出新的chunk，那么哪些chunk需要分离呢</p><p>chunks有三个取值，分别是：</p><ul><li>all: 对于所有的chunk都要应用分包策略</li><li>async：【默认】仅针对异步chunk应用分包策略</li><li>initial：仅针对普通chunk应用分包策略</li></ul><p>所以，你只需要配置<code>chunks</code>为<code>all</code>即可</p><ol start="2"><li>maxSize</li></ol><p>该配置可以控制包的最大字节数</p><p>如果某个包（包括分出来的包）超过了该值，则webpack会尽可能的将其分离成多个包</p><p>但是不要忽略的是，分包的<strong>基础单位是模块</strong>，如果一个完整的模块超过了该体积，它是无法做到再切割的，因此，尽管使用了这个配置，完全有可能某个包还是会超过这个体积</p><p>另外，该配置看上去很美妙，实际意义其实不大</p><p>因为分包的目的是<strong>提取大量的公共代码</strong>，从而减少总体积和充分利用浏览器缓存</p><p>虽然该配置可以把一些包进行再切分，但是实际的总体积和传输量并没有发生变化</p><blockquote><p>如果要进一步减少公共模块的体积，只能是压缩和<code>tree shaking</code></p></blockquote><h1 id="分包策略的其他配置"><a href="#分包策略的其他配置" class="headerlink" title="分包策略的其他配置"></a>分包策略的其他配置</h1><p>如果不想使用其他配置的默认值，可以手动进行配置：</p><ul><li>automaticNameDelimiter：新chunk名称的分隔符，默认值~</li><li>minChunks：一个模块被多少个chunk使用时，才会进行分包，默认值1</li><li>minSize：当分包达到多少字节后才允许被真正的拆分，默认值30000</li></ul><h1 id="缓存组"><a href="#缓存组" class="headerlink" title="缓存组"></a>缓存组</h1><p>之前配置的分包策略是全局的</p><p>而实际上，分包策略是基于缓存组的</p><p>每个缓存组提供一套独有的策略，webpack按照缓存组的优先级依次处理每个缓存组，被缓存组处理过的分包不需要再次分包</p><p>默认情况下，webpack提供了两个缓存组：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>:&#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="comment">//全局配置</span></span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="comment">// 属性名是缓存组名称，会影响到分包的chunk名</span></span><br><span class="line">        <span class="comment">// 属性值是缓存组的配置，缓存组继承所有的全局配置，也有自己特殊的配置</span></span><br><span class="line">        <span class="attr">vendors</span>: &#123; </span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/[\\/]node_modules[\\/]/</span>, <span class="comment">// 当匹配到相应模块时，将这些模块进行单独打包</span></span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">10</span> <span class="comment">// 缓存组优先级，优先级越高，该策略越先进行处理，默认值为0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">default</span>: &#123;</span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">2</span>,  <span class="comment">// 覆盖全局配置，将最小chunk引用数改为2</span></span><br><span class="line">          <span class="attr">priority</span>: -<span class="number">20</span>, <span class="comment">// 优先级</span></span><br><span class="line">          <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span> <span class="comment">// 重用已经被分离出去的chunk</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>很多时候，缓存组对于我们来说没什么意义，因为默认的缓存组就已经够用了</p><p>但是我们同样可以利用缓存组来完成一些事情，比如对公共样式的抽离</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">optimization</span>: &#123;</span><br><span class="line">    <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">      <span class="attr">chunks</span>: <span class="string">&quot;all&quot;</span>,</span><br><span class="line">      <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">        <span class="attr">styles</span>: &#123;</span><br><span class="line">          <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="comment">// 匹配样式模块</span></span><br><span class="line">          <span class="attr">minSize</span>: <span class="number">0</span>, <span class="comment">// 覆盖默认的最小尺寸，这里仅仅是作为测试</span></span><br><span class="line">          <span class="attr">minChunks</span>: <span class="number">2</span> <span class="comment">// 覆盖默认的最小chunk引用数</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [&#123; <span class="attr">test</span>: <span class="regexp">/\.css$/</span>, <span class="attr">use</span>: [<span class="title class_">MiniCssExtractPlugin</span>.<span class="property">loader</span>, <span class="string">&quot;css-loader&quot;</span>] &#125;]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">chunks</span>: [<span class="string">&quot;index&quot;</span>]</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">MiniCssExtractPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;[name].[hash:5].css&quot;</span>,</span><br><span class="line">      <span class="comment">// chunkFilename是配置来自于分割chunk的文件名</span></span><br><span class="line">      <span class="attr">chunkFilename</span>: <span class="string">&quot;common.[hash:5].css&quot;</span> </span><br><span class="line">    &#125;)</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="配合多页应用"><a href="#配合多页应用" class="headerlink" title="配合多页应用"></a>配合多页应用</h1><p>虽然现在单页应用是主流，但免不了还是会遇到多页应用</p><p>由于在多页应用中需要为每个html页面指定需要的chunk，这就造成了问题</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">  <span class="attr">chunks</span>: [<span class="string">&quot;index~other&quot;</span>, <span class="string">&quot;vendors~index~other&quot;</span>, <span class="string">&quot;index&quot;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>我们必须手动的指定被分离出去的chunk名称，这不是一种好办法</p><p>幸好<code>html-webpack-plugin</code>的新版本中解决了这一问题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i -D html-webpack-plugin@next</span><br></pre></td></tr></table></figure><p>做出以下配置即可：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">  <span class="attr">chunks</span>: [<span class="string">&quot;index&quot;</span>]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>它会自动的找到被<code>index</code>分离出去的chunk，并完成引用</p><blockquote><p>目前这个版本仍处于测试解决，还未正式发布</p></blockquote><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>自动分包的原理其实并不复杂，主要经过以下步骤：</p><ol><li>检查每个chunk编译的结果</li><li>根据分包策略，找到那些满足策略的模块</li><li>根据分包策略，生成新的chunk打包这些模块（代码有所变化）</li><li>把打包出去的模块从原始包中移除，并修正原始包代码</li></ol><p>在代码层面，有以下变动</p><ol><li>分包的代码中，加入一个全局变量，类型为数组，其中包含公共模块的代码</li><li>原始包的代码中，使用数组中的公共代码</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(五)</title>
      <link href="/posts/feed012a/"/>
      <url>/posts/feed012a/</url>
      
        <content type="html"><![CDATA[<h1 id="手动分包"><a href="#手动分包" class="headerlink" title="手动分包"></a>手动分包</h1><h1 id="基本原理"><a href="#基本原理" class="headerlink" title="基本原理"></a>基本原理</h1><p>手动分包的总体思路是：</p><ol><li>先单独的打包公共模块</li></ol><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E4%BA%94)/image-20240918000817183.png" alt="image-20240918000817183"></p><p>公共模块会被打包成为动态链接库(dll Dynamic Link Library)，并生成资源清单</p><ol start="2"><li>根据入口模块进行正常打包</li></ol><p>打包时，如果发现模块中使用了资源清单中描述的模块，则不会形成下面的代码结构</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//源码，入口文件index.js</span></span><br><span class="line"><span class="keyword">import</span> $ <span class="keyword">from</span> <span class="string">&quot;jquery&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> _ <span class="keyword">from</span> <span class="string">&quot;lodash&quot;</span>;</span><br><span class="line">_.<span class="title function_">isArray</span>($(<span class="string">&quot;.red&quot;</span>));</span><br></pre></td></tr></table></figure><p>由于资源清单中包含<code>jquery</code>和<code>lodash</code>两个模块，因此打包结果的大致格式是：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">(<span class="keyword">function</span> (<span class="params">modules</span>) &#123;</span><br><span class="line">  <span class="comment">//...</span></span><br><span class="line">&#125;)(&#123;</span><br><span class="line">  <span class="comment">// index.js文件的打包结果并没有变化</span></span><br><span class="line">  <span class="string">&quot;./src/index.js&quot;</span>: <span class="keyword">function</span> (<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span>, __webpack_require__</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> $ = <span class="title function_">__webpack_require__</span>(<span class="string">&quot;./node_modules/jquery/index.js&quot;</span>);</span><br><span class="line">    <span class="keyword">var</span> _ = <span class="title function_">__webpack_require__</span>(<span class="string">&quot;./node_modules/lodash/index.js&quot;</span>);</span><br><span class="line">    _.<span class="title function_">isArray</span>($(<span class="string">&quot;.red&quot;</span>));</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 由于资源清单中存在，jquery的代码并不会出现在这里</span></span><br><span class="line">  <span class="string">&quot;./node_modules/jquery/index.js&quot;</span>: <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="variable language_">module</span>,</span></span><br><span class="line"><span class="params">    <span class="built_in">exports</span>,</span></span><br><span class="line"><span class="params">    __webpack_require__</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = jquery;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 由于资源清单中存在，lodash的代码并不会出现在这里</span></span><br><span class="line">  <span class="string">&quot;./node_modules/lodash/index.js&quot;</span>: <span class="keyword">function</span> (<span class="params"></span></span><br><span class="line"><span class="params">    <span class="variable language_">module</span>,</span></span><br><span class="line"><span class="params">    <span class="built_in">exports</span>,</span></span><br><span class="line"><span class="params">    __webpack_require__</span></span><br><span class="line"><span class="params">  </span>) &#123;</span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = lodash;</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h1 id="打包公共模块"><a href="#打包公共模块" class="headerlink" title="打包公共模块"></a>打包公共模块</h1><p>打包公共模块是一个<strong>独立的</strong>打包过程</p><ol><li>单独打包公共模块，暴露变量名</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;production&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">jquery</span>: [<span class="string">&quot;jquery&quot;</span>],</span><br><span class="line">    <span class="attr">lodash</span>: [<span class="string">&quot;lodash&quot;</span>],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;dll/[name].js&quot;</span>,</span><br><span class="line">    <span class="attr">library</span>: <span class="string">&quot;[name]&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>利用<code>DllPlugin</code>生成资源清单</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.dll.config.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&quot;dll&quot;</span>, <span class="string">&quot;[name].manifest.json&quot;</span>), <span class="comment">//资源清单的保存位置</span></span><br><span class="line">      <span class="attr">name</span>: <span class="string">&quot;[name]&quot;</span>, <span class="comment">//资源清单中，暴露的变量名</span></span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>运行后，即可完成公共模块打包</p><h1 id="使用公共模块"><a href="#使用公共模块" class="headerlink" title="使用公共模块"></a>使用公共模块</h1><ol><li>在页面中手动引入公共模块</li></ol><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dll/jquery.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./dll/lodash.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="2"><li>重新设置<code>clean-webpack-plugin</code></li></ol><p>如果使用了插件<code>clean-webpack-plugin</code>，为了避免它把公共模块清除，需要做出以下配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(&#123;</span><br><span class="line">  <span class="comment">// 要清除的文件或目录</span></span><br><span class="line">  <span class="comment">// 排除掉dll目录本身和它里面的文件</span></span><br><span class="line">  <span class="attr">cleanOnceBeforeBuildPatterns</span>: [<span class="string">&quot;**/*&quot;</span>, <span class="string">&quot;!dll&quot;</span>, <span class="string">&quot;!dll/*&quot;</span>],</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>目录和文件的匹配规则使用的是<a href="https://github.com/sindresorhus/globby#globbing-patterns">globbing patterns</a></p></blockquote><ol start="3"><li>使用<code>DllReferencePlugin</code>控制打包结果</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllReferencePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">manifest</span>: <span class="built_in">require</span>(<span class="string">&quot;./dll/jquery.manifest.json&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllReferencePlugin</span>(&#123;</span><br><span class="line">      <span class="attr">manifest</span>: <span class="built_in">require</span>(<span class="string">&quot;./dll/lodash.manifest.json&quot;</span>),</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><strong>手动打包的过程</strong>：</p><ol><li>开启<code>output.library</code>暴露公共模块</li><li>用<code>DllPlugin</code>创建资源清单</li><li>用<code>DllReferencePlugin</code>使用资源清单</li></ol><p><strong>手动打包的注意事项</strong>：</p><ol><li>资源清单不参与运行，可以不放到打包目录中</li><li>记得手动引入公共 JS，以及避免被删除</li><li>不要对小型的公共 JS 库使用</li></ol><p><strong>优点</strong>：</p><ol><li>极大提升自身模块的打包速度</li><li>极大的缩小了自身文件体积</li><li>有利于浏览器缓存第三方库的公共代码</li></ol><p><strong>缺点</strong>：</p><ol><li>使用非常繁琐</li><li>如果第三方库中包含重复代码，则效果不太理想</li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>element-ui中input回车触发页面刷新问题及其解决方法</title>
      <link href="/posts/49d9275e/"/>
      <url>/posts/49d9275e/</url>
      
        <content type="html"><![CDATA[<p>在element-ui的el-form表单中，如果只存在一个el-input输入框，当你输入值后按下回车，页面会发生刷新。这是因为当form元素中只有一个输入框时，按下回车将触发表单的默认提交事件，这是W3C标准的规定。</p><h3 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h3><p>ElementUI也给出了解决方法。如果你希望阻止这一默认行为，可以在<code>&lt;el-form&gt;</code>标签上添加<code>@submit.native.prevent</code>。例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">label-width</span>=<span class="string">&quot;200px&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;form&quot;</span> </span></span><br><span class="line"><span class="tag">  @<span class="attr">submit.native.prevent</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;form.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> @<span class="attr">click</span>=<span class="string">&quot;submit(&#x27;form&#x27;)&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;reset(&#x27;form&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然而，上述方法只是阻止了默认行为，如果你仍需要回车来提交表单，你可以通过以下方式解决：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-form</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">:model</span>=<span class="string">&quot;form&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">ref</span>=<span class="string">&quot;form&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">label-width</span>=<span class="string">&quot;200px&quot;</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;form&quot;</span> </span></span><br><span class="line"><span class="tag">  @<span class="attr">submit.native.prevent</span>=<span class="string">&quot;() =&gt; submit(&#x27;form&#x27;)&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">  &gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-input</span> <span class="attr">v-model.number</span>=<span class="string">&quot;form.name&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">el-input</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-form-item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> <span class="attr">type</span>=<span class="string">&quot;primary&quot;</span> <span class="attr">native-type</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;reset(&#x27;form&#x27;)&quot;</span>&gt;</span>重置<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-form-item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>请注意以下几点：</p><ul><li><p>确保使用 @submit.native.prevent 阻止原生事件，执行方法为搜索按钮按click事件</p></li><li><p>搜索按钮需要被包裹在 el-form 中</p></li><li><p>移除搜索按钮的click事件</p></li><li><p>确保增加 native-type&#x3D;”submit” 属性</p></li></ul><p>此外，原生的form表单的单input(输入)和form包裹el-input回车刷新的问题也可以解决，有以下几种方法：</p><ol><li>在form表单内再增加一个隐藏的input(输入)框，可以通过hidden定义隐藏的输入字段，或者通过CSS样式进行隐藏</li><li>去掉输入框的回车事件（根据需求来定，有的需要回车事件提交表单来查询或者执行其他操作则该方法不适用）</li><li>阻止表单默认提交事件。例如，使用onsubmit句柄返回false来阻止原生form内的input(输入)的默认提交事件</li></ol><p>原文地址：<a href="https://blog.csdn.net/qq_39997939/article/details/131048775">ElementUI中input回车触发页面刷新问题及其解决方法_回车刷新页面-CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(四)</title>
      <link href="/posts/f8465657/"/>
      <url>/posts/f8465657/</url>
      
        <content type="html"><![CDATA[<h1 id="热替换-HMR"><a href="#热替换-HMR" class="headerlink" title="热替换 HMR"></a>热替换 HMR</h1><blockquote><p>热替换并不能降低构建时间（可能还会稍微增加），但可以降低代码改动到效果呈现的时间</p></blockquote><p>当使用<code>webpack-dev-server</code>时，考虑代码改动到效果呈现的过程</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E5%9B%9B)/image-20240918000430306.png" alt="image-20240918000430306"></p><p>而使用了热替换后，流程发生了变化</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E5%9B%9B)/image-20240918000438360.png" alt="image-20240918000438360"></p><h1 id="使用和原理"><a href="#使用和原理" class="headerlink" title="使用和原理"></a>使用和原理</h1><ol><li>更改配置</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">hot</span>: <span class="literal">true</span>, <span class="comment">// 开启HMR</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="comment">// 可选，新版webpack中不配置插件，只要开启hot即可开启热替换</span></span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">HotModuleReplacementPlugin</span>(),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ol start="2"><li>更改代码</li></ol><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">module</span>.<span class="property">hot</span>) &#123;</span><br><span class="line">  <span class="comment">// 是否开启了热更新</span></span><br><span class="line">  <span class="variable language_">module</span>.<span class="property">hot</span>.<span class="title function_">accept</span>(); <span class="comment">// 接受热更新</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>首先，这段代码会参与最终运行！</p><p>当开启了热更新后，<code>webpack-dev-server</code>会向打包结果中注入<code>module.hot</code>属性</p><p>默认情况下，<code>webpack-dev-server</code>不管是否开启了热更新，当重新打包后，都会调用<code>location.reload</code>刷新页面</p><p>但如果运行了<code>module.hot.accept()</code>，将改变这一行为</p><p><code>module.hot.accept()</code>的作用是让<code>webpack-dev-server</code>通过<code>socket</code>管道，把服务器更新的内容发送到浏览器</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E5%9B%9B)/image-20240918000443820.png" alt="image-20240918000443820"></p><p>然后，将结果交给插件<code>HotModuleReplacementPlugin</code>注入的代码执行</p><p>插件<code>HotModuleReplacementPlugin</code>会根据覆盖原始代码，然后让代码重新执行</p><p><strong>所以，热替换发生在代码运行期</strong></p><h1 id="样式热替换"><a href="#样式热替换" class="headerlink" title="样式热替换"></a>样式热替换</h1><p>对于样式也是可以使用热替换的，但需要使用<code>style-loader</code></p><p>因为热替换发生时，<code>HotModuleReplacementPlugin</code>只会简单的重新运行模块代码</p><p>因此<code>style-loader</code>的代码一运行，就会重新设置<code>style</code>元素中的样式</p><p>而<code>mini-css-extract-plugin</code>，由于它生成文件是在<strong>构建期间</strong>，运行期间无法改动文件，因此它对于热替换是无效的</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(三)</title>
      <link href="/posts/205b958/"/>
      <url>/posts/205b958/</url>
      
        <content type="html"><![CDATA[<h1 id="优化-loader-性能"><a href="#优化-loader-性能" class="headerlink" title="优化 loader 性能"></a>优化 loader 性能</h1><h2 id="进一步限制-loader-的应用范围"><a href="#进一步限制-loader-的应用范围" class="headerlink" title="进一步限制 loader 的应用范围"></a>进一步限制 loader 的应用范围</h2><p>思路是：对于某些库，不使用 loader</p><p>例如：babel-loader 可以转换 ES6 或更高版本的语法，可是有些库本身就是用 ES5 语法书写的，不需要转换，使用 babel-loader 反而会浪费构建时间</p><p>lodash 就是这样的一个库</p><blockquote><p>lodash 是在 ES5 之前出现的库，使用的是 ES3 语法</p></blockquote><p>通过<code>module.rule.exclude</code>或<code>module.rule.include</code>，排除或仅包含需要应用 loader 的场景</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/lodash/</span>,</span><br><span class="line">        <span class="attr">use</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>如果暴力一点，甚至可以排除掉<code>node_modules</code>目录中的模块，或仅转换<code>src</code>目录的模块</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">exclude</span>: <span class="regexp">/node_modules/</span>,</span><br><span class="line">        <span class="comment">//或</span></span><br><span class="line">        <span class="comment">// include: /src/,</span></span><br><span class="line">        <span class="attr">use</span>: <span class="string">&quot;babel-loader&quot;</span>,</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>这种做法是对 loader 的范围进行进一步的限制，和 noParse 不冲突，因为 noParse 配置的模块仍然会经过 loader 的转化</p></blockquote><h2 id="缓存-loader-的结果"><a href="#缓存-loader-的结果" class="headerlink" title="缓存 loader 的结果"></a>缓存 loader 的结果</h2><p>我们可以基于一种假设：如果某个文件内容不变，经过相同的 loader 解析后，解析后的结果也不变</p><p>于是，可以将 loader 的解析结果保存下来，让后续的解析直接使用保存的结果</p><p><code>cache-loader</code>可以实现这样的功能</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [<span class="string">&quot;cache-loader&quot;</span>, ...loaders],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>有趣的是，<code>cache-loader</code>放到最前面，却能够决定后续的 loader 是否运行</p><p>实际上，loader 的运行过程中，还包含一个过程，即<code>pitch</code></p><p>pitch 的大概原理如下：书写一个 loader 时，除了写 loader 方法外，还可以添加一个 pitch 函数，该函数参数接收一个文件路径，返回该路径文件的源代码。</p><p>所以第一次编译构建时，经过 cache-loader 的 pitch 时，内容不会被缓存，还是从后往前经过 loader 后，到达了 cache-loader，此时 cache-loader 缓存之前 loader 转换的结果。</p><p>当第二次编译构建时，cache-loader 发现文件有缓存过，由 pitch 函数直接返回该文件上次转换缓存的结果，后续在经过 loader 时，如果文件没有改动，就不在对该文件进行转换了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">loader</span>(<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">`new source`</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loader.<span class="property">pitch</span> = <span class="keyword">function</span> (<span class="params">filePath</span>) &#123;</span><br><span class="line">  <span class="comment">// 可返回可不返回</span></span><br><span class="line">  <span class="comment">// 如果返回，返回源代码</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = loader;</span><br></pre></td></tr></table></figure><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E4%B8%89)/image-20240917234508467.png" alt="image-20240917234508467"></p><p><code>cache-loader</code>还可以实现各自自定义的配置，具体方式见文档</p><h2 id="为-loader-的运行开启多线程"><a href="#为-loader-的运行开启多线程" class="headerlink" title="为 loader 的运行开启多线程"></a>为 loader 的运行开启多线程</h2><p><code>thread-loader</code>会开启一个线程池，线程池中包含适量的线程</p><p>它会把后续的 loader 放到线程池的线程中运行，以提高构建效率</p><p>由于后续的 loader 会放到新的线程中，所以，后续的 loader 不能：</p><ul><li>使用 webpack api 生成文件</li><li>无法使用自定义的 plugin api</li><li>无法访问 webpack options</li></ul><blockquote><p>在实际的开发中，可以进行测试，来决定<code>thread-loader</code>放到什么位置</p></blockquote><p><strong>特别注意</strong>，开启和管理线程需要消耗时间，在小型项目中使用<code>thread-loader</code>反而会增加构建时间</p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(二)</title>
      <link href="/posts/feed012a/"/>
      <url>/posts/feed012a/</url>
      
        <content type="html"><![CDATA[<h1 id="减少模块解析"><a href="#减少模块解析" class="headerlink" title="减少模块解析"></a>减少模块解析</h1><h2 id="什么叫做模块解析？"><a href="#什么叫做模块解析？" class="headerlink" title="什么叫做模块解析？"></a>什么叫做模块解析？</h2><p>模块解析包括：抽象语法树分析、依赖分析、模块语法替换</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E4%BA%8C)/image-20240917233448984.png" alt="image-20240917233448984"></p><h2 id="不做模块解析会怎样？"><a href="#不做模块解析会怎样？" class="headerlink" title="不做模块解析会怎样？"></a>不做模块解析会怎样？</h2><p>如果某个模块不做解析，该模块经过loader处理后的代码就是最终代码。</p><p>如果没有loader对该模块进行处理，该模块的源码就是最终打包结果的代码。</p><p>如果不对某个模块进行解析，可以缩短构建时间</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E4%BA%8C)/image-20240917233452706.png" alt="image-20240917233452706"></p><h2 id="哪些模块不需要解析？"><a href="#哪些模块不需要解析？" class="headerlink" title="哪些模块不需要解析？"></a>哪些模块不需要解析？</h2><p>模块中无其他依赖：一些已经打包好的第三方库，比如jquery</p><h2 id="如何让某个模块不要解析？"><a href="#如何让某个模块不要解析？" class="headerlink" title="如何让某个模块不要解析？"></a>如何让某个模块不要解析？</h2><p>配置<code>module.noParse</code>，它是一个正则，被正则匹配到的模块不会解析</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">noParse</span>: <span class="regexp">/jquery|lodash/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>javascript中的各位置属性详解</title>
      <link href="/posts/f55dc13/"/>
      <url>/posts/f55dc13/</url>
      
        <content type="html"><![CDATA[<p>工作中需要开发一个滚动条滚动到底时加载数据的功能，需要判断滚动条位置，动态去加载数据，对javascript中的所有位置属性做一个总结<br>如图：<br><img src="/./assets/javascript%E4%B8%AD%E7%9A%84%E5%90%84%E4%BD%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E8%AF%A6%E8%A7%A3/20180104085724397.gif" alt="20180104085724397"></p><p>假设 obj 为某个 HTML 控件，以下位置信息的单位均为像素</p><p><strong>obj.offsetWidth</strong>: 指 obj 控件自身的宽度，包含边框<br><strong>obj.offsetHeight</strong>: 指 obj 控件自身的高度，包含边框<br><strong>obj.offsetTop</strong>: 指 obj 对象上侧与定位父级之间的距离<br><strong>obj.offsetLeft</strong>: 指 obj 对象左侧与定位父级之间的距离</p><p><strong>obj.scrollWidth</strong>: 指滚动条可滚动区域整个的宽度<br><strong>obj.scrollHeight</strong>: 指滚动条可滚动区域整个的高度<br><strong>obj.scrollTop</strong>: 指滚动条上方已经经过的区域的高度<br><strong>obj.scrollLeft</strong>: 指滚动条左方已经经过的区域的宽度</p><p><strong>obj.clientWidth</strong>: 指控件可视区域内，内容区的宽度<br><strong>obj.clientHeight</strong>: 指控件可视区域内，内容区的高度<br><strong>obj.clientTop</strong>: 指控件上方边框的高度，如果没有边框或者不定位该元素，它的值就是0<br><strong>obj.clientWidth</strong>: 指控件左方边框的宽度，如果没有边框或者不定位该元素，它的值就是0</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 计算滚动条距离容器底部的距离</span></span><br><span class="line"><span class="keyword">const</span> scrollDistance = dom.<span class="property">scrollHeight</span> - dom.<span class="property">scrollTop</span> - dom.<span class="property">clientHeight</span></span><br></pre></td></tr></table></figure><h2 id="完整实现代码"><a href="#完整实现代码" class="headerlink" title="完整实现代码"></a>完整实现代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 寻找元素</span></span><br><span class="line"><span class="comment">// element2中可滚动区域容器为el-table__body-wrapper</span></span><br><span class="line"><span class="comment">// element3中可滚动区域容器为el-scrollbar__wrap</span></span><br><span class="line"><span class="keyword">let</span> dom = <span class="variable language_">this</span>.<span class="property">$refs</span>.<span class="property">dataElementTable</span>.<span class="property">$el</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.el-table__body-wrapper&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为了避免滚动条触底时，触发过多的加载事件，简单的加上节流函数处理</span></span><br><span class="line"><span class="comment">// hasScrollEventListener为了避免多次给元素添加监听事件</span></span><br><span class="line"><span class="keyword">let</span> timeout = <span class="literal">null</span></span><br><span class="line"><span class="keyword">if</span> (!dom.<span class="property">hasScrollEventListener</span>) &#123;</span><br><span class="line">  <span class="comment">// 给容器添加滚动条监听事件</span></span><br><span class="line">  dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;scroll&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> scrollDistance = dom.<span class="property">scrollHeight</span> - dom.<span class="property">scrollTop</span> - dom.<span class="property">clientHeight</span></span><br><span class="line">    <span class="keyword">if</span>(scrollDistance &lt; <span class="number">10</span>) &#123;</span><br><span class="line">      <span class="comment">// 每次触发scroll，先清除定时器</span></span><br><span class="line">      <span class="built_in">clearTimeout</span>(timeout)</span><br><span class="line">      timeout = <span class="built_in">setTimeout</span>(<span class="variable language_">this</span>.<span class="property">queryDataElementTableData</span>, <span class="number">200</span>)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  dom.<span class="property">hasScrollEventListener</span> = <span class="literal">true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> web </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-性能优化(一)</title>
      <link href="/posts/d3c70211/"/>
      <url>/posts/d3c70211/</url>
      
        <content type="html"><![CDATA[<h1 id="性能优化概述"><a href="#性能优化概述" class="headerlink" title="性能优化概述"></a>性能优化概述</h1><p>本章所讲的性能优化主要体现在三个方面：</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E4%B8%80)/image-20240917231233885.png" alt="image-20240917231233885"></p><p><strong>构建性能</strong></p><p>这里所说的构建性能，是指在<strong>开发阶段的构建性能</strong>，而不是生产环境的构建性能</p><p>优化的目标，<strong>是降低从打包开始，到代码效果呈现所经过的时间</strong></p><p>构建性能会影响开发效率。构建性能越高，开发过程中时间的浪费越少</p><p><strong>传输性能</strong></p><p>传输性能是指，打包后的JS代码传输到浏览器经过的时间</p><p>在优化传输性能时要考虑到：</p><ol><li>总传输量：所有需要传输的JS文件的内容加起来，就是总传输量，重复代码越少，总传输量越少</li><li>文件数量：当访问页面时，需要传输的JS文件数量，文件数量越多，http请求越多，响应速度越慢</li><li>浏览器缓存：JS文件会被浏览器缓存，被缓存的文件不会再进行传输</li></ol><p><strong>运行性能</strong></p><p>运行性能是指，JS代码在浏览器端的运行速度</p><p>它主要取决于我们如何书写高性能的代码</p><p><strong>永远不要过早的关注于性能</strong>，因为你在开发的时候，无法完全预知最终的运行性能，过早的关注性能会极大的降低开发效率</p><hr><p>性能优化主要从上面三个维度入手</p><p><strong>性能优化没有完美的解决方案，需要具体情况具体分析</strong></p><h1 id="性能优化的手段"><a href="#性能优化的手段" class="headerlink" title="性能优化的手段"></a>性能优化的手段</h1><p>性能优化的主要手段有以下几点，红色标记为优化的手段，蓝色标记为具体要执行的操作或者要使用到的扩展，后面几个章节我们分别进行介绍。</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96(%E4%B8%80)/image-20240917233143156.png" alt="image-20240917233143156"></p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-常用扩展</title>
      <link href="/posts/b10b8d2a/"/>
      <url>/posts/b10b8d2a/</url>
      
        <content type="html"><![CDATA[<h2 id="开发服务器：webpack-dev-server"><a href="#开发服务器：webpack-dev-server" class="headerlink" title="开发服务器：webpack-dev-server"></a>开发服务器：webpack-dev-server</h2><p>在<strong>开发阶段</strong>，目前遇到的问题是打包、运行、调试过程过于繁琐，回顾一下我们的操作流程：</p><ol><li>编写代码</li><li>控制台运行命令完成打包</li><li>打开页面查看效果</li><li>继续编写代码，回到步骤 2</li></ol><p>并且，我们往往希望把最终生成的代码和页面部署到服务器上，来模拟真实环境</p><p>为了解决这些问题，webpack 官方制作了一个单独的库：<strong>webpack-dev-server</strong></p><p>它<strong>既不是 plugin 也不是 loader</strong></p><p>先来看看它怎么用</p><ol><li>安装</li><li>执行<code>webpack-dev-server</code>命令</li></ol><p><code>webpack-dev-server</code>命令几乎支持所有的 webpack 命令参数，如<code>--config</code>、<code>-env</code>等等，你可以把它当作 webpack 命令使用</p><p>这个命令是专门为开发阶段服务的，真正部署的时候还是得使用 webpack 命令</p><p>当我们执行<code>webpack-dev-server</code>命令后，它做了以下操作：</p><ol><li>内部执行 webpack 命令，传递命令参数</li><li>开启 watch</li><li>注册 hooks：类似于 plugin，webpack-dev-server 会向 webpack 中注册一些钩子函数，主要功能如下：<ol><li>将资源列表（aseets）保存起来</li><li>禁止 webpack 输出文件</li></ol></li><li>用 express 开启一个服务器，监听某个端口，当请求到达后，根据请求的路径，给予相应的资源内容</li></ol><p><strong>配置</strong></p><p>针对 webpack-dev-server 的配置，参考：<a href="https://www.webpackjs.com/configuration/dev-server/">https://www.webpackjs.com/configuration/dev-server/</a></p><p>常见配置有：</p><ul><li>port：配置监听端口</li><li>proxy：配置代理，常用于跨域访问</li><li>stats：配置控制台输出内容</li></ul><p>配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 需要使用npm install -D webpack-dev-server 安装</span></span><br><span class="line"><span class="comment">// 之后可以使用 npx webpack-dev-server 启动开发服务器</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;scripts/[name].[chunkhash:5].js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">devServer</span>: &#123;</span><br><span class="line">        <span class="attr">port</span>: <span class="number">8000</span>, <span class="comment">// 启动开发服务器的端口</span></span><br><span class="line">        <span class="attr">open</span>: <span class="literal">true</span>, <span class="comment">// 是否自动打开页面</span></span><br><span class="line">        <span class="attr">proxy</span>: &#123; <span class="comment">// 代理规则</span></span><br><span class="line">            <span class="comment">// 要被代理的接口，”/api“表示接口路径中包含api的所有接口被代理</span></span><br><span class="line">            <span class="string">&quot;/api&quot;</span>: &#123;</span><br><span class="line">                <span class="comment">// 目标服务器地址</span></span><br><span class="line">                <span class="attr">target</span>: <span class="string">&quot;http://open.duyiedu.com&quot;</span>,</span><br><span class="line">                <span class="comment">// 更改请求头中的host和origin，有的接口的后端服务会对该字段进行校验</span></span><br><span class="line">                <span class="attr">changeOrigin</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="comment">// 路径重写，&#123; &#x27;/api&#x27;: &#x27;&#x27; &#125;是指将路径中/api替换为空字符串</span></span><br><span class="line">                <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;,</span><br><span class="line">                <span class="comment">// 如果目标服务器是HTTPS，需要配置此项</span></span><br><span class="line">              <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="comment">// 如果需要代理 WebSocket 请求，则需要将该项设置为 true</span></span><br><span class="line">                <span class="attr">ws</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;，</span><br><span class="line">       <span class="attr">stats</span>: &#123;</span><br><span class="line">          <span class="attr">modules</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">colors</span>: <span class="literal">true</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 配置代理的原因: 假设我们在项目中通过ajax或者axios请求了其他域名的接口，因为我们自己网站的域名是</span></span><br><span class="line"><span class="comment">// http://localhost:port，在浏览器中请求其他域名的接口时就会被浏览器的跨越策略拦截，不被允许访问</span></span><br><span class="line"><span class="comment">// 如果我们配置了代理的话，相当于我们的接口请求是由开发服务器发出的，因为开发服务器并没有跨域策略，这样就不会出现跨域的问题</span></span><br><span class="line"><span class="comment">// 跨域策略是浏览器为了防止网站肆意访问其他网站资源所产生的一种预防策略，如果是服务器的话并不会出现跨域</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注：有时候在配置key值和pathRewrite的路径时，我们会在路径前加一个 ^，比如</span></span><br><span class="line"><span class="string">&#x27;^/api&#x27;</span>: &#123;</span><br><span class="line">    <span class="attr">target</span>: <span class="string">&#x27;http://localhost:3000&#x27;</span>,</span><br><span class="line">    <span class="attr">pathRewrite</span>: &#123; <span class="string">&#x27;^/api&#x27;</span>: <span class="string">&#x27;&#x27;</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这是一个正则表达式的标志，用于精确匹配路径的开头部分。</span></span><br><span class="line"><span class="comment">// ^/api就是表示匹配以/api开头的路径，而不是匹配路径中包含/api的全部路径</span></span><br></pre></td></tr></table></figure><h2 id="清除输出目录：clean-webpack-plugin"><a href="#清除输出目录：clean-webpack-plugin" class="headerlink" title="清除输出目录：clean-webpack-plugin"></a>清除输出目录：clean-webpack-plugin</h2><p>在我们的 webpack 编译生成文件时，如果配置了 output.filename 中包含 hash 值的内容，比如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].[chunkhash:5].js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时，webpack 每次打包都会产生新的文件添加到 dist 目录下，dist 下的文件就会越来越多，而且我们无法知道那个文件是我们最后一次打包出来的</p><p>此时，如果配置了 clean-webpack-plugin，它就会在每次打包产生文件之前先清除构建目录下的文件，配置如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;[name].[chunkhash:5].js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [<span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>()],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="自动生成页面：html-webpack-plugin"><a href="#自动生成页面：html-webpack-plugin" class="headerlink" title="自动生成页面：html-webpack-plugin"></a>自动生成页面：html-webpack-plugin</h2><p>webpack 自身打包出来的文件只有 js 文件，不过不使用插件的话，我们就需要自己创建 html 文件，将打包出来的 js 文件通过 script 标签引入到页面上，这对我们开发来说，也是增加了一部分没有必要的工作量</p><p>此时，如果配置了 html-webpack-plugin，那么我们可以在 public 目录下添加一个 html 文件，这样在每次打包生成文件时，这个插件首先会帮我们将 public 目录下的文件作为模板文件复制到构建目录中去，并且自动在文件中追加 script 标签，引用打包出的 chunk 文件。配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 如果有多个chunk文件需要打包，引用到不同的页面上，那我们可以配置多个HtmlWebpackPlugin，如下</span></span><br><span class="line"><span class="comment">// template: 配置模板文件</span></span><br><span class="line"><span class="comment">// filename: 模板文件复制到构建目录下的文件名</span></span><br><span class="line"><span class="comment">// chunks: 这个模板文件中要引用的chunk的key值，注意是在entry中配置时的key值，而不是chunk的文件名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">  <span class="attr">entry</span>: &#123;</span><br><span class="line">    <span class="attr">home</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    <span class="attr">a</span>: <span class="string">&quot;./src/a.js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;scripts/[name].[chunkhash:5].js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;home.html&quot;</span>,</span><br><span class="line">      <span class="attr">chunks</span>: [<span class="string">&quot;home&quot;</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;a.html&quot;</span>,</span><br><span class="line">      <span class="attr">chunks</span>: [<span class="string">&quot;a&quot;</span>],</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="复制静态资源：copy-webpack-plugin"><a href="#复制静态资源：copy-webpack-plugin" class="headerlink" title="复制静态资源：copy-webpack-plugin"></a>复制静态资源：copy-webpack-plugin</h2><p>html-webpack-plugin 只会将配置的 html 页面复制到构建目录下，如果我们项目中用到了图片、视频等静态资源文件的话，还是需要我们手动复制过去，这样也很不方便</p><p>copy-webpack-plugin 就是帮助我们复制静态资源文件的，配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// from: 要复制的静态资源的目录，相对于webpack.config.js文件的相对路径</span></span><br><span class="line"><span class="comment">// to: 要复制到的目录，这是相对于构建目录的相对路径，如果没有修改webpack最终的路径，那么就是相对dist目录的路径</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;copy-webpack-plugin&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;scripts/[name].[chunkhash:5].js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>([&#123; <span class="attr">from</span>: <span class="string">&quot;./public&quot;</span>, <span class="attr">to</span>: <span class="string">&quot;./&quot;</span> &#125;]),</span><br><span class="line">  ],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>注：</strong>这里的 copy-webpack-plugin 要与下面要介绍 file-loader 进行区分，copy-webpack-plugin 只是<strong>单纯将静态资源复制到构建目录中去，并不会做其他的处理</strong>，这样复制过来的资源，适用于我们直接在页面上写死的资源，比如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./img/webpack.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里引用的图片就是我们写死在 index.html 上的，我们使用 copy-webpack-plugin 将图片复制到构建目录可以直接使用。</p><p>下面要介绍的 file-loader 则适用于在 index.js 中使用 require 或 import 的方式导入的文件。</p><h2 id="普通文件处理：file-loader-与-url-loader"><a href="#普通文件处理：file-loader-与-url-loader" class="headerlink" title="普通文件处理：file-loader 与 url-loader"></a>普通文件处理：file-loader 与 url-loader</h2><h3 id="file-loader"><a href="#file-loader" class="headerlink" title="file-loader"></a>file-loader</h3><p>比如我们在 index.js 中引用了一张图片，要在某个合适的时机添加到页面上，代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 希望导入的模块结果是一个可用的资源路径</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里如果使用commonjs导入图片时，要在后面加上default</span></span><br><span class="line"><span class="comment">// 因为file-loader导出时，默认是使用es6模块化方式导出的</span></span><br><span class="line"><span class="comment">// webpack对es6和commonjs做了兼容，用es6导出，如果要用commonjs导入的话，需要加上.default</span></span><br><span class="line"><span class="comment">// 也可以直接用es6模块进行导入</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// import png from &quot;./assets/webpack.png&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> png = <span class="built_in">require</span>(<span class="string">&quot;./assets/webpack.png&quot;</span>).<span class="property">default</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title class_">Math</span>.<span class="title function_">random</span>() &lt; <span class="number">0.5</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">  img.<span class="property">src</span> = png;</span><br><span class="line">  <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候，如果我们直接进行构建的话，则会出现报错，因为 webpack 只能处理 js 文件，这里发现一张图片时，webpack 无法将这个图片文件的内容抽象成 AST 语法树，那这里就会报错了。</p><p>此时，我们就需要用到 file-loader 了，file-loader 的作用，首先它会将这个依赖的文件根据输出到构建目录中去，然后会将文件内容导出为一个路径，类似我们之前开发的自定义插件 img-loader。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// file-loader</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loader</span>(<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="comment">// source：文件内容（图片内容 buffer）</span></span><br><span class="line">  <span class="comment">// 1. 生成一个具有相同文件内容的文件到输出目录</span></span><br><span class="line">  <span class="comment">// 2. 返回一个路径 export default &quot;文件名&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们在 js 中引入一些普通文件后，编译时才不会报错，配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;scripts/[name].[chunkhash:5].js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png)|(jpg)|(gif)$/</span>,</span><br><span class="line">    <span class="attr">use</span>: [&#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&#x27;file-loader&#x27;</span></span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// [name]指原来文件的文件名</span></span><br><span class="line">          <span class="comment">// [ext]指原来文件的后缀名</span></span><br><span class="line">          <span class="comment">// [hash]指原来文件内容生成的hash值，这里要区分chunk的hash</span></span><br><span class="line">          <span class="comment">// [hash]用来防止文件名重复，也可以解决文件缓存问题</span></span><br><span class="line">          <span class="comment">// 这里也可以在前面加上路径</span></span><br><span class="line">          <span class="comment">// file-loader不会管原来的文件在那个路径下，会将所有文件都按照这里的配置生成到同一个目录下</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;imgs/[name]-[hash:5].[ext]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>([</span><br><span class="line">            &#123; <span class="attr">from</span>: <span class="string">&quot;./public&quot;</span>, <span class="attr">to</span>: <span class="string">&quot;./&quot;</span> &#125;</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="url-laoder"><a href="#url-laoder" class="headerlink" title="url-laoder"></a>url-laoder</h3><p>url-loader 内部也用到了 file-loader，但并不会像 file-loader 那么暴力，只要是静态文件，就全部输出成文件</p><p>url-laoder 允许我们根据需要将文件转换为 base64 格式的字符串，以减少 http 请求</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// url-loader</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loader</span>(<span class="params">source</span>) &#123;</span><br><span class="line">  <span class="comment">// source：文件内容（图片内容 buffer）</span></span><br><span class="line">  <span class="comment">// 1. 根据buffer生成一个base64编码</span></span><br><span class="line">  <span class="comment">// 2. 返回一段代码   export default &quot;base64编码&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">CleanWebpackPlugin</span> &#125; = <span class="built_in">require</span>(<span class="string">&quot;clean-webpack-plugin&quot;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">CopyPlugin</span> = <span class="built_in">require</span>(<span class="string">&#x27;copy-webpack-plugin&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&quot;scripts/[name].[chunkhash:5].js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.(png)|(jpg)|(gif)$/</span>,</span><br><span class="line">    <span class="attr">use</span>: [&#123;</span><br><span class="line">    <span class="attr">loader</span>: <span class="string">&#x27;url-loader&#x27;</span></span><br><span class="line">    <span class="attr">options</span>: &#123;</span><br><span class="line">          <span class="comment">// limit: false, // 不限制任何大小，所有经过loader的文件进行base，64编码返回</span></span><br><span class="line">          <span class="attr">limit</span>: <span class="number">10240</span>, <span class="comment">// 限制10K以下的文件，进行base64编码，否则交给file-loader进行处理</span></span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;imgs/[name]-[hash:5].[ext]&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;]</span><br><span class="line">    ]</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CleanWebpackPlugin</span>(),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span></span><br><span class="line">        &#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">CopyPlugin</span>([</span><br><span class="line">            &#123; <span class="attr">from</span>: <span class="string">&quot;./public&quot;</span>, <span class="attr">to</span>: <span class="string">&quot;./&quot;</span> &#125;</span><br><span class="line">        ])</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="解决路径问题"><a href="#解决路径问题" class="headerlink" title="解决路径问题"></a>解决路径问题</h3><p>在使用 file-loader 或 url-loader 时，可能会遇到一个非常有趣的问题</p><p>比如，通过 webpack 打包的目录结构如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">dist</span></span><br><span class="line">    <span class="string">|——</span> <span class="string">img</span></span><br><span class="line">        <span class="string">|——</span> <span class="string">a.png</span>  <span class="comment">#file-loader生成的文件</span></span><br><span class="line">    <span class="string">|——</span> <span class="string">scripts</span></span><br><span class="line">        <span class="string">|——</span> <span class="string">main.js</span>  <span class="comment">#export default &quot;img/a.png&quot;</span></span><br><span class="line">    <span class="string">|——</span> <span class="string">html</span></span><br><span class="line">        <span class="string">|——</span> <span class="string">index.html</span> <span class="comment">#&lt;script src=&quot;../scripts/main.js&quot; &gt;&lt;/script&gt;</span></span><br></pre></td></tr></table></figure><p>这种问题发生的根本原因：模块中的路径来自于某个 loader 或 plugin，当产生路径时，loader 或 plugin 只有相对于 dist 目录的路径，并不知道该路径将在哪个资源中使用，从而无法确定最终正确的路径</p><p>面对这种情况，需要依靠 webpack 的配置 publicPath 解决</p><p>比如有如下配置：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">HtmlWebpackPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;html-webpack-plugin&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">  <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">  <span class="attr">output</span>: &#123;</span><br><span class="line">    <span class="attr">filename</span>: <span class="string">&quot;scripts/[name].[chunkhash:5].js&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">module</span>: &#123;</span><br><span class="line">    <span class="attr">rules</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">test</span>: <span class="regexp">/\.(png)|(gif)|(jpg)$/</span>,</span><br><span class="line">        <span class="attr">use</span>: [</span><br><span class="line">          &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&quot;file-loader&quot;</span>,</span><br><span class="line">            <span class="attr">options</span>: &#123;</span><br><span class="line">              <span class="attr">name</span>: <span class="string">&quot;imgs/[name].[hash:5].[ext]&quot;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">          &#125;,</span><br><span class="line">        ],</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HtmlWebpackPlugin</span>(&#123;</span><br><span class="line">      <span class="attr">template</span>: <span class="string">&quot;./public/index.html&quot;</span>,</span><br><span class="line">      <span class="attr">filename</span>: <span class="string">&quot;html/index.html&quot;</span>,</span><br><span class="line">    &#125;),</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">devServer</span>: &#123;</span><br><span class="line">    <span class="attr">open</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">openPage</span>: <span class="string">&quot;html/index.html&quot;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>此时没有配置 publicPath，我们最终打包生成的目录如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">dist</span></span><br><span class="line"><span class="string">|——</span> <span class="string">img</span></span><br><span class="line"><span class="string">|——</span> <span class="string">a.png</span></span><br><span class="line"><span class="string">|——</span> <span class="string">scripts</span></span><br><span class="line"><span class="string">|——</span> <span class="string">main.js</span></span><br><span class="line"><span class="string">|——</span> <span class="string">html</span></span><br><span class="line"><span class="string">|——</span> <span class="string">index.html</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- index.html --&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- index.html中正确的引用了index.js的路径 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>webpack<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;../scripts/main.43a64.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时候，如果访问 html&#x2F;index.html 可以正确访问到 index.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> png <span class="keyword">from</span> <span class="string">&quot;./assets/webpack.png&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(png);</span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>);</span><br><span class="line">img.<span class="property">src</span> = png;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img);</span><br></pre></td></tr></table></figure><p>index.js 引入的 img 是一个相对路径的地址，当网络请求 img 图片时，会出现这种情况：</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-%E5%B8%B8%E7%94%A8%E6%89%A9%E5%B1%95/image-20240914155044302.png" alt="image-20240914155044302"></p><p>我们访问 html 下的 index.html 时，main.js 中引用的图片时相对与 html 路径的，此时就出现了无法访问到图片的情况。</p><p>下面我说说 publicPath 的实际用途，publicPath 顾名思义，就是一个公共路径，就是一个字符串，它在 webpack 本身中并没有什么实际的用途，但是在某些 loader 或者 plugin 中，在拼接路径时，如果配置了 publicPath，那么就会在路径前加上 publicPath。</p><ul><li>没有配置 publicPath，HtmlWebpackPlugin 按照..&#x2F;script&#x2F;main.js 的相对路径来引用 js 文件，正确的找到最终打包的 main.js 的位置</li><li>配置了 publicPath 为空字符串“”，此时 HtmlWebpackPlugin 就会在配置的路径前面拼接上我们配置的空字符串，按照 script&#x2F;main.js 的相对路径来引用 js 文件，无法找到 js 文件</li><li>配置了 publicPath 为”&#x2F;“，此时 HtmlWebpackPlugin 就会按照&#x2F;script&#x2F;main.js 的绝对路径来引用 js 文件，能够找到 js 文件，而且 js 中引用的图片，也是按照 &#x2F;imgs&#x2F;webpack.jpg 绝对路径来请求文件，也能够请求到图片</li></ul><p><strong>一般情况下，我们配置 output.publicPath 为“&#x2F;”即可</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">output</span>: &#123;</span><br><span class="line">  <span class="attr">filename</span>: <span class="string">&quot;scripts/[name].[chunkhash:5].js&quot;</span>;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&quot;/&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="webpack-内置插件"><a href="#webpack-内置插件" class="headerlink" title="webpack 内置插件"></a>webpack 内置插件</h2><p>所有的 webpack 内置插件都作为 webpack 的静态属性存在的，使用下面的方式即可创建一个插件对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> webpack = <span class="built_in">require</span>(<span class="string">&quot;webpack&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> webpack.插件名(options);</span><br></pre></td></tr></table></figure><h3 id="DefinePlugin"><a href="#DefinePlugin" class="headerlink" title="DefinePlugin"></a>DefinePlugin</h3><p>全局常量定义插件，使用该插件通常定义一些常量值，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.<span class="title class_">DefinePlugin</span>(&#123;</span><br><span class="line">  <span class="attr">PI</span>: <span class="string">`Math.PI`</span>, <span class="comment">// PI = Math.PI</span></span><br><span class="line">  <span class="attr">VERSION</span>: <span class="string">`&quot;1.0.0&quot;`</span>, <span class="comment">// VERSION = &quot;1.0.0&quot;</span></span><br><span class="line">  <span class="attr">DOMAIN</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(<span class="string">&quot;duyi.com&quot;</span>),</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样一来，在源码中，我们可以直接使用插件中提供的常量，当 webpack 编译完成后，会自动替换为常量的值</p><h3 id="BannerPlugin"><a href="#BannerPlugin" class="headerlink" title="BannerPlugin"></a>BannerPlugin</h3><p>它可以为每个 chunk 生成的文件头部添加一行注释，一般用于添加作者、公司、版权等信息</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.<span class="title class_">BannerPlugin</span>(&#123;</span><br><span class="line">  <span class="attr">banner</span>: <span class="string">`</span></span><br><span class="line"><span class="string">  hash:[hash]</span></span><br><span class="line"><span class="string">  chunkhash:[chunkhash]</span></span><br><span class="line"><span class="string">  name:[name]</span></span><br><span class="line"><span class="string">  author:yuanjin</span></span><br><span class="line"><span class="string">  corporation:duyi</span></span><br><span class="line"><span class="string">  `</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="ProvidePlugin"><a href="#ProvidePlugin" class="headerlink" title="ProvidePlugin"></a>ProvidePlugin</h3><p>自动加载模块，而不必到处 import 或 require</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> webpack.<span class="title class_">ProvidePlugin</span>(&#123;</span><br><span class="line">  <span class="attr">$</span>: <span class="string">&quot;jquery&quot;</span>,</span><br><span class="line">  <span class="attr">_</span>: <span class="string">&quot;lodash&quot;</span>,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们在源码中可以直接使用，而不需要再次导入</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">&quot;#item&quot;</span>); <span class="comment">// &lt;= 起作用</span></span><br><span class="line">_.<span class="title function_">drop</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>], <span class="number">2</span>); <span class="comment">// &lt;= 起作用</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-loader</title>
      <link href="/posts/f77f15dd/"/>
      <url>/posts/f77f15dd/</url>
      
        <content type="html"><![CDATA[<h2 id="Loader简介"><a href="#Loader简介" class="headerlink" title="Loader简介"></a>Loader简介</h2><p>webpack做的事情，仅仅是分析出各种模块的依赖关系，然后形成资源列表，最终打包生成到指定的文件中。<br>更多的功能需要借助webpack loaders和webpack plugins完成。</p><p>loader本质上是一个函数，它的作用是将某个源码字符串转换成另一个源码字符串返回。</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-loader/image-20240912231533718.png" alt="image-20240912231533718"></p><p>loader函数的将在模块解析的过程中被调用，以得到最终的源码。</p><h3 id="全流程"><a href="#全流程" class="headerlink" title="全流程"></a>全流程</h3><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-loader/image-20240912231739424.png" alt="image-20240912231739424"></p><h3 id="chunk中解析模块的流程"><a href="#chunk中解析模块的流程" class="headerlink" title="chunk中解析模块的流程"></a>chunk中解析模块的流程</h3><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-loader/image-20240912231819059.png" alt="image-20240912231819059"></p><h3 id="chunk中解析模块的更详细流程"><a href="#chunk中解析模块的更详细流程" class="headerlink" title="chunk中解析模块的更详细流程"></a>chunk中解析模块的更详细流程</h3><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-loader/image-20240912231920904.png" alt="image-20240912231920904"></p><h3 id="处理loaders的流程"><a href="#处理loaders的流程" class="headerlink" title="处理loaders的流程"></a>处理loaders的流程</h3><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-loader/image-20240912232004677.png" alt="image-20240912232004677"></p><h3 id="loader配置："><a href="#loader配置：" class="headerlink" title="loader配置："></a>loader配置：</h3><h4 id="完整配置"><a href="#完整配置" class="headerlink" title="完整配置"></a>完整配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123; <span class="comment">//针对模块的配置，目前版本只有两个配置，rules、noParse</span></span><br><span class="line">        <span class="attr">rules</span>: [ <span class="comment">//模块匹配规则，可以存在多个规则</span></span><br><span class="line">            &#123; <span class="comment">//每个规则是一个对象</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="comment">//匹配的模块正则</span></span><br><span class="line">                <span class="attr">use</span>: [ <span class="comment">//匹配到后应用的规则模块</span></span><br><span class="line">                    &#123;  <span class="comment">//其中一个规则</span></span><br><span class="line">                        <span class="attr">loader</span>: <span class="string">&quot;模块路径&quot;</span>, <span class="comment">//loader模块的路径，该字符串会被放置到require中</span></span><br><span class="line">                        <span class="attr">options</span>: &#123; <span class="comment">//向对应loader传递的额外参数</span></span><br><span class="line"></span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="简化配置"><a href="#简化配置" class="headerlink" title="简化配置"></a>简化配置</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">module</span>: &#123; <span class="comment">//针对模块的配置，目前版本只有两个配置，rules、noParse</span></span><br><span class="line">        <span class="attr">rules</span>: [ <span class="comment">//模块匹配规则，可以存在多个规则</span></span><br><span class="line">            &#123; <span class="comment">//每个规则是一个对象</span></span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.js$/</span>, <span class="comment">//匹配的模块正则</span></span><br><span class="line">                <span class="attr">use</span>: [<span class="string">&quot;模块路径1&quot;</span>, <span class="string">&quot;模块路径2&quot;</span>]<span class="comment">//loader模块的路径，该字符串会被放置到require中</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义Loader-1"><a href="#自定义Loader-1" class="headerlink" title="自定义Loader(1)"></a>自定义Loader(1)</h2><p>我们来实现一个自定义的loader</p><p>实现功能：将写好的css样式添加到页面</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|-- dist</span></span><br><span class="line"><span class="string">|-- index.html  // 写好的html页面，引用编译好的js文档</span></span><br><span class="line"><span class="string">|-- main.js</span></span><br><span class="line"><span class="string">|-- loaders  // 存放自定义的loader</span></span><br><span class="line"><span class="string">|-- style-loader.js  // 我们要写的loader</span></span><br><span class="line"><span class="string">|-- src</span></span><br><span class="line"><span class="string">|-- assets</span></span><br><span class="line"><span class="string">|-- index.css  // 简单写的一个css样式</span></span><br><span class="line"><span class="string">|-- index.js  // 导入css样式</span></span><br><span class="line"><span class="string">|-- package-lock.json</span></span><br><span class="line"><span class="string">|-- package.json</span></span><br><span class="line"><span class="string">|-- webpack.config.js  // webpack配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">// index.html</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> content = <span class="built_in">require</span>(<span class="string">&quot;./assets/index.css&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(content); <span class="comment">// css的源码字符串</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.css</span></span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    <span class="attr">background</span>: #<span class="number">333</span>;</span><br><span class="line">    <span class="attr">color</span>: #fff;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// style-loader.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">function</span> (<span class="params">sourceCode</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> code = <span class="string">`var style = document.createElement(&quot;style&quot;);</span></span><br><span class="line"><span class="string">    style.innerHTML = \`<span class="subst">$&#123;sourceCode&#125;</span>\`;</span></span><br><span class="line"><span class="string">    document.head.appendChild(style);</span></span><br><span class="line"><span class="string">    module.exports = \`<span class="subst">$&#123;sourceCode&#125;</span>\``</span>;</span><br><span class="line">    <span class="keyword">return</span> code;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [&#123;</span><br><span class="line">            <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">            <span class="attr">use</span>: [<span class="string">&quot;./loaders/style-loader&quot;</span>]</span><br><span class="line">        &#125;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;test&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;dependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.94.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h3><p>1、在入口文件index.js中导入了写好的css文件index.css</p><p>2、webpack从入口文件开始分析代码，获取依赖</p><p>3、webpack发现导入了一个css文件（index.css），这个css文件需要loader处理，将这个文件的源代码作为参数传递给style-loader.js中的函数进行处理；</p><p>4、style-loader.js中的函数，创建了一个style标签，将我们写好的css样式添加到style标签中，并将标签追加到html页面的head中，最后，将css中的源样式进行了导出</p><p>接下来，让我们看看最终的编译结果，main.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// main.js</span></span><br><span class="line"></span><br><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">    <span class="string">&quot;./src/assets/index.css&quot;</span>: <span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">eval</span>(</span><br><span class="line">        <span class="string">&#x27;var style = document.createElement(&quot;style&quot;);\n    style.innerHTML = `body&#123;\n    background: red;\n    color: #fff;\n&#125;\n`;\n    document.head.appendChild(style);\n    module.exports = `body&#123;\n    background: red;\n    color: #fff;\n&#125;\n`\n\n//# sourceURL=webpack://test/./src/assets/index.css?&#x27;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;./src/index.js&quot;</span>: <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">      __unused_webpack_module,</span></span></span><br><span class="line"><span class="params"><span class="function">      __unused_webpack_exports,</span></span></span><br><span class="line"><span class="params"><span class="function">      __webpack_require__</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">eval</span>(</span><br><span class="line">        <span class="string">&#x27;var content = __webpack_require__(/*! ./assets/index.css */ &quot;./src/assets/index.css&quot;)\n\nconsole.log(content); //css的源码字符串\r\n\n\n//# sourceURL=webpack://test/./src/index.js?&#x27;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">/************************************************************************/</span></span><br><span class="line">  <span class="comment">// The module cache</span></span><br><span class="line">  <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The require function</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">__webpack_require__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line">    <span class="comment">// Check if module is in cache</span></span><br><span class="line">    <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">    <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable language_">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">      <span class="comment">// no module.id needed</span></span><br><span class="line">      <span class="comment">// no module.loaded needed</span></span><br><span class="line">      <span class="attr">exports</span>: &#123;&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute the module function</span></span><br><span class="line">    __webpack_modules__[moduleId](<span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, __webpack_require__);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/************************************************************************/</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// startup</span></span><br><span class="line">  <span class="comment">// Load entry module and return exports</span></span><br><span class="line">  <span class="comment">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class="line">  <span class="keyword">var</span> __webpack_exports__ = <span class="title function_">__webpack_require__</span>(<span class="string">&quot;./src/index.js&quot;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="编译结果分析"><a href="#编译结果分析" class="headerlink" title="编译结果分析"></a>编译结果分析</h3><p>main.js从入口文件index.js开始执行，发现存在index.css模块，执行index.css模块的代码，将style元素追加到了head中，并且导出了源样式，执行结束后继续执行index.js中的代码，输出index.css中导出的源样式</p><h3 id="最终效果"><a href="#最终效果" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-loader/image-20240913002531606.png" alt="image-20240913002531606"></p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-loader/image-20240913002604622.png" alt="image-20240913002604622"></p><h2 id="自定义Loader-2"><a href="#自定义Loader-2" class="headerlink" title="自定义Loader(2)"></a>自定义Loader(2)</h2><p>我们再来实现一个自定义的loader</p><p>实现功能：我们在js文件中引入图片时，如果图片大小小于指定值，则将图片转换为base64格式，如果图片大于指定值，则输出图片路径</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|-- dist</span></span><br><span class="line"><span class="string">|-- index.html  // 写好的html页面，引用编译好的js文档</span></span><br><span class="line"><span class="string">|-- main.js</span></span><br><span class="line"><span class="string">|-- loaders  // 存放自定义的loader</span></span><br><span class="line"><span class="string">|-- style-loader.js  // 我们要写的loader</span></span><br><span class="line"><span class="string">|-- img-loader.js // 我们要写的loader</span></span><br><span class="line"><span class="string">|-- src</span></span><br><span class="line"><span class="string">|-- assets</span></span><br><span class="line"><span class="string">|-- index.css  // 简单写的一个css样式</span></span><br><span class="line"><span class="string">|-- webpack.png  // 准备导入的图片</span></span><br><span class="line"><span class="string">|-- index.js  // 导入图片，并将图片追加在页面上</span></span><br><span class="line"><span class="string">|-- package-lock.json</span></span><br><span class="line"><span class="string">|-- package.json</span></span><br><span class="line"><span class="string">|-- webpack.config.js  // webpack配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> src = <span class="built_in">require</span>(<span class="string">&quot;./assets/webpack.png&quot;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(src);</span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&quot;img&quot;</span>)</span><br><span class="line">img.<span class="property">src</span> = src;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(img);</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// img-loader.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这段代码里使用了一个额外的包loader-utils，用于获取给load添加的配置options和拼接文件名</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> loaderUtil = <span class="built_in">require</span>(<span class="string">&quot;loader-utils&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">loader</span>(<span class="params">buffer</span>) &#123; <span class="comment">//给的是buffer</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;文件数据大小：(字节)&quot;</span>, buffer.<span class="property">byteLength</span>);</span><br><span class="line">    <span class="keyword">var</span> &#123; limit = <span class="number">1000</span>, filename = <span class="string">&quot;[contenthash].[ext]&quot;</span> &#125; = loaderUtil.<span class="title function_">getOptions</span>(<span class="variable language_">this</span>);</span><br><span class="line">    <span class="keyword">if</span> (buffer.<span class="property">byteLength</span> &gt;= limit) &#123;</span><br><span class="line">        <span class="keyword">var</span> content = getFilePath.<span class="title function_">call</span>(<span class="variable language_">this</span>, buffer, filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> content = <span class="title function_">getBase64</span>(buffer)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`module.exports = \`<span class="subst">$&#123;content&#125;</span>\``</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">loader.<span class="property">raw</span> = <span class="literal">true</span>; <span class="comment">// 该loader要处理的是原始数据</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = loader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getBase64</span>(<span class="params">buffer</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;data:image/png;base64,&quot;</span> + buffer.<span class="title function_">toString</span>(<span class="string">&quot;base64&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getFilePath</span>(<span class="params">buffer, name</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> filename = loaderUtil.<span class="title function_">interpolateName</span>(<span class="variable language_">this</span>, name, &#123;</span><br><span class="line">        <span class="attr">content</span>: buffer</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="variable language_">this</span>.<span class="title function_">emitFile</span>(filename, buffer);</span><br><span class="line">    <span class="keyword">return</span> filename;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">module</span>: &#123;</span><br><span class="line">        <span class="attr">rules</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">test</span>: <span class="regexp">/\.(png)|(jpg)|(gif)$/</span>, <span class="attr">use</span>: [&#123;</span><br><span class="line">                    <span class="attr">loader</span>: <span class="string">&quot;./loaders/img-loader.js&quot;</span>,</span><br><span class="line">                    <span class="attr">options</span>: &#123;</span><br><span class="line">                        <span class="attr">limit</span>: <span class="number">3000</span>, <span class="comment">//3000字节以上使用图片，3000字节以内使用base64</span></span><br><span class="line">                        <span class="attr">filename</span>: <span class="string">&quot;img-[contenthash:5].[ext]&quot;</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;]</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;name&quot;</span>: <span class="string">&quot;test&quot;</span>,</span><br><span class="line">  <span class="string">&quot;version&quot;</span>: <span class="string">&quot;1.0.0&quot;</span>,</span><br><span class="line">  <span class="string">&quot;description&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;main&quot;</span>: <span class="string">&quot;index.js&quot;</span>,</span><br><span class="line">  <span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;test&quot;</span>: <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">&quot;author&quot;</span>: <span class="string">&quot;&quot;</span>,</span><br><span class="line">  <span class="string">&quot;license&quot;</span>: <span class="string">&quot;ISC&quot;</span>,</span><br><span class="line">  <span class="string">&quot;devDependencies&quot;</span>: &#123;</span><br><span class="line">    <span class="string">&quot;loader-utils&quot;</span>: <span class="string">&quot;^1.2.3&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack&quot;</span>: <span class="string">&quot;^5.94.0&quot;</span>,</span><br><span class="line">    <span class="string">&quot;webpack-cli&quot;</span>: <span class="string">&quot;^5.1.4&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="最终效果-1"><a href="#最终效果-1" class="headerlink" title="最终效果"></a>最终效果</h3><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-loader/image-20240913144757705.png" alt="image-20240913144757705"></p><p>接着将webpack.config.js中的配置大小改成10000，即10K</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-loader/image-20240913144918238.png" alt="image-20240913144918238"></p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack进阶-plugin</title>
      <link href="/posts/a142c03f/"/>
      <url>/posts/a142c03f/</url>
      
        <content type="html"><![CDATA[<h2 id="plugin简介"><a href="#plugin简介" class="headerlink" title="plugin简介"></a>plugin简介</h2><p>loader的功能定位是转换代码，而一些其他的操作难以使用loader完成，比如：</p><ul><li>当webpack生成文件时，顺便多生成一个说明描述文件</li><li>当webpack编译启动时，控制台输出一句话表示webpack启动了</li><li>当xxxx时，xxxx</li></ul><p>这种类似的功能需要把功能嵌入到webpack的编译流程中，而这种事情的实现是依托于plugin的</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-plugin/image-20240913152346239.png" alt="image-20240913152346239"></p><p>plugin的<strong>本质</strong>是一个带有apply方法的对象</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> plugin = &#123;</span><br><span class="line">    <span class="attr">apply</span>: <span class="keyword">function</span>(<span class="params">compiler</span>)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通常，习惯上，我们会将该对象写成构造函数的模式</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPlugin</span>&#123;</span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">compiler</span>)&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> plugin = <span class="keyword">new</span> <span class="title class_">MyPlugin</span>();</span><br></pre></td></tr></table></figure><p>要将插件应用到webpack，需要把插件对象配置到webpack的plugins数组中，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">plugins</span>:[</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">MyPlugin</span>()</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>apply函数会在初始化阶段，创建好Compiler对象后运行。</p><p>compiler对象是在初始化阶段构建的，整个webpack打包期间只有一个compiler对象，后续完成打包工作的是compiler对象内部创建的compilation</p><p>apply方法会在<strong>创建好compiler对象后调用</strong>，并向方法传入一个compiler对象</p><p><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-plugin/image-20240913152415283.png" alt="image-20240913152415283"></p><p>compiler对象提供了大量的钩子函数（hooks，可以理解为事件），plugin的开发者可以注册这些钩子函数，参与webpack编译和生成。</p><p>你可以在apply方法中使用下面的代码注册钩子函数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyPlugin</span>&#123;</span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">compiler</span>)&#123;</span><br><span class="line">        compiler.<span class="property">hooks</span>.事件名称.事件类型(name, <span class="keyword">function</span>(<span class="params">compilation</span>)&#123;</span><br><span class="line">            <span class="comment">//事件处理函数</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>事件名称</strong></p><p>即要监听的事件名，即钩子名，所有的钩子：<a href="https://www.webpackjs.com/api/compiler-hooks">https://www.webpackjs.com/api/compiler-hooks</a></p><p><strong>事件类型</strong></p><p>这一部分使用的是 Tapable API，这个小型的库是一个专门用于钩子函数监听的库。</p><p>它提供了一些事件类型：</p><ul><li>tap：注册一个同步的钩子函数，函数运行完毕则表示事件处理结束</li><li>tapAsync：注册一个基于回调的异步的钩子函数，函数通过调用一个回调表示事件处理结束</li><li>tapPromise：注册一个基于Promise的异步的钩子函数，函数通过返回的Promise进入已决状态表示事件处理结束</li></ul><p><strong>处理函数</strong></p><p>处理函数有一个事件参数<code>compilation</code></p><h2 id="自定义plugin"><a href="#自定义plugin" class="headerlink" title="自定义plugin"></a>自定义plugin</h2><p>实现功能：将由webpack编译生成的文件，输出到一个filelist.txt文件中，格式如下：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[文件名]</span></span><br><span class="line">大小：文件大小</span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[文件名]</span></span><br><span class="line">大小：文件大小</span><br></pre></td></tr></table></figure><p>项目结构：</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|-- plugins  // 存放自定义的loader</span></span><br><span class="line"><span class="string">|-- FileListPlugin.js  // 我们要写的loader</span></span><br><span class="line"><span class="string">|-- src</span></span><br><span class="line">  <span class="string">|-- a.js</span></span><br><span class="line"><span class="string">|-- index.js</span></span><br><span class="line"><span class="string">|-- package-lock.json</span></span><br><span class="line"><span class="string">|-- package.json</span></span><br><span class="line"><span class="string">|-- webpack.config.js  // webpack配置文件</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// index.js</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;./a&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is a&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// FileListPlugin.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">FileListPlugin</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">filename = <span class="string">&quot;filelist.txt&quot;</span></span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">filename</span> = filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">apply</span>(<span class="params">compiler</span>) &#123;</span><br><span class="line">        compiler.<span class="property">hooks</span>.<span class="property">emit</span>.<span class="title function_">tap</span>(<span class="string">&quot;FileListPlugin&quot;</span>, <span class="function"><span class="params">complation</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">var</span> fileList = [];</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">const</span> key <span class="keyword">in</span> complation.<span class="property">assets</span>) &#123;</span><br><span class="line">                <span class="keyword">var</span> content = <span class="string">`【<span class="subst">$&#123;key&#125;</span>】\n大小：<span class="subst">$&#123;complation.assets[key].size()/<span class="number">1024</span>&#125;</span>KB`</span>;</span><br><span class="line">                fileList.<span class="title function_">push</span>(content);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> str = fileList.<span class="title function_">join</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">            complation.<span class="property">assets</span>[<span class="variable language_">this</span>.<span class="property">filename</span>] = &#123;</span><br><span class="line">                <span class="title function_">source</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> str</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="title function_">size</span>(<span class="params"></span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> str.<span class="property">length</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// webpack.config.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">FileListPlugin</span> = <span class="built_in">require</span>(<span class="string">&quot;./plugins/FileListPlugin&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&quot;development&quot;</span>,</span><br><span class="line">    <span class="attr">devtool</span>: <span class="string">&quot;source-map&quot;</span>,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FileListPlugin</span>(<span class="string">&quot;文件列表.md&quot;</span>)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>最终效果</strong><br><img src="/./assets/webpack%E8%BF%9B%E9%98%B6-plugin/image-20240913153549313.png" alt="image-20240913153549313"></p>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webpack原理及基础配置</title>
      <link href="/posts/4edc021/"/>
      <url>/posts/4edc021/</url>
      
        <content type="html"><![CDATA[<h2 id="一、webpack出现的原因"><a href="#一、webpack出现的原因" class="headerlink" title="一、webpack出现的原因"></a>一、webpack出现的原因</h2><h3 id="浏览器端的模块化"><a href="#浏览器端的模块化" class="headerlink" title="浏览器端的模块化"></a>浏览器端的模块化</h3><p>问题：</p><ul><li>效率问题：精细的模块划分带来了更多的JS文件，更多的JS文件带来了更多的请求，降低了页面访问效率</li><li>兼容性问题：浏览器目前仅支持ES6的模块化标准，并且还存在兼容性问题</li><li>工具问题：浏览器不支持npm下载的第三方包</li></ul><p>这些仅仅是前端工程化的一个缩影</p><p>当开发一个具有规模的程序，你将遇到非常多的非业务问题，这些问题包括：执行效率、兼容性、代码的可维护性可扩展性、团队协作、测试等等等等，我们将这些问题称之为工程问题。工程问题与业务无关，但它深刻的影响到开发进度，如果没有一个好的工具解决这些问题，将使得开发进度变得极其缓慢，同时也让开发者陷入技术的泥潭。</p><h3 id="根本原因"><a href="#根本原因" class="headerlink" title="根本原因"></a>根本原因</h3><p>思考：上面提到的问题，为什么在node端没有那么明显，反而到了浏览器端变得如此严重呢？</p><p>答：在node端，运行的JS文件在本地，因此可以本地读取文件，它的效率比浏览器远程传输文件高的多</p><p><strong>根本原因</strong>：在浏览器端，开发时态（devtime）和运行时态（runtime）的侧重点不一样</p><p><strong>开发时态，devtime：</strong></p><ol><li>模块划分越细越好</li><li>支持多种模块化标准</li><li>支持npm或其他包管理器下载的模块</li><li>能够解决其他工程化的问题</li></ol><p><strong>运行时态，runtime：</strong></p><ol><li>文件越少越好</li><li>文件体积越小越好</li><li>代码内容越乱越好</li><li>所有浏览器都要兼容</li><li>能够解决其他运行时的问题，主要是执行效率问题</li></ol><p>这种差异在小项目中表现的并不明显，可是一旦项目形成规模，就越来越明显，如果不解决这些问题，前端项目形成规模只能是空谈</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>既然开发时态和运行时态面临的局面有巨大的差异，因此，我们需要有一个工具，这个工具能够让开发者专心的在开发时态写代码，然后利用这个工具将开发时态编写的代码转换为运行时态需要的东西。</p><p>这样的工具，叫做<strong>构建工具</strong></p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910092338192.png" alt="image-20240910092338192"></p><p>这样一来，开发者就可以专注于开发时态的代码结构，而不用担心运行时态遇到的问题了。</p><h3 id="常见的构建工具"><a href="#常见的构建工具" class="headerlink" title="常见的构建工具"></a>常见的构建工具</h3><ul><li><strong>webpack</strong></li><li>grunt</li><li>gulp</li><li>browserify</li><li>fis</li><li>其他</li></ul><h2 id="二、webpack简介"><a href="#二、webpack简介" class="headerlink" title="二、webpack简介"></a>二、webpack简介</h2><p>webpack是基于模块化的打包（构建）工具，它把一切视为模块</p><p>它通过一个开发时态的入口模块为起点，分析出所有的依赖关系，然后经过一系列的过程（压缩、合并），最终生成运行时态的文件。</p><p>webpack的特点：</p><ul><li><strong>为前端工程化而生</strong>：webpack致力于解决前端工程化，特别是浏览器端工程化中遇到的问题，让开发者集中注意力编写业务代码，而把工程化过程中的问题全部交给webpack来处理</li><li><strong>简单易用</strong>：支持零配置，可以不用写任何一行额外的代码就使用webpack</li><li><strong>强大的生态</strong>：webpack是非常灵活、可以扩展的，webpack本身的功能并不多，但它提供了一些可以扩展其功能的机制，使得一些第三方库可以融于到webpack中</li><li><strong>基于nodejs</strong>：由于webpack在构建的过程中需要读取文件，因此它是运行在node环境中的</li><li><strong>基于模块化</strong>：webpack在构建过程中要分析依赖关系，方式是通过模块化导入语句进行分析的，它支持各种模块化标准，包括但不限于CommonJS、ES6 Module</li></ul><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910092259819.png" alt="image-20240910092338191"></p><h2 id="三、webpack安装"><a href="#三、webpack安装" class="headerlink" title="三、webpack安装"></a>三、webpack安装</h2><p>webpack通过npm安装，它提供了两个包：</p><ul><li>webpack：核心包，包含了webpack构建过程中要用到的所有api</li><li>webpack-cli：提供一个简单的cli命令，它调用了webpack核心包的api，来完成构建过程</li></ul><p>安装方式：</p><ul><li>全局安装：可以全局使用webpack命令，但是无法为不同项目对应不同的webpack版本</li><li><strong>本地安装</strong>：推荐，每个项目都使用自己的webpack版本进行构建</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">初始化npm</span></span><br><span class="line">npm init</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装</span></span><br><span class="line">npm i -D webpack webpack-cli</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用</span></span><br><span class="line">npx webpack</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">npx说明：npx是npm自5.2.0版本引入的命令，用于执行npm包中的可执行文件，如果不使用npx，则需要在package.json的scripts属性中书写相关命令，使用 npm run 进行执行</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认情况下，webpack会以`./src/index.js`作为入口文件分析依赖关系，打包到`./dist/main.js`文件中</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过--mode选项可以控制webpack的打包结果的运行环境</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">development：开发环境，默认开启<span class="built_in">source</span> map，不压缩代码，方便开发调试</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">production：生产环境，默认关闭<span class="built_in">source</span> map，会压缩代码，减少文件体积，提升加载性能</span></span><br></pre></td></tr></table></figure><h2 id="四、webpack编译结果分析"><a href="#四、webpack编译结果分析" class="headerlink" title="四、webpack编译结果分析"></a>四、webpack编译结果分析</h2><h3 id="初始化的项目结构"><a href="#初始化的项目结构" class="headerlink" title="初始化的项目结构"></a>初始化的项目结构</h3><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|-- webpack</span></span><br><span class="line"><span class="string">|-- node_modules</span></span><br><span class="line"><span class="string">|-- src</span></span><br><span class="line"><span class="string">|-- a.js</span></span><br><span class="line"><span class="string">|-- index.js</span></span><br><span class="line"><span class="string">|--package-lock.json</span></span><br><span class="line"><span class="string">|--package.json</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/a.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;this is a&quot;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="string">&quot;a&quot;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello, Webpack&quot;</span>);</span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// package.json</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;webpack&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;index.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ISC&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.94.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack-cli&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.4&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="编译后的项目结构"><a href="#编译后的项目结构" class="headerlink" title="编译后的项目结构"></a>编译后的项目结构</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行编译</span></span><br><span class="line">npx webpack --mode=development</span><br></pre></td></tr></table></figure><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|-- webpack</span></span><br><span class="line"><span class="string">|-- dist</span></span><br><span class="line"><span class="string">|-- main.js</span></span><br><span class="line"><span class="string">|-- node_modules</span></span><br><span class="line"><span class="string">|-- src</span></span><br><span class="line"><span class="string">|-- index.js</span></span><br><span class="line"><span class="string">|--package-lock.json</span></span><br><span class="line"><span class="string">|--package.json</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// dist/main.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * ATTENTION: The &quot;eval&quot; devtool has been used (maybe by default in mode: &quot;development&quot;).</span></span><br><span class="line"><span class="comment"> * This devtool is neither made for production nor for readable output files.</span></span><br><span class="line"><span class="comment"> * It uses &quot;eval()&quot; calls to create a separate source file in the browser devtools.</span></span><br><span class="line"><span class="comment"> * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)</span></span><br><span class="line"><span class="comment"> * or disable the default devtool with &quot;devtool: false&quot;.</span></span><br><span class="line"><span class="comment"> * If you are looking for production-ready output files, see mode: &quot;production&quot; (https://webpack.js.org/configuration/mode/).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/******/</span> (<span class="function">() =&gt;</span> &#123; <span class="comment">// webpackBootstrap</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_modules__ = (&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/a.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!******************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/a.js ***!</span></span><br><span class="line"><span class="comment">  \******************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;console.log(\&quot;this is a\&quot;);\r\nmodule.exports = &#123;\r\n  a: \&quot;a\&quot;,\r\n&#125;;\r\n\n\n//# sourceURL=webpack://webpack/./src/a.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;),</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> <span class="string">&quot;./src/index.js&quot;</span>:</span><br><span class="line"><span class="comment">/*!**********************!*\</span></span><br><span class="line"><span class="comment">  !*** ./src/index.js ***!</span></span><br><span class="line"><span class="comment">  \**********************/</span></span><br><span class="line"><span class="comment">/***/</span> (<span class="function">(<span class="params">__unused_webpack_module, __unused_webpack_exports, __webpack_require__</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__webpack_require__(/*! ./a */ \&quot;./src/a.js\&quot;);\r\nconsole.log(\&quot;Hello, Webpack\&quot;);\r\n\n\n//# sourceURL=webpack://webpack/./src/index.js?&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/***/</span> &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">/******/</span> &#125;);</span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The module cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// The require function</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">function</span> <span class="title function_">__webpack_require__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Check if module is in cache</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> <span class="variable language_">module</span> = __webpack_module_cache__[moduleId] = &#123;</span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no module.id needed</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// no module.loaded needed</span></span><br><span class="line"><span class="comment">/******/</span> <span class="attr">exports</span>: &#123;&#125;</span><br><span class="line"><span class="comment">/******/</span> &#125;;</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Execute the module function</span></span><br><span class="line"><span class="comment">/******/</span> __webpack_modules__[moduleId](<span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, __webpack_require__);</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Return the exports of the module</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line"><span class="comment">/******/</span> &#125;</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/************************************************************************/</span></span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// startup</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// Load entry module and return exports</span></span><br><span class="line"><span class="comment">/******/</span> <span class="comment">// This entry module can&#x27;t be inlined because the eval devtool is used.</span></span><br><span class="line"><span class="comment">/******/</span> <span class="keyword">var</span> __webpack_exports__ = <span class="title function_">__webpack_require__</span>(<span class="string">&quot;./src/index.js&quot;</span>);</span><br><span class="line"><span class="comment">/******/</span> </span><br><span class="line"><span class="comment">/******/</span> &#125;)()</span><br><span class="line">;</span><br></pre></td></tr></table></figure><h3 id="编译结果分析"><a href="#编译结果分析" class="headerlink" title="编译结果分析"></a>编译结果分析</h3><p>我这里首先删除掉多余的注释后代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">// webpackBootstrap</span></span><br><span class="line">  <span class="keyword">var</span> __webpack_modules__ = &#123;</span><br><span class="line">    <span class="string">&quot;./src/a.js&quot;</span>: <span class="function">(<span class="params"><span class="variable language_">module</span></span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">eval</span>(</span><br><span class="line">        <span class="string">&#x27;console.log(&quot;this is a&quot;);\r\nmodule.exports = &#123;\r\n  a: &quot;a&quot;,\r\n&#125;;\r\n\n\n//# sourceURL=webpack://webpack/./src/a.js?&#x27;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="string">&quot;./src/index.js&quot;</span>: <span class="function">(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">      __unused_webpack_module,</span></span></span><br><span class="line"><span class="params"><span class="function">      __unused_webpack_exports,</span></span></span><br><span class="line"><span class="params"><span class="function">      __webpack_require__</span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">eval</span>(</span><br><span class="line">        <span class="string">&#x27;__webpack_require__(/*! ./a */ &quot;./src/a.js&quot;);\r\nconsole.log(&quot;Hello, Webpack&quot;);\r\n\n\n//# sourceURL=webpack://webpack/./src/index.js?&#x27;</span></span><br><span class="line">      );</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="comment">// The module cache</span></span><br><span class="line">  <span class="keyword">var</span> __webpack_module_cache__ = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// The require function</span></span><br><span class="line">  <span class="keyword">function</span> <span class="title function_">__webpack_require__</span>(<span class="params">moduleId</span>) &#123;</span><br><span class="line">    <span class="comment">// Check if module is in cache</span></span><br><span class="line">    <span class="keyword">var</span> cachedModule = __webpack_module_cache__[moduleId];</span><br><span class="line">    <span class="keyword">if</span> (cachedModule !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> cachedModule.<span class="property">exports</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Create a new module (and put it into the cache)</span></span><br><span class="line">    <span class="keyword">var</span> <span class="variable language_">module</span> = (__webpack_module_cache__[moduleId] = &#123;</span><br><span class="line">      <span class="comment">// no module.id needed</span></span><br><span class="line">      <span class="comment">// no module.loaded needed</span></span><br><span class="line">      <span class="attr">exports</span>: &#123;&#125;,</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Execute the module function</span></span><br><span class="line">    __webpack_modules__[moduleId](<span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>, __webpack_require__);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Return the exports of the module</span></span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> __webpack_exports__ = <span class="title function_">__webpack_require__</span>(<span class="string">&quot;./src/index.js&quot;</span>);</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>代码说明：</strong></p><ol><li>最外层是一个无参数的立即执行函数；</li><li>声明了___webpack_modules___对象</li><li>__webpack_modules__对象有两个属性，”.&#x2F;src&#x2F;a.js”，”.&#x2F;src&#x2F;index.js”，均为函数</li><li>“.&#x2F;src&#x2F;a.js”函数参数为module，内容为eval执行我们原本写的代码，并且在最后位置添加了sourceURL</li><li>“.&#x2F;src&#x2F;a.js”函数参数为__unused_webpack_module__，__unused_webpack_exports__，__webpack_require__，内容为eval执行我们原本写的代码，并且在最后位置添加了sourceURL</li><li>声明了__webpack_module_cache__对象</li><li>声明了__webpack_require__函数，参数为moduleId</li><li>声明了cachedModule对象，从__webpack_module_cache__对象中根据moduleId获取，如果已经存在，则直接返回</li><li>声明了module对象，括号括起来，在javascript中表示立即执行该变量所代表的函数表达式，这里的具体含义为，创建了一个新的对象，其中有exorts属性的空对象，将这个对象赋值给__webpack_module_cache__，同时赋值给module</li><li>执行对应moduleId的module中的代码，传入参数为module，module.exports， __webpack_require__</li><li>返回module.exports</li><li>声明了__webpack_exports__变量，其结果为调用__webpack_require__(“.&#x2F;src&#x2F;index.js”)的结果，这里声明的变量最终并没有什么用处，主要目的是执行__webpack_require__函数</li></ol><p>经过编译后，将我们的代码进行了转换，通过立即执行函数，内部通过加载module，缓存module，执行module等实现了将多模块代码打包成单js文件的目的。</p><p><strong>代码解释：</strong></p><p>首先，创建了立即执行函数，目的是不造成全局污染，并且执行内部代码</p><p>在代码中声明__webpack_require__函数并执行__webpack_require__(“.&#x2F;src&#x2F;index.js”)，从入口文件开始执行代码</p><p>在__webpack_require__中，我们首先从缓存中根据文件路径获取module，如果缓存中有，则返回module的exports，如果没有对应的module，那我们创建一个module，存入到缓存中，并且通过执行对应module的代码，将这段代码的最终执行结果存入到module的exports属性中。</p><p>代码量很少，但代码最终实现的效果是非常强大的，这种思路非常的Nice，很值得学习。</p><h2 id="五、编译过程"><a href="#五、编译过程" class="headerlink" title="五、编译过程"></a>五、编译过程</h2><p>webpack 的作用是将源代码编译（构建、打包）成最终代码</p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910113355520.png" alt="image-20240910113355520"></p><p>整个过程大致分为三个步骤</p><ol><li>初始化</li><li>编译</li><li>输出</li></ol><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910113446030.png" alt="image-20240910113446030"></p><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>此阶段，webpack会将<strong>CLI参数</strong>、<strong>配置文件</strong>、<strong>默认配置</strong>进行融合，形成一个最终的配置对象。</p><p>对配置的处理过程是依托一个第三方库<code>yargs</code>完成的</p><p>此阶段相对比较简单，主要是为接下来的编译阶段做必要的准备</p><p>目前，可以简单的理解为，初始化阶段主要用于产生一个最终的配置</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>1、<strong>创建chunk</strong></p><p>chunk是webpack在内部构建过程中的一个概念，译为<code>块</code>，它表示通过某个入口找到的所有依赖的统称。</p><p>根据入口模块（默认为<code>./src/index.js</code>）创建一个chunk</p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910113635687.png" alt="image-20240910113635687"></p><p>每个chunk都有至少两个属性：</p><ul><li>name：默认为main</li><li>id：唯一编号，开发环境和name相同，生产环境是一个数字，从0开始</li></ul><p>2、<strong>构建所有依赖模块</strong></p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910113716852.png" alt="image-20240910113716852"></p><p>3、<strong>产生chunk assets</strong></p><p>在第二步完成后，chunk中会产生一个模块列表，列表中包含了<strong>模块id</strong>和<strong>模块转换后的代码</strong></p><p>接下来，webpack会根据配置为chunk生成一个资源列表，即<code>chunk assets</code>，资源列表可以理解为是生成到最终文件的文件名和文件内容</p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910113916811.png" alt="image-20240910113916811"></p><blockquote><p>chunk hash是根据所有chunk assets的内容生成的一个hash字符串</p><p>hash：一种算法，具体有很多分类，特点是将一个任意长度的字符串转换为一个固定长度的字符串，而且可以保证原始内容不变，产生的hash字符串就不变</p><p>总共有三个hash：</p><p>hash：所有的chunk合并在一起，产生的总的hash</p><p>chunkhash：单个chunk的内容，产生的hash</p><p>contenthash：单个模块的内容，产生的hash</p></blockquote><p>4、<strong>合并chunk assets</strong></p><p>将多个chunk的assets合并到一起，并产生一个总的hash。</p><p>注：一个chunk最终生成的可能并不止一个文件，除了js文件外，还会包含所依赖的css、jpg等静态资源文件。</p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910114151500.png" alt="image-20240910114151500"></p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>此步骤非常简单，webpack将利用node中的fs模块（文件处理模块），根据编译产生的总的assets，生成相应的文件。</p><h3 id="总过程"><a href="#总过程" class="headerlink" title="总过程"></a>总过程</h3><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910114309828.png" alt="image-20240910114309828"></p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910114320044.png" alt="image-20240910114320044"></p><h3 id="涉及术语"><a href="#涉及术语" class="headerlink" title="涉及术语"></a><strong>涉及术语</strong></h3><ol><li>module：模块，分割的代码单元，webpack中的模块可以是任何内容的文件，不仅限于JS</li><li>chunk：webpack内部构建模块的块，一个chunk中包含多个模块，这些模块是从入口模块通过依赖分析得来的</li><li>bundle：chunk构建好模块后会生成chunk的资源清单，清单中的每一项就是一个bundle，可以认为bundle就是最终生成的文件</li><li>hash：最终的资源清单所有内容联合生成的hash值</li><li>chunkhash：chunk生成的资源清单内容联合生成的hash值</li><li>chunkname：chunk的名称，如果没有配置则使用main</li><li>id：通常指chunk的唯一编号，如果在开发环境下构建，和chunkname相同；如果是生产环境下构建，则使用一个从0开始的数字进行编号</li></ol><h2 id="六、配置文件"><a href="#六、配置文件" class="headerlink" title="六、配置文件"></a>六、配置文件</h2><p>webpack提供的cli支持很多的参数，例如<code>--mode</code>，但更多的时候，我们会使用更加灵活的配置文件来控制webpack的行为</p><p>默认情况下，webpack会读取<code>webpack.config.js</code>文件作为配置文件，但也可以通过CLI参数<code>--config</code>来指定某个配置文件</p><p>配置文件中通过CommonJS模块导出一个对象，对象中的各种属性对应不同的webpack配置</p><p><strong>注意：配置文件中的代码，必须是有效的node代码</strong></p><p>当命令行参数与配置文件中的配置出现冲突时，以命令行参数为准。</p><p><strong>基本配置：</strong></p><ol><li>mode：编译模式，字符串，取值为development或production，指定编译结果代码运行的环境，会影响webpack对编译结果代码格式的处理</li><li>entry：入口，指定入口文件</li><li>output：出口，指定编译结果文件</li></ol><h2 id="七、devtool配置"><a href="#七、devtool配置" class="headerlink" title="七、devtool配置"></a>七、devtool配置</h2><h3 id="source-map-源码地图"><a href="#source-map-源码地图" class="headerlink" title="source map 源码地图"></a>source map 源码地图</h3><blockquote><p>本小节的知识与 webpack 无关</p></blockquote><p>前端发展到现阶段，很多时候都不会直接运行源代码，可能需要对源代码进行合并、压缩、转换等操作，真正运行的是转换后的代码。</p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910115139222.png" alt="image-20240910115139222"></p><p>这就给调试带来了困难，因为当运行发生错误的时候，我们更加希望能看到源代码中的错误，而不是转换后代码的错误，为了解决这一问题，chrome浏览器率先支持了source map，其他浏览器纷纷效仿，目前，几乎所有新版浏览器都支持了source map。</p><p>source map在webpack中实际上只需要开启一个配置，配置开启后，编译生成最终文件时，不仅会生成所有源码内容，还会生成记录了和转换后的代码的对应关系的map文件。</p><p>下面是浏览器处理source map的原理：</p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910115416336.png" alt="image-20240910115416336"></p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910115441132.png" alt="image-20240910115441132"></p><h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><ol><li>source map 应在开发环境中使用，作为一种调试手段。</li><li>source map 不应该在生产环境中使用，source map的文件一般较大，不仅会导致额外的网络传输，还容易暴露原始代码。即便要在生产环境中使用source map，用于调试真实的代码运行问题，也要做出一些处理规避网络传输和代码暴露的问题。</li></ol><h3 id="webpack中的source-map"><a href="#webpack中的source-map" class="headerlink" title="webpack中的source map"></a>webpack中的source map</h3><p>使用 webpack 编译后的代码难以调试，可以通过 devtool 配置来优化调试体验。</p><h2 id="八、入口和出口"><a href="#八、入口和出口" class="headerlink" title="八、入口和出口"></a>八、入口和出口</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>:&#123;</span><br><span class="line">        <span class="attr">pageA</span>: <span class="string">&quot;./src/pageA/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">pageB</span>: <span class="string">&quot;./src/pageB/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">pageC</span>: [<span class="string">&quot;./src/pageC/main1.js&quot;</span>, <span class="string">&quot;./src/pageC/main2.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="comment">// path需要指定绝对路径，使用nodejs的path模块</span></span><br><span class="line">      <span class="attr">path</span>: path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;dist&#x27;</span>)</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;[name].[chunkhash:5].js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="入口"><a href="#入口" class="headerlink" title="入口"></a><strong>入口</strong></h3><p><strong>入口真正配置的是chunk</strong></p><p>入口通过entry进行配置</p><p>entry可以使用字符串，也可以使用数组</p><p>字符串时：单入口文件，最终打包成一个js，最终只执行一个函数，如：__webpack_require__(“.&#x2F;src&#x2F;index.js”)</p><p>数组时：多入口文件，最终打包也是一个js，但最终打包出来的js中，会执行两个__webpack_require__函数</p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910163203776.png" alt="image-20240910163203776"></p><h3 id="出口"><a href="#出口" class="headerlink" title="出口"></a>出口</h3><p>这里的出口是针对资源列表的文件名或路径的配置</p><p>出口通过output进行配置</p><p>规则：</p><ul><li>name：chunkname</li><li>fullhash： 总的资源hash</li><li>chunkhash： chunk文件的hash</li><li>contenthash：module文件内容的hash</li><li>id：使用chunkid，不推荐</li><li>哈希值，可以使用冒号后跟数字，表示将哈希值截取指定位数，如chunkhash:5标识截取chunkhash的前五位</li></ul><h3 id="入口和出口的最佳实践"><a href="#入口和出口的最佳实践" class="headerlink" title="入口和出口的最佳实践"></a>入口和出口的最佳实践</h3><h4 id="一个页面一个JS"><a href="#一个页面一个JS" class="headerlink" title="一个页面一个JS"></a>一个页面一个JS</h4><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910160412406.png" alt="image-20240910160412406"></p><p>源码结构</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|—— src</span></span><br><span class="line">    <span class="string">|—— pageA   页面A的代码目录</span></span><br><span class="line">        <span class="string">|—— index.js 页面A的启动模块</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br><span class="line">    <span class="string">|—— pageB   页面B的代码目录</span></span><br><span class="line">        <span class="string">|—— index.js 页面B的启动模块</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br><span class="line">    <span class="string">|—— pageC   页面C的代码目录</span></span><br><span class="line">        <span class="string">|—— main1.js 页面C的启动模块1 例如：主功能</span></span><br><span class="line">        <span class="string">|—— main2.js 页面C的启动模块2 例如：实现访问统计的额外功能</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br><span class="line">    <span class="string">|—— common  公共代码目录</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br></pre></td></tr></table></figure><p>webpack配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>:&#123;</span><br><span class="line">        <span class="attr">pageA</span>: <span class="string">&quot;./src/pageA/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">pageB</span>: <span class="string">&quot;./src/pageB/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">pageC</span>: [<span class="string">&quot;./src/pageC/main1.js&quot;</span>, <span class="string">&quot;./src/pageC/main2.js&quot;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;[name].[chunkhash:5].js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式适用于页面之间的功能差异巨大、公共代码较少的情况，这种情况下打包出来的最终代码不会有太多重复</p><h4 id="一个页面多个JS"><a href="#一个页面多个JS" class="headerlink" title="一个页面多个JS"></a>一个页面多个JS</h4><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910160446925.png" alt="image-20240910160446925"></p><p>源码结构</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|—— src</span></span><br><span class="line">    <span class="string">|—— pageA   页面A的代码目录</span></span><br><span class="line">        <span class="string">|—— index.js 页面A的启动模块</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br><span class="line">    <span class="string">|—— pageB   页面B的代码目录</span></span><br><span class="line">        <span class="string">|—— index.js 页面B的启动模块</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br><span class="line">    <span class="string">|—— statistics   用于统计访问人数功能目录</span></span><br><span class="line">        <span class="string">|—— index.js 启动模块</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br><span class="line">    <span class="string">|—— common  公共代码目录</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br></pre></td></tr></table></figure><p>webpack配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>:&#123;</span><br><span class="line">        <span class="attr">pageA</span>: <span class="string">&quot;./src/pageA/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">pageB</span>: <span class="string">&quot;./src/pageB/index.js&quot;</span>,</span><br><span class="line">        <span class="attr">statistics</span>: <span class="string">&quot;./src/statistics/index.js&quot;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;[name].[chunkhash:5].js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种方式适用于页面之间有一些<strong>独立</strong>、相同的功能，专门使用一个chunk抽离这部分JS有利于浏览器更好的缓存这部分内容。</p><blockquote><p>思考：为什么不使用多启动模块的方式？</p></blockquote><h4 id="单页应用"><a href="#单页应用" class="headerlink" title="单页应用"></a>单页应用</h4><p>所谓单页应用，是指整个网站（或网站的某一个功能块）只有一个页面，页面中的内容全部靠JS创建和控制。 vue和react都是实现单页应用的利器。</p><p><img src="/./assets/webpack%E5%8E%9F%E7%90%86%E5%8F%8A%E5%9F%BA%E7%A1%80%E9%85%8D%E7%BD%AE/image-20240910160549079.png" alt="image-20240910160549079"></p><p>源码结构</p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">|—— src</span></span><br><span class="line">    <span class="string">|—— subFunc   子功能目录</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br><span class="line">    <span class="string">|—— subFunc   子功能目录</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br><span class="line">    <span class="string">|—— common  公共代码目录</span></span><br><span class="line">        <span class="string">|—— ...</span></span><br><span class="line">    <span class="string">|—— index.js</span></span><br></pre></td></tr></table></figure><p>webpack配置</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">entry</span>: <span class="string">&quot;./src/index.js&quot;</span>,</span><br><span class="line">    <span class="attr">output</span>:&#123;</span><br><span class="line">        <span class="attr">filename</span>:<span class="string">&quot;index.[fullhash:5].js&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端工程化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> webpack </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js基础(六)-标准库</title>
      <link href="/posts/7db5d32e/"/>
      <url>/posts/7db5d32e/</url>
      
        <content type="html"><![CDATA[<h1 id="标准库"><a href="#标准库" class="headerlink" title="标准库"></a>标准库</h1><h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>如果尝试着把原始类型（number、string、boolean）当做对象使用，JS会自动将其转换为对应包装类的实例</p><h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN">Number.NaN</a></td><td>表示一个数学上并不存在的数字</td><td>可以直接书写为<code>NaN</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN">Number.isNaN()</a></td><td>判断传入的值是否是NaN</td><td>可以直接书写为<code>isNaN</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger">Number.isInteger()</a></td><td>判断传入的值是否是整数</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt">Number.parseInt()</a></td><td>把传入的值转换为整数形式返回</td><td>可以直接书写为<code>parseInt()</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat">Number.parseFloat()</a></td><td>把传入的值转换为小数形式返回</td><td>可以直接书写为<code>parseFloat()</code></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">Number.prototype.toFixed()</a></td><td>将当前数字保留指定位数的小数返回</td><td>传入小数位数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/tostring">Number.prototype.toString()</a></td><td>将当前数字转换为字符串返回</td><td>传入进制2-36</td></tr></tbody></table><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode">String.fromCharCode()</a></td><td>根据编码值得到一个字符</td><td>传入一个或多个编码值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length">String.prototype.length</a></td><td>得到字符串的长度</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt">String.prototype.charCodeAt()</a></td><td>得到某个下标的字符编码</td><td>传入下标</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes">String.prototype.includes()</a></td><td>判断当前字符串是否包含某个子串</td><td>传入子串</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">String.prototype.indexOf()</a></td><td>判断某个字符串在当前字符串中的第一个下标位置</td><td>如果没有，返回-1</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf">String.prototype.lastIndexOf()</a></td><td>判断某个字符串在当前字符串中的最后一个下标位置</td><td>如果没有，返回-1</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith">String.prototype.endsWith()</a></td><td>判断某个字符串是否以指定的字符串结束</td><td>传入一个字符串</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith">String.prototype.startsWith()</a></td><td>判断某个字符串是否以指定的字符串开始</td><td>传入一个字符串</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart">String.prototype.padStart()</a></td><td>将当前的字符串按照指定的字符在字符串开始位置填充到指定的位数，返回填充后的字符串</td><td>传入位数、填充字符</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd">String.prototype.padEnd()</a></td><td>将当前的字符串按照指定的字符在字符串结束位置填充到指定的位数，返回填充后的字符串</td><td>传入位数、填充字符</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split">String.prototype.split()</a></td><td>把当前字符串按照某个字符串分割成一个字符串数组返回</td><td>传入分隔符</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring">String.prototype.substring()</a></td><td>返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集</td><td>传入开始字符、结束字符</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim">String.prototype.trim()</a></td><td>从字符串的两端删除空白字符，返回新字符串</td><td>无参数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart">String.prototype.trimStart()</a></td><td>从字符串的开头删除空白字符，返回新字符串</td><td>无参数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd">String.prototype.trimEnd()</a></td><td>从字符串的末端删除空白字符，返回新字符串</td><td>无参数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase">String.prototype.toUpperCase()</a></td><td>将调用该方法的字符串转为大写形式并返回</td><td>无参数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase">String.prototype.toLowerCase()</a></td><td>将调用该方法的字符串转为小写形式并返回</td><td>无参数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">String.prototype.replace()</a></td><td>替换字符串中的第一个对应字符为新字符</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replaceall">String.prototype.replaceAll()</a></td><td>替换字符串中的所有对应字符为新字符</td><td></td></tr></tbody></table><h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/PI">Math.PI</a></td><td>得到圆周率π</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/abs">Math.abs()</a></td><td>求某个数绝对值</td><td>传入一个数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil">Math.ceil()</a></td><td>向上取整</td><td>传入一个数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor">Math.floor()</a></td><td>向下取整</td><td>传入一个数</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max">Math.max()</a></td><td>求一个数列中的最大值</td><td>把数列依次传入</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min">Math.min()</a></td><td>求一个数列中的最小值</td><td>把数列依次传入</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random">Math.random()</a></td><td>得到一个0-1之间的随机小数</td><td>无参；无法取到1</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round">Math.round()</a></td><td>返回四舍五入的结果</td><td>传入一个数</td></tr></tbody></table><h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><h3 id="时间基础知识"><a href="#时间基础知识" class="headerlink" title="时间基础知识"></a>时间基础知识</h3><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><table><thead><tr><th>单位</th><th>名称</th><th>换算</th></tr></thead><tbody><tr><td>hour</td><td>小时</td><td>1 day &#x3D; 24 hours</td></tr><tr><td>minute</td><td>分钟</td><td>1 hour &#x3D; 60 minutes</td></tr><tr><td>second</td><td>秒</td><td>1 minute &#x3D; 60 seconds</td></tr><tr><td>millisecond （ms）</td><td>毫秒</td><td>1 second &#x3D; 1000 ms</td></tr><tr><td>nanosecond （ns）</td><td>纳秒</td><td>1 ms &#x3D; 1000 ns</td></tr></tbody></table><h4 id="GMT和UTC"><a href="#GMT和UTC" class="headerlink" title="GMT和UTC"></a>GMT和UTC</h4><p>世界划分为24个时区，北京在东8区，格林威治在0时区。</p><img src="./assets/Js基础(六)-标准库/2019-07-02-11-14-46.png" alt="2019-07-02-11-14-46" style="zoom:50%;" /><p><strong>GMT</strong>：Greenwish Mean Time 格林威治世界时。太阳时，精确到毫秒。</p><p><strong>UTC</strong>：Universal Time Coodinated 世界协调时。以原子时间为计时标准，精确到纳秒。</p><blockquote><p>国际标准中，已全面使用UTC时间，而不再使用GMT时间，但是由于历史习惯问题，仍然将UTC写作GMT</p></blockquote><p>GMT和UTC时间在文本表示格式上是一致的，均为<code>星期缩写, 日期 月份 年份 时间 GMT</code>，例如：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">Thu</span>, <span class="number">27</span> Aug <span class="number">2020</span> <span class="number">08</span>:<span class="number">01</span>:<span class="number">44</span> GMT</span><br></pre></td></tr></table></figure><p>另外，ISO 8601标准规定，建议使用以下方式表示时间：</p><figure class="highlight ruby"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable constant_">YYYY</span>-<span class="variable constant_">MM</span>-<span class="variable constant_">DDTHH</span><span class="symbol">:mm</span><span class="symbol">:ss</span>.msZ</span><br><span class="line">例如：</span><br><span class="line"><span class="number">2020</span>-08-27<span class="symbol">T08:</span><span class="number">01</span><span class="symbol">:</span><span class="number">44</span>.000Z</span><br></pre></td></tr></table></figure><p><strong>GMT、UTC、ISO 8601都表示的是零时区的时间</strong></p><h4 id="Unix-时间戳"><a href="#Unix-时间戳" class="headerlink" title="Unix 时间戳"></a>Unix 时间戳</h4><blockquote><p>Unix 时间戳（Unix Timestamp）是Unix系统最早提出的概念</p></blockquote><p>它将UTC时间1970年1月1日凌晨作为起始时间，到指定时间经过的秒数（毫秒数）</p><h4 id="程序中的时间处理"><a href="#程序中的时间处理" class="headerlink" title="程序中的时间处理"></a>程序中的时间处理</h4><p><strong>程序对时间的计算、存储务必使用UTC时间，或者时间戳</strong></p><p><strong>在和用户交互时，将UTC时间或时间戳转换为更加友好的文本</strong></p><img src="./assets/Js基础(六)-标准库/20200827163636.png" alt="img" style="zoom:50%;" /><h3 id="日期API"><a href="#日期API" class="headerlink" title="日期API"></a>日期API</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date</a></p><p>构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 得到一个当前日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(value); <span class="comment">// 根据时间戳得到一个日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(dateString); <span class="comment">// 根据一个标准日期字符串得到一个日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]); <span class="comment">// 根据年、月、日、小时、分钟、秒、毫秒得到一个日期对象</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/now">Date.now()</a></td><td>得到当前时间戳</td><td>无参</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear">Date.prototype.getFullYear()</a></td><td>得到年</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth">Date.prototype.getMonth()</a></td><td>得到月</td><td>无参；本地时间；范围0-11</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate">Date.prototype.getDate()</a></td><td>得到日</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours">Date.prototype.getHours()</a></td><td>得到小时</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes">Date.prototype.getMinutes()</a></td><td>得到分钟</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds">Date.prototype.getSeconds()</a></td><td>得到秒</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds">Date.prototype.getMilliseconds()</a></td><td>得到毫秒</td><td>无参；本地时间；</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString">Date.prototype.toLocaleString()</a></td><td>得到日期本地的表示方式</td><td></td></tr></tbody></table><h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign()</a></td><td>将多个对象的属性混合到一起</td><td>后面覆盖前面</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf">Object.getPrototypeOf()</a></td><td>获取一个对象的隐式原型</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf">Object.setPrototypeOf()</a></td><td>设置一个对象的隐式原型</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create()</a></td><td>创建一个新对象，同时设置新对象的隐式原型</td><td></td></tr></tbody></table><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">Array.prototype.concat()</a></td><td>把多个数组拼接成一个</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">Array.prototype.includes()</a></td><td>判断数组中是否包含某个值</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">Array.prototype.indexOf()</a></td><td>得到数组中某个值的第一个下标</td><td>若不存在则返回-1</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf">Array.prototype.lastIndexOf()</a></td><td>得到数组中某个值的最后一个下标</td><td>若不存在则返回-1</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join">Array.prototype.join()</a></td><td>把数组中每一项使用某个字符连接起来，形成一个字符串返回</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push">Array.prototype.push()</a></td><td>向数组的末尾添加一项</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">Array.prototype.unshift()</a></td><td>向数组的开头添加一项</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop">Array.prototype.pop()</a></td><td>删除数组最后一项</td><td>返回被删除的值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift">Array.prototype.shift()</a></td><td>删除数组第一项</td><td>返回被删除的值</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototype.splice()</a></td><td>删除、修改、插入任何位置的值</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">Array.prototype.reverse()</a></td><td>将数组中的元素顺序颠倒</td><td></td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort()</a></td><td>对数组进行排序</td><td>传入比较函数：0-位置不变，&lt;0-前者在前，&gt;0-前者在后</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">Array.prototype.slice()</a></td><td>对数组进行切割</td><td></td></tr></tbody></table><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function</a></p><table><thead><tr><th>API</th><th>含义</th><th>备注</th></tr></thead><tbody><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply()</a></td><td>执行函数，绑定this</td><td>参数列表以数组的形式传递</td></tr><tr><td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call()</a></td><td>执行函数，绑定this</td><td>参数列表依次传递</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js基础(二)-数据和数据类型</title>
      <link href="/posts/59df9dcb/"/>
      <url>/posts/59df9dcb/</url>
      
        <content type="html"><![CDATA[<h1 id="这是啥"><a href="#这是啥" class="headerlink" title="这是啥"></a>这是啥</h1><img src="./assets/Js基础(五)-this/20211213054951.png" alt="image-20211213054946368"  /><p>不同的场景，<strong>这</strong> 指代的含义不同，JS中的<strong>this</strong>关键字也是如此：</p><p>在全局代码中使用this，指代全局对象</p><blockquote><p>在真实的开发中，很少在全局代码使用this</p></blockquote><p><strong>函数中使用this，它的指向完全取决于函数是如何被调用的</strong></p><table><thead><tr><th>调用方式</th><th>示例</th><th>函数中的this指向</th></tr></thead><tbody><tr><td><strong>通过new调用</strong></td><td><code>new method()</code></td><td>新对象</td></tr><tr><td><strong>直接调用</strong></td><td><code>method()</code></td><td>全局对象</td></tr><tr><td><strong>通过对象调用</strong></td><td><code>obj.method()</code></td><td>前面的对象</td></tr><tr><td><strong>call</strong></td><td><code>method.call(ctx)</code></td><td>call的第一个参数</td></tr><tr><td><strong>apply</strong></td><td><code>method.apply(ctx)</code></td><td>apply的第一个参数</td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js基础(四)-原型链</title>
      <link href="/posts/de19637c/"/>
      <url>/posts/de19637c/</url>
      
        <content type="html"><![CDATA[<h1 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h1><h2 id="原型要解决的问题"><a href="#原型要解决的问题" class="headerlink" title="原型要解决的问题"></a>原型要解决的问题</h2><img src="./assets/Js基础(四)-原型链/20211210142340.png" alt="image-20211210142340406" style="zoom:50%;" /><p>上图中，通过构造函数可以创建一个用户对象</p><p>这种做法有一个严重的缺陷，就是每个用户对象中都拥有一个<code>sayHi</code>方法，对于每个用户而言，<code>sayHi</code>方法是完全一样的，没必要为每个用户单独生成一个。</p><p>要解决这个问题，必须学习原型</p><h2 id="原型是如何解决的"><a href="#原型是如何解决的" class="headerlink" title="原型是如何解决的"></a>原型是如何解决的</h2><img src="./assets/Js基础(四)-原型链/20211210141850.png" alt="image-20211210141850465" style="zoom:50%;" /><ol><li><p><strong>原型</strong></p><p>每个函数都会自动附带一个属性<code>prototype</code>，这个属性的值是一个普通对象，称之为原型对象</p></li><li><p><strong>实例</strong></p><p>instance，通过<code>new</code>产生的对象称之为实例。</p><blockquote><p>由于JS中所有对象都是通过<code>new</code>产生的，因此，严格来说，JS中所有对象都称之为实例</p></blockquote></li><li><p><strong>隐式原型</strong></p><p>每个实例都拥有一个特殊的属性<code>__proto__</code>，称之为隐式原型，它指向构造函数的原型</p></li></ol><p>这一切有何意义？</p><p><strong>当访问实例成员时，先找自身，如果不存在，会自动从隐式原型中寻找</strong></p><p><strong>这样一来，我们可以把那些公共成员，放到函数的原型中，即可被所有实例共享</strong></p><img src="./assets/Js基础(四)-原型链/20211210143328.png" alt="image-20211210143328533" style="zoom:50%;" /><h1 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h1><h2 id="什么是原型链"><a href="#什么是原型链" class="headerlink" title="什么是原型链"></a>什么是原型链</h2><p><strong>所有的对象都是通过<code>new 函数</code>的方式创建的</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> u1 = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;邓&#x27;</span>, <span class="string">&#x27;旭明&#x27;</span>); <span class="comment">// 对象 u1 通过 new User 创建</span></span><br><span class="line"><span class="keyword">var</span> u2 = &#123; <span class="comment">// 对象 u2 通过 new Object 创建</span></span><br><span class="line">  <span class="attr">firstName</span>: <span class="string">&#x27;莫&#x27;</span>,</span><br><span class="line">  <span class="attr">lastName</span>: <span class="string">&#x27;妮卡&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等效于</span></span><br><span class="line"><span class="keyword">var</span> u2 = <span class="keyword">new</span> <span class="title class_">Object</span>(); </span><br><span class="line">u2.<span class="property">firstName</span> = <span class="string">&#x27;莫&#x27;</span>;</span><br><span class="line">u2.<span class="property">lastName</span> = <span class="string">&#x27;妮卡&#x27;</span>;</span><br></pre></td></tr></table></figure><p>上面的代码形成的原型图如下</p><p><img src="/./assets/Js%E5%9F%BA%E7%A1%80(%E5%9B%9B)-%E5%8E%9F%E5%9E%8B%E9%93%BE/20210903081220.png" alt="image-20210903081220607"></p><p>原型对象本身也是一个对象，默认情况下，是通过<code>new Object</code>创建的，因此，上面的两幅原型图是可以发生关联的</p><img src="./assets/Js基础(四)-原型链/20210903082540.png" alt="image-20210903082540379" style="zoom:50%;" /><blockquote><p><code>Object.prototype.__proto__</code>比较特殊，它固定指向null</p></blockquote><p>可以看出，u1的隐式原型形成了一个链条，称之为<strong>原型链</strong></p><p>当读取对象成员时，会先看对象自身是否有该成员，如果没有，就依次在其原型链上查找</p><h2 id="完整的链条"><a href="#完整的链条" class="headerlink" title="完整的链条"></a>完整的链条</h2><p><img src="/./assets/Js%E5%9F%BA%E7%A1%80(%E5%9B%9B)-%E5%8E%9F%E5%9E%8B%E9%93%BE/20210903152359.png" alt="image-20210903152359095"></p><h2 id="对开发的影响"><a href="#对开发的影响" class="headerlink" title="对开发的影响"></a>对开发的影响</h2><h3 id="在原型上更改会产生多大影响"><a href="#在原型上更改会产生多大影响" class="headerlink" title="在原型上更改会产生多大影响"></a>在原型上更改会产生多大影响</h3><p>更改构造函数的原型会对所有原型链上有该构造函数的原型的对象产生影响</p><h3 id="学会利用原型链判断类型"><a href="#学会利用原型链判断类型" class="headerlink" title="学会利用原型链判断类型"></a>学会利用原型链判断类型</h3><ol><li><p><code>instanceof</code>关键字【常用】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object <span class="keyword">instanceof</span> constructor</span><br><span class="line"><span class="comment">// 判断object的原型链中，是否存在constructor的原型</span></span><br></pre></td></tr></table></figure></li><li><p><code>Object.getPrototypeOf()</code>【不常用】</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(object);</span><br><span class="line"><span class="comment">// 返回object的隐式原型</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="学会创建空原型的对象"><a href="#学会创建空原型的对象" class="headerlink" title="学会创建空原型的对象"></a>学会创建空原型的对象</h3><ol><li><p>利用<code>Object.create()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">create</span>(target);</span><br><span class="line"><span class="comment">// 返回一个新对象，新对象以target作为隐式原型</span></span><br></pre></td></tr></table></figure></li><li><p>利用<code>Object.setPrototypeOf()</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(obj, prototype);</span><br><span class="line"><span class="comment">// 设置obj的隐式原型为prototype</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js基础(三)-作用域与全局对象</title>
      <link href="/posts/9b62bc44/"/>
      <url>/posts/9b62bc44/</url>
      
        <content type="html"><![CDATA[<h1 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h1><p>作用域是指一个变量或者一个函数所能够产生作用的范围</p><ul><li>内部的作用域能访问外部，反之不行。访问时从内向外依次查找。</li><li>如果在内部的作用域中访问了外部，则会产生闭包。</li><li>内部作用域能访问的外部，取决于函数定义的位置，和调用无关</li></ul><p>Js只有两种作用域：全局作用域和函数作用域</p><p>Js没有块级作用域，即if或者for的花括号内包裹的内容，并不是一种作用域</p><p>在ES6标准后，使用let和const在块级代码声明的变量只能作用于块级作用域，使用var在块级代码中声明的变量仍是全局作用域的</p><h2 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h2><p>平时写的变量，没有用花括号包裹的，都是全局作用域的，写在函数花括号内的函数体是函数作用域的</p><h2 id="函数作用域"><a href="#函数作用域" class="headerlink" title="函数作用域"></a>函数作用域</h2><p>作用域内使用var定义的变量、函数声明会提升到作用域顶部</p><h1 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h1><p>无论是浏览器环境，还是node环境，都会提供一个全局对象</p><ul><li>浏览器环境：window</li><li>node环境：global</li></ul><p>全局对象有下面几个特点：</p><ul><li><p>全局对象的属性可以被直接访问</p></li><li><p>给未声明的变量赋值，实际就是给全局对象的属性赋值</p><blockquote><p>永远别这么干</p></blockquote></li><li><p>所有的全局变量、全局函数都会附加到全局对象</p><blockquote><p>这称之为全局污染，又称之为全局暴露，或简称污染、暴露</p><p>如果要避免污染，需要使用<strong>立即执行函数</strong>改变其作用域</p><p>立即执行函数又称之为IIFE，它的全称是Immediately Invoked Function Expression</p><p><strong>IIFE通常用于强行改变作用域</strong></p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>key=”Math.random()“问题处理</title>
      <link href="/posts/3a983c7a/"/>
      <url>/posts/3a983c7a/</url>
      
        <content type="html"><![CDATA[<h2 id="问题现象"><a href="#问题现象" class="headerlink" title="问题现象"></a>问题现象</h2><p>最近项目开发中，测试人员提出表格在最初渲染时会出现一定程度的抖动</p><p>经过查询和调试，发现是el-table-column标签上的:key&#x3D;”Math.random()“属性导致</p><p>删除该属性后，渲染出的表头又会发生乱序</p><p>原来的开发人员应该是为了解决表头乱序的问题，给每列增加了:key&#x3D;”Math.random()“属性</p><p>没想到又导致了渲染时抖动的问题</p><h2 id="关于key的定义"><a href="#关于key的定义" class="headerlink" title="关于key的定义"></a>关于key的定义</h2><p>有相同父元素的子元素必须有独特的 key。重复的 key 会造成渲染错误。<br>也就是说必须保证key是唯一标识</p><p>key主要用在vue的虚拟Dom算法，在新旧节点对比时辨识VNodes。使用key时，它会基于key的变化重新排列元素顺序，并且会移除key不存在的元素。</p><p>有相同父元素的子元素必须有独特的key，重复的key会造成渲染错误。<br>给列加上key之后，再这样切换表格的时候会不出现表头字段的错乱</p><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><p>替换key属性，不要使用随机数来做，改为固定值，需要注意，不同的column需要使用不同的key</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-table</span></span></span><br><span class="line"><span class="tag">  <span class="attr">:data</span>=<span class="string">&quot;tableData&quot;</span></span></span><br><span class="line"><span class="tag">  <span class="attr">style</span>=<span class="string">&quot;width: 100%&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;date&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;日期&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">&quot;1&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;name&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;姓名&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">width</span>=<span class="string">&quot;180&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-table-column</span></span></span><br><span class="line"><span class="tag">    <span class="attr">:key</span>=<span class="string">&quot;2&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">prop</span>=<span class="string">&quot;address&quot;</span></span></span><br><span class="line"><span class="tag">    <span class="attr">label</span>=<span class="string">&quot;地址&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">el-table-column</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-table</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> web </tag>
            
            <tag> element-ui </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js基础(二)-数据和数据类型</title>
      <link href="/posts/59df9dcb/"/>
      <url>/posts/59df9dcb/</url>
      
        <content type="html"><![CDATA[<h1 id="数据和数据类型"><a href="#数据和数据类型" class="headerlink" title="数据和数据类型"></a>数据和数据类型</h1><p>数据：有用的信息</p><p>数据类型：数据的分类</p><h1 id="原始类型-基本类型"><a href="#原始类型-基本类型" class="headerlink" title="原始类型(基本类型)"></a>原始类型(基本类型)</h1><p>原始类型指不可再细分的类型</p><h2 id="数字类型-number"><a href="#数字类型-number" class="headerlink" title="数字类型 number"></a>数字类型 number</h2><p>直接书写即可</p><p>数字类型可以加上前缀，来表示不同的进制</p><p>0：表示8进制<br>0x：表示16进制<br>0b：表示2进制</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">0xAE</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">0b01</span>;</span><br></pre></td></tr></table></figure><h2 id="字符串类型-string"><a href="#字符串类型-string" class="headerlink" title="字符串类型 string"></a>字符串类型 string</h2><p>字符串：一长串文本（0个或多个）</p><ul><li>单引号 ‘</li><li>双引号 “</li><li>飘，&#96;，叫做模板字符串</li></ul><p>在字符串中，如果表示一个特殊字符，可以使用转义符（\）</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;Hello, JavaScript&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="布尔类型-boolean"><a href="#布尔类型-boolean" class="headerlink" title="布尔类型 boolean"></a>布尔类型 boolean</h2><p>布尔类型用于表达真或假两种状态</p><ul><li>true，表示真</li><li>false，表示假</li></ul><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var a <span class="operator">=</span> false<span class="comment">;</span></span><br></pre></td></tr></table></figure><h2 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h2><p>表示未定义，不存在。</p><p>只有一种数据书写方式：undefined</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当没有给一个变量设置默认值时，它的值就是undefined</span></span><br><span class="line"><span class="keyword">var</span> a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>表示空，不存在。</p><p>只有一种数据书写方式：null</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><p><strong>原始类型的变量，存放的具体的值</strong></p><p><strong>引用类型的变量，存放的是内存地址</strong></p><p><strong>凡是出现对象字面量的位置，都一定在内存出现一个新的对象</strong></p><p>引用类型有两种：</p><h2 id="对象-object"><a href="#对象-object" class="headerlink" title="对象 object"></a>对象 object</h2><p>可以认为，对象，是由多个基本类型组合而成。</p><p><strong>属性</strong>：对象的成员</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123;</span><br><span class="line"><span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line"><span class="attr">b</span>: <span class="string">&#x27;b&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>重复代码：让程序难以维护</p><p>函数主要用于减少重复代码</p><h3 id="创建（定义、声明）函数"><a href="#创建（定义、声明）函数" class="headerlink" title="创建（定义、声明）函数"></a>创建（定义、声明）函数</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> 函数名()&#123;</span><br><span class="line">    <span class="comment">// 函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数体的代码不会直接运行，必须要手动调用函数，才能运行其中的代码。</p><h3 id="调用函数"><a href="#调用函数" class="headerlink" title="调用函数"></a>调用函数</h3><p>运行函数体</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数名();</span><br></pre></td></tr></table></figure><h3 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h3><p>通过字面量声明的函数，会提升到脚本块的顶部。</p><p>通过字面量声明的函数，会成为全局对象的属性。</p><h3 id="其他特点"><a href="#其他特点" class="headerlink" title="其他特点"></a>其他特点</h3><p>通过typeof 函数名，得到的结果是”function”</p><p>函数内部声明的变量：</p><ol><li>如果不使用var声明，和全局变量一致，表示给全局对象添加属性</li><li>如果使用var声明，变量提升到所在函数的顶部，函数外部不可以使用该变量</li></ol><p><strong>函数中声明的变量，仅能在函数中使用，在外部无效</strong></p><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><p>参数表示函数运行的未知条件，需要调用者告知的数据</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 参数的有效返回在函数体中</span></span><br><span class="line"><span class="keyword">function</span> 函数名(形参<span class="number">1</span>, 形参<span class="number">2</span>, ...)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">函数名(实参)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>如果实参没有传递，则对应的形参为undefined</p><h1 id="得到数据的类型"><a href="#得到数据的类型" class="headerlink" title="得到数据的类型"></a>得到数据的类型</h1><p>在数据前加上 typeof </p><blockquote><p>js的bug（特征）： typeof null，得到的是object</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo启动失败问题处理</title>
      <link href="/posts/3d513d05/"/>
      <url>/posts/3d513d05/</url>
      
        <content type="html"><![CDATA[<h1 id="执行hexo-server报错"><a href="#执行hexo-server报错" class="headerlink" title="执行hexo server报错"></a>执行hexo server报错</h1><p>如图：</p><p><img src="/./assets/hexo%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/image-20230113152815193.png" alt="image-20230113152815193"></p><p><strong>问题原因：</strong>hexo sever命令会执行hexo.ps1这个脚本，该脚本为powershell脚本，在windows系统下，我们无法执行powershell脚本</p><p><strong>解决方案：</strong>修改powershell脚本执行策略</p><p><strong>具体操作：</strong></p><p>设置-&gt;隐私和安全性-&gt;开发者选项-&gt;允许本地PowerShell脚本在为签名的情况下运行</p><p><img src="/./assets/hexo%E5%90%AF%E5%8A%A8%E5%A4%B1%E8%B4%A5%E9%97%AE%E9%A2%98%E5%A4%84%E7%90%86/image-20230113153322329.png" alt="image-20230113153322329"></p>]]></content>
      
      
      <categories>
          
          <category> 博客搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Js基础(一)-什么是JavaScript</title>
      <link href="/posts/6818cd3c/"/>
      <url>/posts/6818cd3c/</url>
      
        <content type="html"><![CDATA[<h1 id="JS语言概述"><a href="#JS语言概述" class="headerlink" title="JS语言概述"></a>JS语言概述</h1><h2 id="JS语言简史"><a href="#JS语言简史" class="headerlink" title="JS语言简史"></a>JS语言简史</h2><p><strong>JS语言的起源</strong></p><p>网景（Netscape Communication Corperation），1994年，推出第一款商用浏览器，网景浏览器（Netscape Navigator）</p><p>1995年，网景公司决定在浏览器中加入一门语言，可以作交互效果，提高用户体验。</p><p>最终决定独立开发一门新的语言，聘请Brendan Eich，10天后，新的语言诞生</p><p>LiveScript -&gt; JavaScript (JS)</p><p><strong>JS语言之父：Brendan Eich</strong></p><p><strong>第一次浏览器大战</strong></p><p>网景公司打算在浏览器中加入网络操作系统，影响到微软的利益，引起了微软的注意</p><p>1995年，微软发布IE浏览器。</p><p>JS语言推出之后，网景获得极大的竞争优势。</p><p>微软对JS语言反编译，借鉴JS语言，退出了JScript、VBScript</p><p>第一次浏览器大战是标准之争</p><p>1997，网景公司将javascript1.1版本提交给ECMA（欧洲计算机制造协会）</p><p>IE3发布，并绑定windows操作系统。</p><p>1998年，网景公司，被收购。</p><p><strong>ECMA收录了JavaScript，并提交给ISO，经过修改，成为了第一个JS的标准版本，成为ECMAScript，简称ES</strong></p><p><strong>第二次浏览器大战</strong></p><p>IE4、IE5、IE6（windows xp）</p><p>微软决定解散浏览器团队。</p><p>Brendan Eich，带领团队成立Mozilla基金会，并决定，将网景浏览器开源。</p><p>长时间内，世界的技术爱好者，对网景浏览器，进行维护和打补丁</p><p>2002，Mozilla推出firefox浏览器。</p><p>2008，谷歌推出chrome浏览器，苹果推出safari，ASA公司推出opera</p><p>chrome浏览器搭载JS执行引擎V8（V8引擎，可以将JS代码直接转换为字节码，理论上，JS代码的执行速度已经接近汇编语言）</p><p>于是，JS具备了编写大型应用程序的能力，甚至服务器应用</p><blockquote><p>Ryan Dahl 准备写一个服务器端的框架，直接利用V8引擎完成了该框架，该框架，称为nodejs</p></blockquote><p><strong>V8，将JS的执行推向了一个新的台阶</strong></p><ol start="4"><li>ES标准的发展</li></ol><p>ES1，1997年<br>ES2，1998年<br>ES3，1999年<br>ES5，2009年，习惯上，不再区分 javascript （JS） 和 ECMAScript （ES）<br>ES6，2015年，ECMA宣布，从ES6开始，使用年号作为版本号，ES6的真正称呼为：ES2015<br>ES7，2016年，ES2016</p><p><strong>非常重要：ES制定语言标准，不涉及语言的运行环境。正是因为ES避免了运行环境，就让ES有机会在各种环境中执行。ES称为了通用编程语言</strong></p><p><strong>本课程学习的是，ES的通用语法、浏览器环境为其注入的新功能</strong></p><p><strong>通常，把ES运行的环境称之为，宿主环境</strong></p><h2 id="JS语言特性"><a href="#JS语言特性" class="headerlink" title="JS语言特性"></a>JS语言特性</h2><ul><li>解释型语言</li></ul><p>编译型语言：C语言、C++、java语言、C#语言</p><p>编译型语言会经过一个翻译的过程，负责翻译的叫做编译器，翻译的结果，叫做编译结果。</p><p>优点：执行速度快<br>缺点：某个编译结果，难以适用于各种环境（跨平台障碍）；部署繁琐；</p><p>解释型语言：js、php</p><p>解释型语言没有编译结果</p><p>优点：跨平台；部署简单；<br>缺点：执行速度稍慢  </p><ul><li>弱类型语言</li></ul><p>弱类型：存放的数据类型可变。优点：灵活、易上手； 缺点：不严谨</p><p>强类型：存放的数据类型不可变。优点：严谨；缺点：不灵活、不易上手</p><blockquote><p>通常，将弱类型的解释型语言，称为脚本语言</p></blockquote><ul><li>单线程</li></ul><p>同步现象：上一件事情没有做完，下一件事情必须等待。</p><ul><li>异步</li></ul><p>提高单线程的执行效率。</p>]]></content>
      
      
      <categories>
          
          <category> 前端开发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git基础</title>
      <link href="/posts/9891ebc8/"/>
      <url>/posts/9891ebc8/</url>
      
        <content type="html"><![CDATA[<h1 id="一、git的基本概念"><a href="#一、git的基本概念" class="headerlink" title="一、git的基本概念"></a>一、git的基本概念</h1><p>git的4个基本概念，</p><ul><li><strong>workspace</strong>：工作区</li><li><strong>staging area</strong>：暂存区&#x2F;缓存区</li><li><strong>local repository</strong>：版本库或本地仓库</li><li><strong>remote repository</strong>：远程仓库</li></ul><p>我们的本地修改叫做工作区，git add后添加到缓存区，git commit后添加到本地仓库，git push后推到远程仓库</p><h1 id="二、使用步骤"><a href="#二、使用步骤" class="headerlink" title="二、使用步骤"></a>二、使用步骤</h1><h2 id="1、初始化仓库"><a href="#1、初始化仓库" class="headerlink" title="1、初始化仓库"></a>1、初始化仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">会在当前文件夹下生成.git隐藏文件夹，现存相关信息</span></span><br></pre></td></tr></table></figure><h2 id="2、配置用户信息"><a href="#2、配置用户信息" class="headerlink" title="2、配置用户信息"></a>2、配置用户信息</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name “username”    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置提交代码时的用户信息</span></span><br><span class="line"></span><br><span class="line">git config --global user.email “useremail”</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置提交代码时的用户邮箱信息</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果去掉 --global 参数只对当前仓库有效</span></span><br></pre></td></tr></table></figure><h2 id="3、查看当前文件状态"><a href="#3、查看当前文件状态" class="headerlink" title="3、查看当前文件状态"></a>3、查看当前文件状态</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git status</span><br></pre></td></tr></table></figure><p><img src="/./assets/git%E5%9F%BA%E7%A1%80/image-20231211153739685.png" alt="image-20231211153739685"></p><h2 id="4、提交文件到暂存区"><a href="#4、提交文件到暂存区" class="headerlink" title="4、提交文件到暂存区"></a>4、提交文件到暂存区</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git add 文件名</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将指定文件提交至暂存区</span></span><br><span class="line"></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">根据.gitignore过滤，将其余所有untrack的文件加入暂存区</span></span><br><span class="line"></span><br><span class="line">git add *</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">忽略.gitignore，把所有untrack的文件加入暂存区</span></span><br></pre></td></tr></table></figure><h2 id="5、提交到本地仓库"><a href="#5、提交到本地仓库" class="headerlink" title="5、提交到本地仓库"></a>5、提交到本地仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">git commit -m “备注内容”</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交暂存区到本地仓库中并添加备注 -m提交信息</span></span><br><span class="line"></span><br><span class="line">git commit file1 file2 … -m “备注内容”    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">提交暂存区的指定文件到仓库区</span></span><br><span class="line"></span><br><span class="line">git commit --amend -m “备注信息”</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">用一次新的commit，替代上一次提交；如果代码没有任何新变化，则用来改写上一次commit的提交信息</span>                                     </span><br><span class="line">git commit --amend file1 file2 …</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重做上一次commit，并包括指定文件的新变化</span></span><br></pre></td></tr></table></figure><h2 id="6、提交至远程仓库"><a href="#6、提交至远程仓库" class="headerlink" title="6、提交至远程仓库"></a>6、提交至远程仓库</h2><p>git push的一般形式为 git push &lt;远程主机名&gt; &lt;本地分支名&gt; : &lt;远程分支名&gt;</p><p>例如 git push origin master:refs&#x2F;for&#x2F;master </p><p>即是将本地的master分支推送到远程主机origin上的对应master分支</p><p> origin 是远程主机名</p><p>第一个master是本地分支名</p><p>第二个master是远程分支名</p><p>关于 refs&#x2F;for：<br>refs&#x2F;for 的意义在于我们提交代码到服务器之后是需要经过code review 之后才能进行merge的，而refs&#x2F;heads 不需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git push origin master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果远程分支被省略，如上则表示将本地分支推送到与之存在追踪关系的远程分支（通常两者同名），如果该远程分支不存在，则会被新建</span>   </span><br><span class="line"></span><br><span class="line">git push origin : refs/for/master</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果省略本地分支名，则表示删除指定的远程分支，因为这等同于推送一个空的本地分支到远程分支，等同于 git push origin –delete master</span></span><br><span class="line"></span><br><span class="line">git push origin --delete branch-name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除指定远程分支</span></span><br><span class="line"></span><br><span class="line">git push origin</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果当前分支与远程分支存在追踪关系，则本地分支和远程分支都可以省略，将当前分支推送到origin主机的对应分支</span></span><br><span class="line"></span><br><span class="line">git push origin --force  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">强行推送当前分支到远程仓库，即使有冲突</span>     </span><br><span class="line"></span><br><span class="line">git push origin --all       </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">推送所有分支到远程仓库</span></span><br><span class="line"></span><br><span class="line">git push</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果当前分支只有一个远程分支，那么主机名都可以省略，形如 git push，可以使用git branch -r ，查看远程的分支名</span></span><br></pre></td></tr></table></figure><h2 id="7、获取代码"><a href="#7、获取代码" class="headerlink" title="7、获取代码"></a>7、获取代码</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone url [localPath]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将远程url仓库地址的代码拷贝到本地localPath下，localPath可省略，表示拷贝到仓库同名文件夹下</span></span><br><span class="line"> </span><br><span class="line">git clone url -b branch-name</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">拷贝远程仓库的指定分支的代码</span></span><br></pre></td></tr></table></figure><h2 id="8、切换分支"><a href="#8、切换分支" class="headerlink" title="8、切换分支"></a>8、切换分支</h2><p><strong>git checkout</strong> 用于在不同的分支之间切换、恢复文件、创建新分支等操作</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">git checkout &lt;branch-name&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">从当前分支切换到指定的分支</span> </span><br><span class="line"></span><br><span class="line">git checkout -b &lt;new-branch-name&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建一个新分支 &lt;new-branch-name&gt; 并立即切换到新创建的分支</span></span><br><span class="line"></span><br><span class="line">git checkout -b &lt;new-branch-name&gt; origin/&lt;old-branch-name&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">基于远程库分支创建分支</span></span><br><span class="line"></span><br><span class="line">git checkout -</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到前一个分支</span></span><br></pre></td></tr></table></figure><h2 id="9、合并分支"><a href="#9、合并分支" class="headerlink" title="9、合并分支"></a>9、合并分支</h2><p><strong>git merge</strong>可帮助将来自两个分支的更改集成到单个分支中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git merge &lt;branch_name&gt; </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将 &lt;branch_name&gt; 合并到当前选择的分支中。</span></span><br></pre></td></tr></table></figure><h2 id="10、回退版本"><a href="#10、回退版本" class="headerlink" title="10、回退版本"></a>10、回退版本</h2><p><strong>git reset</strong> 命令用于回退版本，可以指定退回某一次提交的版本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">git reset [--soft | --mixed | --hard] [HEAD]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">--mixed 为默认，可以不用带该参数，用于重置暂存区的文件与上一次的提交(commit)保持一致，工作区文件内容保持不变。</span></span><br><span class="line"></span><br><span class="line">git reset [HEAD] </span><br><span class="line"></span><br><span class="line">git reset HEAD^</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退所有内容到上一个版本</span>  </span><br><span class="line"></span><br><span class="line">git reset HEAD^ hello.php  </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退 hello.php 文件的版本到上一个版本</span>  </span><br><span class="line"></span><br><span class="line">git reset 052e           </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">回退到指定版本</span></span><br><span class="line"></span><br><span class="line">--soft </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数用于回退到某个版本，保留提交到本地版本库的代码：</span></span><br><span class="line">--hard </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数撤销工作区中所有未提交的修改内容，将暂存区与工作区都回到上一次版本，并删除之前的所有信息提交</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">谨慎使用--hard参数，它会删除回退点之前的所有信息。</span></span><br><span class="line"></span><br><span class="line">HEAD </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示当前版本</span></span><br><span class="line"></span><br><span class="line">HEAD^ </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上一个版本</span></span><br><span class="line"></span><br><span class="line">HEAD^^ </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上上一个版本</span></span><br><span class="line"></span><br><span class="line">HEAD^^^ </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上上上一个版本</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">也可以使用 ～数字表示</span></span><br><span class="line">HEAD~0</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">表示当前版本</span></span><br><span class="line"></span><br><span class="line">HEAD~1 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上一个版本</span></span><br><span class="line"></span><br><span class="line">HEAD^2 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上上一个版本</span></span><br><span class="line"></span><br><span class="line">HEAD^3 </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">上上上一个版本</span></span><br></pre></td></tr></table></figure><h2 id="11、关联本地代码与远程仓库"><a href="#11、关联本地代码与远程仓库" class="headerlink" title="11、关联本地代码与远程仓库"></a>11、关联本地代码与远程仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">git remote add &lt;shortname&gt; &lt;url&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">与远程仓库链接，shortname是给远程仓库链接添加的一个别名，方便操作</span></span><br><span class="line"></span><br><span class="line">git remote add origin https://gitee.com/wywang792/myblog</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将本地库与远程仓库https://gitee.com/wywang792/myblog建立链接，并起了一个别名，为origin</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">与远程存储库链接之后，就可以将更改推送到存储库，在推送更改之前，需要给本地的分支与远程仓库的分支建立追踪关系</span></span><br><span class="line"></span><br><span class="line">git branch --track branch-name remote-branch-name                </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，与指定的远程分支建立追踪关系</span></span><br><span class="line"></span><br><span class="line">git branch --set-upstream-to=remote/remote-branch-name branch-name                    </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">建立追踪关系，在指定的远程分支之间与现有分支之间建立追踪关系</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果是刚创建的项目，设置了远程仓库，在使用上方命令建立追踪关系时，如果远程仓库的分支下已经有了代码，会提示：</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">fetal:the requested upstream branch <span class="string">&#x27;origin/master&#x27;</span> does not exist</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">此时需要先从远程拉取一次代码</span></span><br><span class="line">git pull origin master --allow-unrelated-histories</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"> --allow-unrelated-histories 尝试合并两个具有不相关历史的分支时使用</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">执行上述命令后，在使用--set-upstream-to来建立分支的追踪关系</span></span><br></pre></td></tr></table></figure><h2 id="12、其他命令"><a href="#12、其他命令" class="headerlink" title="12、其他命令"></a>12、其他命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git log --since==2022-12-01 --until==2023-12-06 --author=&quot;wywang&quot; --pretty=tformat: --numstat | awk &#x27;&#123; add += $1; subs += $2; loc += $1 - $2 &#125; END &#123;printf &quot;added lines: %s, removed lines: %s, total lines: %s\n&quot;, add, subs, loc &#125;&#x27;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">统计代码量</span></span><br></pre></td></tr></table></figure><h1 id="三、常用命令"><a href="#三、常用命令" class="headerlink" title="三、常用命令"></a>三、常用命令</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">git branch</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支</span></span><br><span class="line"></span><br><span class="line">git branch -r</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有远程分支</span></span><br><span class="line"></span><br><span class="line">git branch -a </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">列出所有本地分支和远程分支</span></span><br><span class="line"></span><br><span class="line">git branch -d [分支名] </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">删除分支</span></span><br><span class="line"></span><br><span class="line">git branch [分支名]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，但依然停留在当前分支</span></span><br><span class="line"></span><br><span class="line">git branch --track [分支名] [远程分支] </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，追踪远程分支</span></span><br><span class="line"></span><br><span class="line">git branch --set-upstream [当前分支] [远程分支]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在现有分支和远程分支之间建立关系(老版本)</span></span><br><span class="line"></span><br><span class="line">git branch --set-upstream-to=[远程仓库名]/[远程分支] [当前分支] </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在现有分支和远程分支之间建立关系</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">git checkout [分支名] </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">切换到指定分支，并更新工作区</span></span><br><span class="line"></span><br><span class="line">git checkout -b [分支名] </span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">新建一个分支，并切换到该分支，等于如下两条命令</span></span><br><span class="line">git branch [分支名]</span><br><span class="line">git checkout [分支名]</span><br><span class="line"></span><br><span class="line">git fetch [远程仓库名]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">更新本地仓库储存的远程仓库副本</span></span><br><span class="line"></span><br><span class="line">git pull [远程仓库名] [远程分支]:[本地分支]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">使用远程分支更新到本地分支，如果本地分支为当前分支，:和本地址分支名可以不用；此命令相当于如下两个操作：</span></span><br><span class="line">git fetch [远程仓库名]</span><br><span class="line">git merge [远程分支]</span><br><span class="line"></span><br><span class="line">git push [远程仓库名] [本地分支]:[远程分支]</span><br><span class="line">将本地分支更新到远程分支</span><br><span class="line">如果省略:和远程分支，则推送到本地分支追踪的远程分支，如果不存在，则会新建</span><br><span class="line">如果省略本地分支，则表示删除指定的远程分支，因为这样等于推送一个空的本地分支到远程分支。</span><br><span class="line">git merge [分支名]合并指定分支到当前分支</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 版本控制 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node-sass安装问题处理</title>
      <link href="/posts/8d194d53/"/>
      <url>/posts/8d194d53/</url>
      
        <content type="html"><![CDATA[<h1 id="安装node-sass时会遇到的问题"><a href="#安装node-sass时会遇到的问题" class="headerlink" title="安装node-sass时会遇到的问题"></a>安装node-sass时会遇到的问题</h1><p>主要会出现以下三个问题：</p><p>1、下载node-sass二进制包时下载失败；</p><p>2、提示需要安装Python27；</p><p>3、安装windows-build-tools，卡在Still waiting for installer log file… </p><p>以下就三个问题给出解决方案：</p><h2 id="问题一：下载node-sass二进制包时下载失败"><a href="#问题一：下载node-sass二进制包时下载失败" class="headerlink" title="问题一：下载node-sass二进制包时下载失败"></a>问题一：下载node-sass二进制包时下载失败</h2><p><strong>问题原因：</strong>下载包的地址被和谐了</p><p><strong>解决方案：</strong>修改下载地址</p><p><strong>具体操作：</strong></p><p>方法1：在安装node-sass包的时候，使用以下命令修改下载地址</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i node-sass --sass_binary_site=https://npm.taobao.org/mirrors/node-sass/</span><br></pre></td></tr></table></figure><p>方法2：给系统添加环境变量：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// linux、mac 下</span><br><span class="line">SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ npm install node-sass</span><br><span class="line"></span><br><span class="line">// window 下</span><br><span class="line">set SASS_BINARY_SITE=https://npm.taobao.org/mirrors/node-sass/ &amp;&amp; npm install node-sass</span><br></pre></td></tr></table></figure><p>方法3：给npm添加配置项后安装node-sass</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config set sass_binary_site https://npm.taobao.org/mirrors/node-sass/</span><br><span class="line">npm i node-sass</span><br></pre></td></tr></table></figure><h2 id="问题二：提示需要安装Python27"><a href="#问题二：提示需要安装Python27" class="headerlink" title="问题二：提示需要安装Python27"></a>问题二：提示需要安装Python27</h2><p><strong>问题原因：</strong>node-sass的代码主要是C++实现，运行node-sass需要进行编译后再运行，而python可以为node-sass提供运行时编译环境，所以正常情况下下载node-sass源代码同时会检查python的安装，确保正常运行的环境</p><p><strong>解决方案：</strong>下载Python2.7进行安装，并设置环境变量</p><h2 id="问题三：安装windows-build-tools，卡在Still-waiting-for-installer-log-file…"><a href="#问题三：安装windows-build-tools，卡在Still-waiting-for-installer-log-file…" class="headerlink" title="问题三：安装windows-build-tools，卡在Still waiting for installer log file…"></a>问题三：安装windows-build-tools，卡在Still waiting for installer log file…</h2><p><strong>问题原因：</strong>windows-build-tools其实已经下载好了，但是不能自己进行安装</p><p><strong>解决方案：</strong>手动安装windows-build-tools</p><p><strong>具体操作：</strong></p><p>打开文件：C:\Users\{用户名}\windows-build-tools\vs_BuildTools.exe</p><p>选择-&gt;单个组件-&gt;勾选Node.js MSBuild 支持，下载</p>]]></content>
      
      
      <categories>
          
          <category> 常见问题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nodejs环境搭建</title>
      <link href="/posts/3f14f460/"/>
      <url>/posts/3f14f460/</url>
      
        <content type="html"><![CDATA[<h1 id="一、安装nvm"><a href="#一、安装nvm" class="headerlink" title="一、安装nvm"></a>一、安装nvm</h1><p>在Web项目开发中，由于各种前端框架、插件 以及 Nodejs、Npm 的飞速更新，在开发新项目或对老项目进行更新维护时，有些项目版本的配置与当前Node、Npm环境不匹配，导致运行报错，甚至无法启动。</p><p>nvm 是 Node Version Manager 的缩写，是一个用于在同一台计算机上安装和管理多个 Node.js 版本的工具。它允许你轻松地在不同的项目中使用不同版本的 Node.js，而不必全局更改你的 Node.js 安装。</p><h2 id="1、下载官方安装包进行安装"><a href="#1、下载官方安装包进行安装" class="headerlink" title="1、下载官方安装包进行安装"></a>1、下载官方安装包进行安装</h2><p>下载地址：<a href="https://github.com/coreybutler/nvm-windows/releases">https://github.com/coreybutler/nvm-windows/releases</a></p><p>windows系统下，下载nvm-setup.exe即可</p><p>进入安装界面后，分别选择nvm安装路径及nodejs安装路径</p><p>这里的nodejs安装路径的选择，实际上会生成一个快捷方式的链接，真实的nodejs仍然会被下载在nvm的安装路径中，这是为了日后在切换node版本时，nvm只需要改变该快捷方式的链接路径，而无需修改其他任何东西</p><p>本人选择的安装路径：<br>nvm路径：D:\Language\Nvm<br>node路径：D:\Language\nodejs</p><h2 id="2、配置nvm环境变量"><a href="#2、配置nvm环境变量" class="headerlink" title="2、配置nvm环境变量"></a>2、配置nvm环境变量</h2><p>安装nvm时，会自动配置环境变量，检查如果未配置，则手动进行配置<br>windows系统下，在系统变量中添加：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NVM_HOME:</span><br><span class="line">D:\Language\Nvm</span><br><span class="line"></span><br><span class="line">NVM_SYMLINK:</span><br><span class="line">D:\Language\nodejs</span><br><span class="line"></span><br><span class="line"><span class="comment"># NVM_HOME值为nvm的安装路径</span></span><br><span class="line"><span class="comment"># NVM_SYMLINK值为nvm指定的nodejs的安装路径</span></span><br><span class="line"><span class="comment"># 注意path变量中添加%NVM_HOME%和%NVM_SYMLINK%时需要按顺序</span></span><br></pre></td></tr></table></figure><p>在path中添加如下路径：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%NVM_HOME%</span><br><span class="line">%NVM_SYMLINK%</span><br></pre></td></tr></table></figure><h2 id="3、配置下载镜像地址"><a href="#3、配置下载镜像地址" class="headerlink" title="3、配置下载镜像地址"></a>3、配置下载镜像地址</h2><p>由于默认的镜像地址为registry.npmjs.org是外网的，下载node安装包及依赖包非常慢，所以我们把镜像配置成国内的，加快下载速度。<br>在nvm安装路径中找到setting.txt配置文件，添加node_mirror、npm_mirror：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https://npmmirror.com/mirrors/node/</span><br><span class="line">npm_mirror: https://npmmirror.com/mirrors/npm/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 当安装低版本的node时，同步安装的npm版本有可能在指定的setting配置的源中找不到。例如我当前配置的npm下载镜像是淘宝镜像。当我下载8.0.0指定的低版本node时，npm下载失败。此时，必须去掉setting里配置的镜像，让它去默认的源下载</span></span><br></pre></td></tr></table></figure><h2 id="4、nvm的相关命令："><a href="#4、nvm的相关命令：" class="headerlink" title="4、nvm的相关命令："></a>4、nvm的相关命令：</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 开启nodejs版本管理，第一次使用nvm时，执行该命令</span></span><br><span class="line">nvm on</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看nvm版本</span></span><br><span class="line">nvm version</span><br><span class="line"></span><br><span class="line"><span class="comment"># 列出所有可下载的node版本</span></span><br><span class="line">nvm <span class="built_in">ls</span> available</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载指定node版本</span></span><br><span class="line">nvm install node版本号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载指定node版本</span></span><br><span class="line">nvm uninstall node版本号</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看已下载的node版本</span></span><br><span class="line">nvm <span class="built_in">ls</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换node版本</span></span><br><span class="line">nvm use node版本号</span><br></pre></td></tr></table></figure><h1 id="二、安装nodejs"><a href="#二、安装nodejs" class="headerlink" title="二、安装nodejs"></a>二、安装nodejs</h1><h2 id="1、安装nodejs"><a href="#1、安装nodejs" class="headerlink" title="1、安装nodejs"></a>1、安装nodejs</h2><p>已经安装了nvm的，可以通过nvm直接安装node</p><p>未安装nvm的，可通过nodejs官网下载安装包，然后进行安装</p><p>安装成功后，可使用以下命令进行验证</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node <span class="literal">-v</span></span><br><span class="line"><span class="comment"># 可正确输出安装路径即说明安装成功</span></span><br></pre></td></tr></table></figure><h2 id="2、配置环境node环境变量"><a href="#2、配置环境node环境变量" class="headerlink" title="2、配置环境node环境变量"></a>2、配置环境node环境变量</h2><p>如果使用了nvm，则已经完成了环境变量的配置</p><p>如果只使用了nodejs，则需要单独配置环境变量</p><h2 id="3、npm介绍"><a href="#3、npm介绍" class="headerlink" title="3、npm介绍"></a>3、npm介绍</h2><p>npm的全称是Node Package Manager，是一个NodeJS包管理和分发工具，方便开发者们引用其他开发者上传的开源工具包，类似Linux下的yum，Java下的Maven。</p><p>在安装node时，会自动安装对应版本的npm，比如本人安装了16.12.0版本的nodejs，自动安装了对应的8.1.0版本的npm。</p><h2 id="4、npm配置"><a href="#4、npm配置" class="headerlink" title="4、npm配置"></a>4、npm配置</h2><p>有了npm后，我们可以使用npm安装和卸载其他JS工具包。</p><p>需要注意的是，npm安装的包可分为全局包和局部包：</p><p><strong>全局包：</strong>安装在默认的全局路径下，可在当前操作系统任意路径下使用；</p><p><strong>局部包：</strong>只会安装在当前执行安装命令的目录的node_modules路径下，只能在当前路径及当前路径的下级路径下使用；</p><p>这里涉及到了全局包的安装路径，可通过以下命令查看：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config get prefix</span><br><span class="line"><span class="comment"># 默认安装路径为C:\用户\用户名\AppData\Roming\npm</span></span><br></pre></td></tr></table></figure><p>这种默认的路径，在使用nvm时，会导致不同版本的nodejs，npm安装各种不同版本的全局包到默认全局路径下，可能会出现各种各样的问题，因为我自己使用了nvm，所以这里修改了默认全局安装路径。</p><p>另外，缓存也是同样的问题，npm缓存是指npm在本地存储下载的软件包和依赖项的地方。当使用npm安装软件包时，它会首先检查本地缓存中是否有该软件包的副本。如果有，它将从缓存中获取软件包而不是从远程服务器下载。所以，缓存路径也同样需要修改</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在要配置的路径下创建文件夹，一般使用node_global，node_cache</span></span><br><span class="line"><span class="comment"># 本人的路径配置在D:\Language\NodeJs下，因为使用了nvm，这里的D:\Language\NodeJs实际是一个快捷方式，指向的是D:\Language\Nvm\当前使用的node版本号，这样，切换不同版本的nodejs时，全局路径及缓存路径也会相应改变</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改全局路径</span></span><br><span class="line">npm config <span class="built_in">set</span> prefix <span class="string">&quot;D:\Language\NodeJs\node_global&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改缓存路径</span></span><br><span class="line">npm config <span class="built_in">set</span> cache <span class="string">&quot;D:\Language\NodeJs\node_cache&quot;</span></span><br></pre></td></tr></table></figure><p>修改全局路径后，为了让全局安装的包的命令可在全局路径下执行，需要配置对应的环境变量</p><p>在path中新增：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">%NVM_SYMLINK%\node_global</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这是使用了nvm后配置的路径</span></span><br><span class="line"><span class="comment"># 如果是直接安装的nodejs，则添加对应的全局安装路径即可</span></span><br></pre></td></tr></table></figure><p>除此之外，还有设置下载地址的配置需要修改，默认的下载地址为registry.npmjs.org，该地址为外网的，网速较慢，可设置为国内的镜像地址</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm config <span class="built_in">set</span> registry <span class="string">&quot;https://registry.npmmirror.com&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 淘宝镜像源：https://registry.npmmirror.com、https://registry.npm.taobao.org</span></span><br><span class="line"><span class="comment"># 腾讯镜像源：http://mirrors.cloud.tencent.com/npm/</span></span><br><span class="line"><span class="comment"># 华为镜像源：https://mirrors.huaweicloud.com/repository/npm/</span></span><br><span class="line"><span class="comment"># 官方默认镜像源：https://registry.npmjs.org</span></span><br></pre></td></tr></table></figure><h2 id="5、npm的相关命令"><a href="#5、npm的相关命令" class="headerlink" title="5、npm的相关命令"></a>5、npm的相关命令</h2><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">-g</span>： <span class="comment"># --global 的缩写，表示安装到全局目录里</span></span><br><span class="line"><span class="literal">-S</span>： <span class="comment"># --save 的缩写，表示安装的包将写入package.json里面的dependencies</span></span><br><span class="line"><span class="literal">-D</span>： <span class="comment"># --save-dev 的缩写，表示将安装的包将写入packege.json里面的devDependencies</span></span><br><span class="line"> i： <span class="comment"># install的缩写，表示安装</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#查看版本号</span></span><br><span class="line">npm <span class="literal">-v</span>   </span><br><span class="line"> </span><br><span class="line"><span class="comment"># 查看配置</span></span><br><span class="line">npm config list</span><br><span class="line"></span><br><span class="line"><span class="comment"># 升级npm</span></span><br><span class="line">npm install <span class="literal">-g</span> npm@<span class="number">9.8</span>.<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除npm的缓存</span></span><br><span class="line">npm cache clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 会安装到配置的全局目录下</span></span><br><span class="line">npm i express <span class="literal">-g</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装包信息将加入到dependencies生产依赖</span></span><br><span class="line">npm i express <span class="literal">-S</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装包信息将加入到devDependencies开发依赖</span></span><br><span class="line">npm i express <span class="literal">-D</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载模块，但不卸载模块留在package.json中的对应信息</span></span><br><span class="line">npm uninstall express </span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载全局模块</span></span><br><span class="line">npm uninstall express <span class="literal">-g</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载模块，同时卸载留在package.json中dependencies下的信息</span></span><br><span class="line">npm uninstall express <span class="literal">--save</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 卸载模块，同时卸载留在package.json中devDependencies下的信息</span></span><br><span class="line">npm uninstall express <span class="literal">--save-dev</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 以临时源全局安装指定版本</span></span><br><span class="line">npm install <span class="literal">-g</span> express@<span class="number">2.5</span>.<span class="number">8</span> <span class="literal">--registry</span>=https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新最新版本的express</span></span><br><span class="line">npm update express  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新到指定版本号的express</span></span><br><span class="line">npm update express@<span class="number">2.1</span>.<span class="number">0</span> </span><br><span class="line"></span><br><span class="line"><span class="comment"># 更新到最后的新版本</span></span><br><span class="line">npm update express@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看某个包对于各种包的依赖关系</span></span><br><span class="line">npm view express dependencies</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看express最新的版本号</span></span><br><span class="line">npm view express version  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看所有express历史版本号（很实用）</span></span><br><span class="line">npm view express versions </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看最新的express版本的信息</span></span><br><span class="line">npm view express  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看express的详细信息，等同于上面的npm view express</span></span><br><span class="line">npm info express  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看本地已安装的express的详细信息</span></span><br><span class="line">npm list express 或 npm <span class="built_in">ls</span> express  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看express包的来源地址</span></span><br><span class="line">npm view express repository.url    </span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除项目中没有被使用的包</span></span><br><span class="line">npm prune  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查模块是否已经过时</span></span><br><span class="line">npm outdated  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查模块是否已经过时</span></span><br><span class="line">npm outdated </span><br><span class="line"></span><br><span class="line"><span class="comment"># 会打开默认浏览器跳转到github中express的页面</span></span><br><span class="line">npm repo express  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 会打开默认浏览器跳转到github中express的README.MD文件信息</span></span><br><span class="line">npm docs express </span><br><span class="line"></span><br><span class="line"><span class="comment"># 会打开默认浏览器跳转到github中express的主页</span></span><br><span class="line">npm home express  </span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> javascript </tag>
            
            <tag> web </tag>
            
            <tag> nodejs </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>windows11偏好配置</title>
      <link href="/posts/91c4f57f/"/>
      <url>/posts/91c4f57f/</url>
      
        <content type="html"><![CDATA[<h1 id="windows11偏好配置"><a href="#windows11偏好配置" class="headerlink" title="windows11偏好配置"></a>windows11偏好配置</h1><h2 id="1、Win11修改右键菜单为win10风格"><a href="#1、Win11修改右键菜单为win10风格" class="headerlink" title="1、Win11修改右键菜单为win10风格"></a>1、Win11修改右键菜单为win10风格</h2><p>1、首先用鼠标右键点击开始菜单，选择 windows 终端(管理员)，点击进入。</p><p>2、然后在终端应用程序里粘贴这串代码 ：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.exe add <span class="string">&quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot;</span> /f /ve</span><br></pre></td></tr></table></figure><p>3、恢复Win11右键菜单</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reg.exe delete <span class="string">&quot;HKCU\Software\Classes\CLSID\&#123;86ca1aa0-34aa-4e8b-a509-50c905bae2a2&#125;\InprocServer32&quot;</span> /va /f</span><br></pre></td></tr></table></figure><h2 id="2、Win11修改C盘用户文件夹名称"><a href="#2、Win11修改C盘用户文件夹名称" class="headerlink" title="2、Win11修改C盘用户文件夹名称"></a>2、Win11修改C盘用户文件夹名称</h2><p>一、目标</p><p>　　更改“C:&#x2F;Users”目录下用户文件夹名称，尽量不影响大部分软件正常运行。</p><p>二、步骤</p><p>　　1.开启Administrator管理员账户</p><p>　　右击开始菜单按钮，打开“计算机管理”，选择”本地用户和组”，点击“本地用户和组-用户”，右侧可以看到Administrator用户，双击，将“账号已禁用”的对勾取消，点击确定，注销当前用户，可以看到Administrator用户出现了，点击进入Administrator账户。</p><p><img src="/./assets/windows11%E5%81%8F%E5%A5%BD%E9%85%8D%E7%BD%AE/202210221364027.png" alt="img"></p><p>　　PS：有些用户的电脑是WIN10家庭版系统，可能没有本地用户和组这个选项，需要升级专业版系统。</p><p>　　2.重命名用户文件夹</p><p>　　1.用Administrator账户登录以后，再次打开“本地用户和组-用户”，右击原账户的中文名称，选择重命名，修改为想要的英文名称。双击原账户，进入后可修改全名，全名可保持中文名称，这个名称是显示在登录界面的名称，不影响实际路径。</p><p><img src="/./assets/windows11%E5%81%8F%E5%A5%BD%E9%85%8D%E7%BD%AE/202210221364028.png" alt="img"></p><p>　　2.进入“C:\用户” 文件夹(其实真实路径是“C:\Users”)，重命名之前中文的用户文件夹，更改为英文，此名称与上一步的英文名称保持一致。</p><p>　　PS：此步如果出现重命名失败，文件夹内有运行的程序的情况，可能是原来的账号没有完全注销，需要重启电脑，直接登陆Administrator账户，千万不能再点原来的中文账户，点击后即使不登陆也会预加载很多程序，导致原用户文件夹被占用无法重命名。</p><p>　　3.修改注册表</p><p>　　1.“Win+R”打开运行，输入regedit，打开注册表管理器，</p><p>　　依次展开HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows NT\CurrentVersion\ProfileList，在ProfileList下的每个文件夹都对应系统中的用户，而文件夹中ProfileImagePath字段是指向每个用户文件夹的地址，一个个点击查看ProfileList下的文件夹，在右侧找到ProfileImagePath字段中包含原用户名的数据，双击修改ProfileImagePath的数据，将路径修改成新的用户文件夹名。</p><p><img src="/./assets/windows11%E5%81%8F%E5%A5%BD%E9%85%8D%E7%BD%AE/202210221364029.png" alt="img"></p><p>　　2.重启电脑，登陆原来的账户，现在可以看到用户文件夹名称已经修改成功了，但系统中很多软件中包含了一些配置路径信息，这些信息很多保存在注册表中。修改注册表，将原来包含中文用户名称的注册表字段替换为英文，可避免很多软件报错的情况。这里推荐RegWorkshop，可以实现批量查找替换。</p><p>　　打开RegWorkshop，先点搜索，查找内容中输入原用户名，点击查找。</p><p><img src="/./assets/windows11%E5%81%8F%E5%A5%BD%E9%85%8D%E7%BD%AE/202210221364030.png" alt="img"></p><p>　　查找出来很多结果，在结果中“Ctrl+A”全选结果，右键点击替换，替换为文本框中输入刚改的新用户名，点击替换。</p><p><img src="/./assets/windows11%E5%81%8F%E5%A5%BD%E9%85%8D%E7%BD%AE/202210221364031.png" alt="img"></p><p>　　4.修改环境变量</p><p>　　依次点击此电脑右键-属性-高级系统设置-高级-环境变量，打开后依次查看各个字段，找到有原用户名的字段都替换成新的用户名，这样能防止有些软件报错。</p><p>　　三、后期问题处理</p><p>　　更改用户文件夹名称后绝大部分软件都能正常运行，少部分软件内设置的存储路径需要手动设置成新的路径。极少部分软件变成未注册状态，如CAD和SolidWorks，再次pj后可正常使用。</p><p>　　Administrator账户启用后有一定安全风险，确认没有问题后建议禁用。打开“本地用户和组”，双击Administrator，在账户已禁用前打勾。</p><h2 id="3、删除文件资源管理器中左侧的OneDrive图标"><a href="#3、删除文件资源管理器中左侧的OneDrive图标" class="headerlink" title="3、删除文件资源管理器中左侧的OneDrive图标"></a>3、删除文件资源管理器中左侧的OneDrive图标</h2><p>如图：</p><p><img src="/./assets/windows11%E5%81%8F%E5%A5%BD%E9%85%8D%E7%BD%AE/0d07b01abd6d4533a66d0079e311a723.png" alt="img"></p><p>删除方法如下（卸载OneDrive并不能删除该图标）：</p><p>win + R 输入regedit 打开注册表编辑器</p><p>点开计算机\HKEY_CLASSES_ROOT\CLSID ，Ctrl + F ， 输入你要删除的onedrive图标名称 eg”现代科技“   如删除默认图标，可搜索”onedrive“。</p><p><img src="/./assets/windows11%E5%81%8F%E5%A5%BD%E9%85%8D%E7%BD%AE/4b7ab397e5f0479d8478d087964bb9be.png" alt="img"></p><p>双击打开第三个文件，将数值改为0</p><p><img src="/./assets/windows11%E5%81%8F%E5%A5%BD%E9%85%8D%E7%BD%AE/eccb045aa66f4f1c81dcafc5fb18e476.png" alt="img"></p><p>Ctrl + shift +esc   打开任务管理器 右击Windows资源管理器 右击重启  即可</p><p> <img src="/./assets/windows11%E5%81%8F%E5%A5%BD%E9%85%8D%E7%BD%AE/e880d706259f429e9c5a0109c2515f14.png" alt="img"></p><p>再次打开文件资源管理器，更改数值的图标已经被删除。</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> windows </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vscode的使用</title>
      <link href="/posts/861717a6/"/>
      <url>/posts/861717a6/</url>
      
        <content type="html"><![CDATA[<h2 id="VS-Code优化配置项"><a href="#VS-Code优化配置项" class="headerlink" title="VS Code优化配置项"></a>VS Code优化配置项</h2><table><thead><tr><th>配置名称</th><th>配置项</th><th>说明</th></tr></thead><tbody><tr><td>Auto Save</td><td>“files.autoSave”: “afterDelay”</td><td>开启延迟自动保存</td></tr><tr><td>Bracket Pair Colorization</td><td>“editor.bracketPairColorization.enabled”:  true</td><td>开启匹配括号着色</td></tr><tr><td>Mouse Wheel Zoom</td><td>“editor.mouseWheelZoom”: true</td><td>开启鼠标滚轮控制字体缩放</td></tr><tr><td>Smooth Scrolling</td><td>“workbench.list.smoothScrolling”: true</td><td>开启工作台列表具有平滑滚动效果</td></tr><tr><td>Cursor Smooth Caret Animation</td><td>“editor.cursorSmoothCaretAnimation”: “on”</td><td>开启编辑台光标平滑插入动画</td></tr><tr><td>Smooth Scrolling</td><td>“editor.smoothScrolling”: true</td><td>开启编辑台平滑滚动动画</td></tr><tr><td>Smooth Scrolling</td><td>“editor.cursorBlinking”: “smooth”</td><td>开启光标闪烁时动画</td></tr><tr><td>Cursor Blinking</td><td>“terminal.integrated.smoothScrolling”: true</td><td>开启终端平滑滚动动画</td></tr><tr><td>Format On Paste</td><td>“editor.formatOnPaste”: true</td><td>开启粘贴时格式化代码</td></tr><tr><td>Format On Save</td><td>“editor.formatOnSave”: true</td><td>开启保存时格式化代码</td></tr><tr><td>Format On Type</td><td>“editor.formatOnType”: true</td><td>开启输入一行时格式化代码</td></tr><tr><td>Word Wrap</td><td>“editor.wordWrap”: “on”</td><td>开启自动折行</td></tr><tr><td>Show Breakpoints In Overview Ruler</td><td>“debug.showBreakpointsInOverviewRuler”: true</td><td>开启将断点位置显示在右侧标尺处，方便定位断点位置</td></tr><tr><td>Accept Suggestion On Enter</td><td>“editor.acceptSuggestionOnEnter”: “smart”,</td><td>将回车键作为接受建议键<br />默认为on，只能使用回车接收建议<br />修改为smart，可以同时使用Tab和回车接受建议</td></tr><tr><td>Save All Files Before Run</td><td>“code-runner.saveAllFilesBeforeRun”: true</td><td>CodeRunner配置，运行前保存全部文件</td></tr><tr><td>Save File Before Run</td><td>“code-runner.saveFileBeforeRun”: true</td><td>CodeRunner配置，运行前保存全部文件</td></tr><tr><td>Run In Terminal</td><td>“code-runner.runInTerminal”: true</td><td>CodeRunner配置，可以在终端运行</td></tr><tr><td>Default Formatter</td><td>“editor.defaultFormatter”: “esbenp.prettier-vscode”</td><td>设置默认的代码格式化工具，需安装Prettier</td></tr></tbody></table><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;files.autoSave&quot;</span>: <span class="string">&quot;afterDelay&quot;</span>,</span><br><span class="line">  <span class="string">&quot;files.autoGuessEncoding&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;workbench.list.smoothScrolling&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;editor.cursorSmoothCaretAnimation&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">  <span class="string">&quot;editor.smoothScrolling&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;editor.cursorBlinking&quot;</span>: <span class="string">&quot;smooth&quot;</span>,</span><br><span class="line">  <span class="string">&quot;editor.mouseWheelZoom&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;editor.formatOnPaste&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;editor.formatOnType&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;editor.formatOnSave&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;editor.wordWrap&quot;</span>: <span class="string">&quot;on&quot;</span>,</span><br><span class="line">  <span class="string">&quot;editor.guides.bracketPairs&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">&quot;editor.bracketPairColorization.enabled&quot;</span>: <span class="literal">true</span>, </span><br><span class="line">  <span class="string">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">&quot;editor.acceptSuggestionOnEnter&quot;</span>: <span class="string">&quot;smart&quot;</span>,</span><br><span class="line">  <span class="string">&quot;editor.suggestSelection&quot;</span>: <span class="string">&quot;recentlyUsed&quot;</span>,</span><br><span class="line">  <span class="string">&quot;window.dialogStyle&quot;</span>: <span class="string">&quot;custom&quot;</span>,</span><br><span class="line">  <span class="string">&quot;debug.showBreakpointsInOverviewRuler&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Code Runner相关配置根据需要自行配置</span></span><br></pre></td></tr></table></figure><h2 id="VS-Code快捷键"><a href="#VS-Code快捷键" class="headerlink" title="VS Code快捷键"></a>VS Code快捷键</h2><table><thead><tr><th>快捷键</th><th>说明</th><th>推荐</th></tr></thead><tbody><tr><td>Ctrl + F</td><td>当前文件内查找指定内容</td><td>&#10004;</td></tr><tr><td>Ctrl + H</td><td>当前文件内查找指定内容并替换</td><td>&#10004;</td></tr><tr><td>Ctrl + Shift + F</td><td>全局文件内查找指定内容</td><td>&#10004;</td></tr><tr><td>Ctrl + Shift + H</td><td>全局文件内查找指定内容并替换</td><td>&#10004;</td></tr><tr><td>Ctrl + D</td><td>逐个选中相同词</td><td>&#10004;</td></tr><tr><td>Ctrl + P</td><td>查找指定文件</td><td>&#10004;</td></tr><tr><td>Ctrl + ,</td><td>打开设置</td><td>&#10004;</td></tr><tr><td>Ctrl + &#96;</td><td>打开终端</td><td>&#10004;</td></tr><tr><td>Ctrl + Shift + E</td><td>打开资源管理器</td><td>&#10004;</td></tr><tr><td>Ctrl + Shift + F</td><td>打开搜索栏</td><td>&#10004;</td></tr><tr><td>Ctrl + Shift + G</td><td>打开源代码管理</td><td></td></tr><tr><td>Ctrl + Shift + D</td><td>打开运行和调试</td><td></td></tr><tr><td>Ctrl + Shift + X</td><td>打开扩展</td><td></td></tr><tr><td>Ctrl + B</td><td>显示&#x2F;隐藏主侧边栏</td><td></td></tr><tr><td>按住Alt点击鼠标</td><td>任意处添加光标</td><td>&#10004;</td></tr><tr><td>按住滚轮拖动</td><td>同一列处快速添加光标</td><td>&#10004;</td></tr><tr><td>Alt + Up</td><td>当前行代码上移</td><td>&#10004;</td></tr><tr><td>Alt + Shift + Up</td><td>复制当前行并放置在上一行</td><td>&#10004;</td></tr><tr><td>Alt + Down</td><td>当前行代码下移</td><td>&#10004;</td></tr><tr><td>Alt + Shift + Down</td><td>复制当前行并放置在下一行</td><td>&#10004;</td></tr><tr><td>光标在末尾时回车</td><td>向下重开一行</td><td></td></tr><tr><td>光标不在末尾时，Ctrl + Enter</td><td>向下重开一行</td><td>&#10004;</td></tr><tr><td>光标不在末尾时，Ctrl + Shift + Enter</td><td>向上重开一行</td><td></td></tr><tr><td>光标没有选中内容时，Ctrl + X</td><td>剪切行</td><td>&#10004;</td></tr><tr><td>光标选中内容时，Ctrl + X</td><td>剪切内容</td><td>&#10004;</td></tr><tr><td>Ctrl + Shift + K</td><td>删除行</td><td></td></tr><tr><td>Ctrl + L</td><td>选中当前行</td><td>&#10004;</td></tr><tr><td>Ctrl + Shift + L</td><td>快速选中所有相同内容，快捷版 Ctrl + D</td><td></td></tr><tr><td>Ctrl + Backspace</td><td>删除前一个词</td><td>&#10004;</td></tr><tr><td>Ctrl + Del</td><td>删除后一个词</td><td></td></tr><tr><td>F12</td><td>跳转至定义</td><td></td></tr><tr><td>Ctrl + 点击鼠标左键</td><td>跳转至定义</td><td></td></tr></tbody></table><h2 id="VS-Code插件"><a href="#VS-Code插件" class="headerlink" title="VS Code插件"></a>VS Code插件</h2><table><thead><tr><th>名称</th><th>简介</th><th>备注</th></tr></thead><tbody><tr><td>Prettier - Code formatter</td><td>格式化代码</td><td></td></tr><tr><td>Path Intellisense</td><td>路径补全</td><td></td></tr><tr><td>vscode-icons</td><td>个性化文件图标</td><td></td></tr><tr><td>CodeSnap</td><td>代码截图</td><td>编辑器内右键，“code snap”，选择需要截图的代码</td></tr><tr><td>Live Server</td><td>实时服务器</td><td>编辑器内右键，“open with live server”</td></tr><tr><td>Code Runner</td><td>代码运行工具</td><td>支持多种语言，语言运行环境需要自己配置</td></tr><tr><td>Competitive Programming Helper</td><td>刷算法题时添加样例</td><td></td></tr><tr><td>IntelliCode</td><td>AI开发助手</td><td></td></tr><tr><td>GBK to UTF8 for vscode</td><td>转换文件的编码格式</td><td>左侧导航栏，文件名称上右键，选择转换</td></tr><tr><td>Hex Editor</td><td>查看文件Hex或UTF-8编码</td><td>文件标签名称上右键“重新选择打开编辑器的方式”，选择Hex Editor</td></tr><tr><td>Doxygen Documentation Generator</td><td>文档生成器</td><td>在函数名上方输入 &#x2F;** 后回车，自动补全文档说明</td></tr><tr><td>Remote SSH</td><td>连接远程服务器或虚拟机</td><td></td></tr><tr><td>GitHub repositories</td><td>连接远程Github库</td><td></td></tr><tr><td>Draw.io</td><td>画流程图</td><td></td></tr><tr><td>Vue Language  Features(Volar)</td><td>Vue语法支持</td><td>支持到Vue3，Vetur只支持到Vue2，推荐使用Volar</td></tr><tr><td>Vue VsCode Snippets</td><td>Vue代码片段生成</td><td>在.vue文件中输入vbase，选择生成需要的代码片段</td></tr><tr><td>Vue Jumper</td><td>Vue组件跳转到文件定义</td><td></td></tr><tr><td>JavaScript (ES6) code snippets</td><td>Js代码片段生成</td><td></td></tr><tr><td>HTML CSS Support</td><td>Html CSS支持</td><td></td></tr><tr><td>Auto Rename Tag</td><td>自动重命名标签</td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 开发工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vscode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fastDFS安装使用</title>
      <link href="/posts/77c5e3ec/"/>
      <url>/posts/77c5e3ec/</url>
      
        <content type="html"><![CDATA[<h1 id="一、FastDFS在RedHat7-5中的安装"><a href="#一、FastDFS在RedHat7-5中的安装" class="headerlink" title="一、FastDFS在RedHat7.5中的安装"></a>一、FastDFS在RedHat7.5中的安装</h1><h2 id="1、使用root用户进行安装"><a href="#1、使用root用户进行安装" class="headerlink" title="1、使用root用户进行安装"></a>1、使用root用户进行安装</h2><h3 id="1-、下载相关安装包"><a href="#1-、下载相关安装包" class="headerlink" title="(1)、下载相关安装包"></a>(1)、下载相关安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">FastDFS下载路径：</span></span><br><span class="line">https://github.com/happyfish100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果需要nginx提供服务</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">nginx下载路径：</span></span><br><span class="line">http://nginx.org/en/download.html</span><br></pre></td></tr></table></figure><p><img src="/assets/fastDFS%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20201112231516924.png" alt="image-20201112231516924"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fastdfs：FastDFS本体包</span><br><span class="line">libfastcommon：FastDFS分离出的一些共用函数包</span><br><span class="line">fastdfs-nginx-<span class="keyword">module</span>：FastDF和nginx的关联模块</span><br></pre></td></tr></table></figure><p><img src="/assets/fastDFS%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20201112235609733.png" alt="image-20201112235609733"></p><h3 id="2-、安装gcc"><a href="#2-、安装gcc" class="headerlink" title="(2)、安装gcc"></a>(2)、安装gcc</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">如果已经有gcc的话，就无需安装了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">验证是否有gcc</span></span><br><span class="line">gcc -v</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">有yum环境</span></span><br><span class="line">yum install -y gcc gcc-c++</span><br><span class="line">yum -y install libevent</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">没有yum环境的，使用rpm包进行安装</span></span><br><span class="line">rmp -ivh ./*.rpm --force --nodeps</span><br></pre></td></tr></table></figure><p><img src="/assets/fastDFS%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20201113000626550.png" alt="image-20201113000626550"></p><h3 id="3-、安装libfastcommon"><a href="#3-、安装libfastcommon" class="headerlink" title="(3)、安装libfastcommon"></a>(3)、安装libfastcommon</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">安装路径 /root/fastdfs</span></span><br><span class="line">mkdir -pv /root/fastdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在存放包的安装包的地方进行解压缩</span></span><br><span class="line">tar -xvf libfastcommon-1.0.43.tar.gz -C /root/fastdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">一定要加上 -C 参数 表示更换目录的意思</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到安装目录</span></span><br><span class="line">cd /root/fastdfs/libfastcommon-1.0.43</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行编译</span></span><br><span class="line">./make.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行安装</span></span><br><span class="line">./make.sh install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下为执行安装后的安装信息，可以看到一些存放目录，这里进行记录</span></span><br><span class="line">mkdir -p /usr/lib64</span><br><span class="line">mkdir -p /usr/lib</span><br><span class="line">mkdir -p /usr/include/fastcommon</span><br><span class="line">install -m 755 libfastcommon.so /usr/lib64</span><br><span class="line">install -m 644 common_define.h hash.h chain.h logger.h base64.h shared_func.h pthread_func.h ini_file_reader.h _os_define.h sockopt.h sched_thread.h http_func.h md5.h local_ip_func.h avl_tree.h ioevent.h ioevent_loop.h fast_task_queue.h fast_timer.h process_ctrl.h fast_mblock.h connection_pool.h fast_mpool.h fast_allocator.h fast_buffer.h skiplist.h multi_skiplist.h flat_skiplist.h skiplist_common.h system_info.h fast_blocked_queue.h php7_ext_wrapper.h id_generator.h char_converter.h char_convert_loader.h common_blocked_queue.h multi_socket_client.h skiplist_set.h fc_list.h json_parser.h buffered_file_writer.h /usr/include/fastcommon</span><br><span class="line">if [ ! -e /usr/lib/libfastcommon.so ]; then ln -s /usr/lib64/libfastcommon.so /usr/lib/libfastcommon.so; fi</span><br></pre></td></tr></table></figure><h3 id="4-、安装FastDFS"><a href="#4-、安装FastDFS" class="headerlink" title="(4)、安装FastDFS"></a>(4)、安装FastDFS</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">在存放包的安装包的地方进行解压缩</span></span><br><span class="line">tar -zxvf fastdfs-6.06.tar.gz -C /root/fastdfs</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进入到安装目录</span></span><br><span class="line">cd /root/fastdfs/fastdfs-6.06</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行编译</span></span><br><span class="line">./make.sh</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">进行安装</span></span><br><span class="line">./make.sh install</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">以下为执行安装后的安装信息，可以看到一些存放目录，这里进行记录</span></span><br><span class="line">mkdir -p /usr/bin</span><br><span class="line">mkdir -p /etc/fdfs</span><br><span class="line">cp -f fdfs_trackerd /usr/bin</span><br><span class="line">if [ ! -f /etc/fdfs/tracker.conf.sample ]; then cp -f ../conf/tracker.conf /etc/fdfs/tracker.conf.sample; fi</span><br><span class="line">if [ ! -f /etc/fdfs/storage_ids.conf.sample ]; then cp -f ../conf/storage_ids.conf /etc/fdfs/storage_ids.conf.sample; fi</span><br><span class="line">mkdir -p /usr/bin</span><br><span class="line">mkdir -p /etc/fdfs</span><br><span class="line">cp -f fdfs_storaged  /usr/bin</span><br><span class="line">if [ ! -f /etc/fdfs/storage.conf.sample ]; then cp -f ../conf/storage.conf /etc/fdfs/storage.conf.sample; fi</span><br><span class="line">mkdir -p /usr/bin</span><br><span class="line">mkdir -p /etc/fdfs</span><br><span class="line">mkdir -p /usr/lib64</span><br><span class="line">mkdir -p /usr/lib</span><br><span class="line">cp -f fdfs_monitor fdfs_test fdfs_test1 fdfs_crc32 fdfs_upload_file fdfs_download_file fdfs_delete_file fdfs_file_info fdfs_appender_test fdfs_appender_test1 fdfs_append_file fdfs_upload_appender fdfs_regenerate_filename /usr/bin</span><br><span class="line">if [ 0 -eq 1 ]; then cp -f libfdfsclient.a /usr/lib64; cp -f libfdfsclient.a /usr/lib/;fi</span><br><span class="line">if [ 1 -eq 1 ]; then cp -f libfdfsclient.so /usr/lib64; cp -f libfdfsclient.so /usr/lib/;fi</span><br><span class="line">mkdir -p /usr/include/fastdfs</span><br><span class="line">cp -f ../common/fdfs_define.h ../common/fdfs_global.h ../common/mime_file_parser.h ../common/fdfs_http_shared.h ../tracker/tracker_types.h ../tracker/tracker_proto.h ../tracker/fdfs_shared_func.h ../tracker/fdfs_server_id_func.h ../storage/trunk_mgr/trunk_shared.h tracker_client.h storage_client.h storage_client1.h client_func.h client_global.h fdfs_client.h /usr/include/fastdfs</span><br><span class="line">if [ ! -f /etc/fdfs/client.conf.sample ]; then cp -f ../conf/client.conf /etc/fdfs/client.conf.sample; fi</span><br></pre></td></tr></table></figure><p><strong>&#x2F;usr&#x2F;bin 中包含了可执行文件：</strong></p><p><img src="/assets/fastDFS%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20201113002752908.png" alt="image-20201113002752908"></p><p><strong>&#x2F;etc&#x2F;fdfs 中包含了配置文件：</strong></p><p><img src="/assets/fastDFS%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20201113002826792.png" alt="image-20201113002826792"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">将安装文件夹下的配置文件拷贝到 /etc/fdfs 目录下</span></span><br><span class="line">cp /root/fastdfs/fastdfs-6.06/conf/* /etc/fdfs</span><br></pre></td></tr></table></figure><p><img src="/assets/fastDFS%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20201113003206195.png" alt="image-20201113003206195"></p><h3 id="5-、配置并启动tracker服务"><a href="#5-、配置并启动tracker服务" class="headerlink" title="(5)、配置并启动tracker服务"></a>(5)、配置并启动tracker服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改tracker的配置文件</span></span><br><span class="line">vim /etc/fdfs/tracker.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">tracker存储data和<span class="built_in">log</span>的跟路径，必须提前创建好</span></span><br><span class="line">base_path=/root/fastdfs/tracker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">默认端口22122</span></span><br><span class="line">port=22122</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">http端口，需要和nginx相同，默认8080</span></span><br><span class="line">http.server_port=8080</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动tracker</span></span><br><span class="line">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭tracker，不建议使用系统的 <span class="built_in">kill</span> -9 强制关闭，会导致文件信息不同步</span></span><br><span class="line">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启tracker</span></span><br><span class="line">/usr/bin/fdfs_trackerd /etc/fdfs/tracker.conf restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查进程</span></span><br><span class="line">ps -ef | grep tracker</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查端口</span></span><br><span class="line">netstat -nultp | grep 22122</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">停止tracker</span></span><br><span class="line">/usr/bin/stop.sh /etc/fdfs/tracker.conf</span><br></pre></td></tr></table></figure><h3 id="6-、配置并启动storage服务"><a href="#6-、配置并启动storage服务" class="headerlink" title="(6)、配置并启动storage服务"></a>(6)、配置并启动storage服务</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改storage的配置文件</span></span><br><span class="line">vim /etc/fdfs/storage.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">默认组名，根据实际情况修改</span></span><br><span class="line">group_name=group1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">storge默认23000，同一个组的storage端口号必须一致</span></span><br><span class="line">port=23000 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">storage存储data和<span class="built_in">log</span>的跟路径，必须提前创建好</span></span><br><span class="line">base_path=/root/fastdfs/storage</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">存储路径个数，需要和store_path个数匹配</span></span><br><span class="line">store_path_count=1</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">第一个存储路径，如果为空，则使用base_path</span></span><br><span class="line">store_path0=/root/fastdfs/data </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置tracker的ip和port</span></span><br><span class="line">tracker_server=192.168.43.131:22122 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">启动storage</span></span><br><span class="line">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf start</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">关闭storage，不建议使用系统的 <span class="built_in">kill</span> -9 强制关闭，会导致文件信息不同步</span></span><br><span class="line">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf stop</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">重启storage</span></span><br><span class="line">/usr/bin/fdfs_storaged /etc/fdfs/storage.conf restart</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">检查进程</span></span><br><span class="line">ps -ef | grep storage</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">通过monitor查看storage是否成功绑定</span></span><br><span class="line">/usr/bin/fdfs_monitor /etc/fdfs/storage.conf</span><br></pre></td></tr></table></figure><h3 id="7-、测试上传"><a href="#7-、测试上传" class="headerlink" title="(7)、测试上传"></a>(7)、测试上传</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">修改storage的配置文件</span></span><br><span class="line">vim /etc/fdfs/client.conf</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">client存储data和<span class="built_in">log</span>的跟路径，必须提前创建好</span></span><br><span class="line">base_path=/root/fastdfs/client</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置tracker的ip和port</span></span><br><span class="line">tracker_server=192.168.43.131:22122 </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">测试上传</span></span><br><span class="line">/usr/bin/fdfs_test /etc/fdfs/client.conf upload /etc/fdfs/anti-steal.jpg</span><br></pre></td></tr></table></figure><h2 id="2、使用普通用户进行安装"><a href="#2、使用普通用户进行安装" class="headerlink" title="2、使用普通用户进行安装"></a>2、使用普通用户进行安装</h2><h3 id="1-、下载相关安装包-1"><a href="#1-、下载相关安装包-1" class="headerlink" title="(1)、下载相关安装包"></a>(1)、下载相关安装包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># FastDFS下载路径：</span></span></span><br><span class="line">https://github.com/happyfish100</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># 如果需要nginx提供服务</span></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># nginx下载路径：</span></span></span><br><span class="line">http://nginx.org/en/download.html</span><br></pre></td></tr></table></figure><p><img src="/assets/fastDFS%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/image-20201112231516924.png" alt="image-20201112231516924"></p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fastdfs：FastDFS本体包</span><br><span class="line">libfastcommon：FastDFS分离出的一些共用函数包</span><br><span class="line">fastdfs-nginx-<span class="keyword">module</span>：FastDF和nginx的关联模块</span><br></pre></td></tr></table></figure><p><strong>目录层级示意</strong><br>&#x2F;home&#x2F;fastdfs&#x2F;<br>├── fastdfs<br>└── soft<br>├────fastdfs-5.11.tar.gz<br>├────fastdfs-nginx-module-1.20.tar.gz<br>├────libfastcommon-1.0.39.tar.gz<br>└────nginx-1.14.2.tar.gz</p><p><strong>安装路径及文件示意</strong><br>&#x2F;home&#x2F;fastdfs&#x2F;fastdfs&#x2F;<br>└── fastdfs<br>└── usr<br>├── include<br>│  └── fastcommon<br>│  ├── avl_tree.h<br>│  ├── base64.h<br>│  ├── chain.h<br>│  ├── char_converter.h<br>│  ├── char_convert_loader.h<br>│  ├── common_blocked_queue.h<br>│  ├── common_define.h<br>│  ├── connection_pool.h<br>│  ├── fast_allocator.h<br>│  ├── fast_blocked_queue.h<br>│  ├── fast_buffer.h<br>│  ├── fast_mblock.h<br>│  ├── fast_mpool.h<br>│  ├── fast_task_queue.h<br>│  ├── fast_timer.h<br>│  ├── fc_list.h<br>│  ├── flat_skiplist.h<br>│  ├── hash.h<br>│  ├── http_func.h<br>│  ├── id_generator.h<br>│  ├── ini_file_reader.h<br>│  ├── ioevent.h<br>│  ├── ioevent_loop.h<br>│  ├── local_ip_func.h<br>│  ├── logger.h<br>│  ├── md5.h<br>│  ├── multi_skiplist.h<br>│  ├── multi_socket_client.h<br>│  ├── _os_define.h<br>│  ├── php7_ext_wrapper.h<br>│  ├── process_ctrl.h<br>│  ├── pthread_func.h<br>│  ├── sched_thread.h<br>│  ├── shared_func.h<br>│  ├── skiplist_common.h<br>│  ├── skiplist.h<br>│  ├── skiplist_set.h<br>│  ├── sockopt.h<br>│  └── system_info.h<br>├── lib<br>│  └── libfastcommon.so -&gt; &#x2F;home&#x2F;fastdfs&#x2F;opt&#x2F;fastdfs&#x2F;usr&#x2F;lib64&#x2F;libfastcommon.so<br>└── lib64<br>└── libfastcommon.so</p><h3 id="2-、安装gcc-1"><a href="#2-、安装gcc-1" class="headerlink" title="(2)、安装gcc"></a>(2)、安装gcc</h3><h3 id="3-、安装libfastcommon-1"><a href="#3-、安装libfastcommon-1" class="headerlink" title="(3)、安装libfastcommon"></a>(3)、安装libfastcommon</h3><h3 id="4-、安装FastDFS-1"><a href="#4-、安装FastDFS-1" class="headerlink" title="(4)、安装FastDFS"></a>(4)、安装FastDFS</h3><h3 id="5-、配置并启动tracker服务-1"><a href="#5-、配置并启动tracker服务-1" class="headerlink" title="(5)、配置并启动tracker服务"></a>(5)、配置并启动tracker服务</h3><h3 id="6-、配置并启动storage服务-1"><a href="#6-、配置并启动storage服务-1" class="headerlink" title="(6)、配置并启动storage服务"></a>(6)、配置并启动storage服务</h3><h3 id="7-、测试上传-1"><a href="#7-、测试上传-1" class="headerlink" title="(7)、测试上传"></a>(7)、测试上传</h3>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fastDFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis3.2.100安装说明</title>
      <link href="/posts/99d50e9d/"/>
      <url>/posts/99d50e9d/</url>
      
        <content type="html"><![CDATA[<h1 id="redis3-2-100安装说明"><a href="#redis3-2-100安装说明" class="headerlink" title="redis3.2.100安装说明"></a>redis3.2.100安装说明</h1><p>解压后配置以下环境变量：</p><p>REDIS_HOME：<br>D:\Database\Redis-3.2.100</p><p>在Path中新增：<br>%REDIS_HOME%</p><p>安装Redis服务：<br>进入到redis的安装目录下执行以下命令：<br>redis-server –service-install redis.windows.conf –loglevel verbose</p><p>启动Redis服务：<br>redis-server –service-start<br>停止Redis服务：<br>redis-server –service-stop<br>卸载Redis服务：<br>redis-server –service-uninstall</p><p>允许远程访问：<br>给 redis.windows.conf 中的  bind 127.0.0.1 配置项添加注释</p><p>添加登录密码：<br>给 redis.windows.conf 中的  requirepass 配置项取消注释，并在其后书写想要添加的密码</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mongodb安装使用</title>
      <link href="/posts/c7ccc926/"/>
      <url>/posts/c7ccc926/</url>
      
        <content type="html"><![CDATA[<h1 id="一、MongoDB的下载与安装"><a href="#一、MongoDB的下载与安装" class="headerlink" title="一、MongoDB的下载与安装"></a>一、MongoDB的下载与安装</h1><h2 id="1、下载安装包"><a href="#1、下载安装包" class="headerlink" title="1、下载安装包"></a>1、下载安装包</h2><p>可以从官网下载最新版本，也可以从以下网址下载历史版本</p><p>官网：<a href="https://www.mongodb.com/download-center/community">https://www.mongodb.com/download-center/community</a></p><p>历史版本：<a href="http://dl.mongodb.org/dl/win32/x86_64">http://dl.mongodb.org/dl/win32/x86_64</a></p><p>Ctrl + F 查找自己想要的版本，进行下载</p><p><img src="/assets/mongodb%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/Snipaste_2019-04-27_17-34-02.png" alt="Snipaste_2019-04-27_17-34-02"></p><h2 id="2、开始安装"><a href="#2、开始安装" class="headerlink" title="2、开始安装"></a>2、开始安装</h2><p>点击next进行，下面列出需要进行选择的一些界面。</p><p><img src="/assets/mongodb%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/Snipaste_2019-04-27_17-36-18.png" alt="Snipaste_2019-04-27_17-36-18"></p><p><img src="/assets/mongodb%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/Snipaste_2019-04-27_17-38-38.png" alt="Snipaste_2019-04-27_17-38-38"></p><p><img src="/assets/mongodb%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/Snipaste_2019-04-27_17-40-05.png" alt="Snipaste_2019-04-27_17-40-05"></p><p><img src="/assets/mongodb%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/Snipaste_2019-04-27_17-42-28.png" alt="Snipaste_2019-04-27_17-42-28"></p><h2 id="3、安装完成，进行配置"><a href="#3、安装完成，进行配置" class="headerlink" title="3、安装完成，进行配置"></a>3、安装完成，进行配置</h2><p>在安装的bin目录下有 <strong>mongod.cfg</strong> 文件，这是一个配置文件，需要操作的配置都写在这里边。</p><p>配置项官方文档：<a href="https://docs.mongodb.com/manual/reference/configuration-options/#security-options">https://docs.mongodb.com/manual/reference/configuration-options/#security-options</a></p><p><img src="/assets/mongodb%E5%AE%89%E8%A3%85%E4%BD%BF%E7%94%A8/Snipaste_2019-04-27_17-44-11.png" alt="Snipaste_2019-04-27_17-44-11"></p><h2 id="4、配置允许远程访问"><a href="#4、配置允许远程访问" class="headerlink" title="4、配置允许远程访问"></a>4、配置允许远程访问</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">net:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">27017</span></span><br><span class="line">  <span class="attr">bindIp:</span> <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span></span><br></pre></td></tr></table></figure><p>把 bindIp：127.0.0.1 修改为 bindIp：0.0.0.0 ，然后重启MongoDB服务。</p><h2 id="5、配置用户"><a href="#5、配置用户" class="headerlink" title="5、配置用户"></a>5、配置用户</h2><p>MongDB默认是没有用户的，可以直接登录。给MongoDB配置初始的用户并开启认证模式。</p><p>先登录到MongoDB。</p><p>需要先创建一个帐号，该账号需要有grant权限，即：账号管理的授权权限。注意一点，帐号是跟着库走的，所以在指定库里授权(也就是使用这个账号创建用户时，这个用户要管理哪个数据库，那就先选择数据库，在对应的数据库下面去创建用户)，必须也在指定库里验证(auth)。</p><p>选择数据库并添加用户：</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#选择admin数据库</span></span><br><span class="line">use <span class="literal">admin</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建带有授权权限的用户</span></span><br><span class="line">db.createUser(&#123;<span class="literal">user</span>:<span class="string">&quot;root&quot;</span>,pwd: <span class="string">&quot;root&quot;</span>,roles:[&#123;role:<span class="string">&quot;root&quot;</span>,db:<span class="string">&quot;admin&quot;</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#退出</span></span><br><span class="line"><span class="keyword">quit</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">#在配置文件中加上以下配置，然后重新启动服务</span></span><br><span class="line">security:</span><br><span class="line">  authorization: enabled</span><br><span class="line">  </span><br><span class="line"><span class="comment">#使用创建的root用户登录</span></span><br><span class="line">mongo -uroot -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#选择gwnapmt数据库</span></span><br><span class="line">use gwnapm</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建一个临时集合并插入一条数据，否则退出时，该数据库会被删除</span></span><br><span class="line">db.test.save(&#123;<span class="string">&quot;_id&quot;</span>: <span class="number">1</span>&#125;)<span class="comment">;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#创建管理和使用gwnapm数据库的gwnapm用户</span></span><br><span class="line">db.createUser(&#123;<span class="literal">user</span>:<span class="string">&quot;gwnapm&quot;</span>,pwd: <span class="string">&quot;gwnapm&quot;</span>,roles:[&#123;role:<span class="string">&quot;dbOwner&quot;</span>,db:<span class="string">&quot;gwnapm&quot;</span>&#125;,&#123;role:<span class="string">&quot;readWrite&quot;</span>,db:<span class="string">&quot;gwnapm&quot;</span>&#125;]&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">#查询用户的命令</span></span><br><span class="line">use <span class="literal">admin</span></span><br><span class="line"><span class="comment">#pretty()函数是美化查询结果</span></span><br><span class="line">db.<span class="params">system</span>.users.find().pretty()</span><br><span class="line"></span><br><span class="line"><span class="comment">#pmstat用户连接数据库，需要使用[authenticationDatabase]参数去认证对应的数据库</span></span><br><span class="line">mongo --host <span class="number">192.168</span>.<span class="number">0.33</span> --port <span class="number">27017</span> -u gwnapm -authenticationDatabase gwnapm -p</span><br></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="literal">user</span>：用户名</span><br><span class="line"></span><br><span class="line">pwd：密码</span><br><span class="line"></span><br><span class="line">roles：指定用户的角色，可以用一个空数组给新用户设定空角色；</span><br><span class="line">在roles字段,可以指定内置角色和用户定义的角色。role里的角色可以选：</span><br><span class="line"><span class="number">1</span>、数据库用户角色</span><br><span class="line">read：允许用户读取指定数据库</span><br><span class="line">readWrite：允许用户读写指定数据库</span><br><span class="line"><span class="number">2</span>、数据库管理角色：</span><br><span class="line">dbAdmin：允许用户在指定数据库中执行管理函数，如索引创建、删除，查看统计或访问<span class="params">system</span>.profile</span><br><span class="line">dbOwner：</span><br><span class="line">userAdmin：允许用户向<span class="params">system</span>.users集合写入，可以在指定数据库里创建、删除和管理用户</span><br><span class="line"><span class="number">3</span>、集群管理角色</span><br><span class="line">clusterAdmin：只在<span class="literal">admin</span>数据库中可用，赋予用户所有分片和复制集相关函数的管理权限</span><br><span class="line">clusterManager：</span><br><span class="line">clusterMonitor：</span><br><span class="line">hostManager：</span><br><span class="line"><span class="number">4</span>、备份恢复角色</span><br><span class="line">backup：</span><br><span class="line">restore：</span><br><span class="line"><span class="number">5</span>、所有数据库角色</span><br><span class="line">readAnyDatabase：只在<span class="literal">admin</span>数据库中可用，赋予用户所有数据库的读权限</span><br><span class="line">readWriteAnyDatabase：只在<span class="literal">admin</span>数据库中可用，赋予用户所有数据库的读写权限</span><br><span class="line">userAdminAnyDatabase：只在<span class="literal">admin</span>数据库中可用，赋予用户所有数据库的userAdmin权限</span><br><span class="line">dbAdminAnyDatabase：只在<span class="literal">admin</span>数据库中可用，赋予用户所有数据库的dbAdmin权限</span><br><span class="line"><span class="number">6</span>、超级用户角色</span><br><span class="line">root：只在<span class="literal">admin</span>数据库中可用。超级账号，超级权限</span><br><span class="line"><span class="number">7</span>、内部角色</span><br><span class="line">__<span class="params">system</span>:</span><br></pre></td></tr></table></figure><h1 id="二、MongoDB的基本命令"><a href="#二、MongoDB的基本命令" class="headerlink" title="二、MongoDB的基本命令"></a>二、MongoDB的基本命令</h1><h2 id="1、连接MongoDB"><a href="#1、连接MongoDB" class="headerlink" title="1、连接MongoDB"></a>1、连接MongoDB</h2><p>mongo [options]</p><table><thead><tr><th>参数</th><th>其他用法</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>–host</td><td></td><td>127.0.0.1</td><td>主机地址</td></tr><tr><td>–port</td><td></td><td>27017</td><td>主机端口</td></tr><tr><td>-u</td><td>–username</td><td></td><td>用户名</td></tr><tr><td>-p</td><td>–password</td><td></td><td>密码</td></tr><tr><td>–authenticationDatabase</td><td></td><td></td><td>验证数据库</td></tr></tbody></table><p>例:mongo –host 192.168.0.33 –port 27017 -u sqlmonit -p sqlmonit </p><p>–authenticationDatabase sqlmonit</p><h2 id="2、MongoDB数据导出"><a href="#2、MongoDB数据导出" class="headerlink" title="2、MongoDB数据导出"></a>2、MongoDB数据导出</h2><h3 id="（1）mongodump"><a href="#（1）mongodump" class="headerlink" title="（1）mongodump"></a>（1）mongodump</h3><table><thead><tr><th>参数</th><th>其他用法</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>-h</td><td>–host</td><td>127.0.0.1</td><td>主机地址</td></tr><tr><td>–port</td><td></td><td>27017</td><td>主机端口</td></tr><tr><td>-u</td><td>–username</td><td></td><td>用户名</td></tr><tr><td>-p</td><td>–password</td><td></td><td>密码</td></tr><tr><td>-d</td><td>–db</td><td></td><td>数据库实例</td></tr><tr><td>-c</td><td>–collection</td><td></td><td>集合</td></tr><tr><td>-o</td><td>–out</td><td></td><td>输出路径</td></tr></tbody></table><p>例：mongodump -h 127.0.0.1:27017 -d sqlmonit -u sqlmonit -p sqlmonit </p><p>-o C:\Users\wyWan\Desktop </p><h3 id="（2）mongoexport"><a href="#（2）mongoexport" class="headerlink" title="（2）mongoexport"></a>（2）mongoexport</h3><p>这个可以导出csv和json格式的数据</p><table><thead><tr><th>参数</th><th>其他用法</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>-h</td><td></td><td></td><td>主机地址</td></tr><tr><td>–port</td><td></td><td></td><td>主机端口</td></tr><tr><td>-u</td><td></td><td></td><td>用户名</td></tr><tr><td>-p</td><td></td><td></td><td>密码</td></tr><tr><td>-d</td><td></td><td></td><td>数据库实例</td></tr><tr><td>-c</td><td></td><td></td><td>集合</td></tr><tr><td>-o</td><td></td><td></td><td>输出路径</td></tr><tr><td>–csv</td><td></td><td></td><td>导出CSV格式</td></tr><tr><td>-f</td><td></td><td></td><td>导出哪些字段，<strong>导出CSV格式时必须带</strong></td></tr><tr><td>–jsonArray</td><td></td><td></td><td>导出JSON格式</td></tr><tr><td>–query</td><td></td><td></td><td>相当于给SQL加where条件</td></tr></tbody></table><p>例： </p><p>mongoexport -d pmstat -u pmstat -p pmstat -c 20190624_apm_sql –csv -f orgi_sql,use_time_ms –query {“use_time_ms”:{“$gt”:3000}}  -o d:&#x2F;sql.csv</p><p>导出为json格式：</p><p>mongoexport -d pmstat -u pmstat -p pmstat -c 20200715_apm_sql –jsonArray -o .&#x2F;export&#x2F;20200715_apm_sql.json</p><h2 id="3、MongoDB数据导入"><a href="#3、MongoDB数据导入" class="headerlink" title="3、MongoDB数据导入"></a>3、MongoDB数据导入</h2><h3 id="（1）mongorestore"><a href="#（1）mongorestore" class="headerlink" title="（1）mongorestore"></a>（1）mongorestore</h3><p>mongorestore [options]</p><table><thead><tr><th>参数</th><th>其他用法</th><th>默认值</th><th align="left">说明</th></tr></thead><tbody><tr><td>-h</td><td>–host</td><td>127.0.0.1</td><td align="left">主机地址</td></tr><tr><td>–port</td><td></td><td>27017</td><td align="left">主机端口</td></tr><tr><td>-u</td><td>–username</td><td></td><td align="left">用户名</td></tr><tr><td>-p</td><td>–password</td><td></td><td align="left">密码</td></tr><tr><td>-d</td><td>–db</td><td></td><td align="left">数据库实例，这个名称可以与备份时候的名字不一样</td></tr><tr><td>–drop</td><td></td><td></td><td align="left">备份前删除所有数据，请谨慎使用</td></tr><tr><td>–dir</td><td></td><td></td><td align="left">指定备份的文件目录</td></tr></tbody></table><p>例：mongorestore -h -h 127.0.0.1:27017 -d sqlmonit -u sqlmonit -p sqlmonit </p><p>–dir C:\Users\wyWan\Desktop\sqlmonit </p><h3 id="（2）mongoimport"><a href="#（2）mongoimport" class="headerlink" title="（2）mongoimport"></a>（2）mongoimport</h3><p>mongoimport[options]</p><table><thead><tr><th>参数</th><th>其他用法</th><th>默认值</th><th>说明</th></tr></thead><tbody><tr><td>-h</td><td>–host</td><td>127.0.0.1</td><td>主机地址</td></tr><tr><td>–port</td><td></td><td>27017</td><td>主机端口</td></tr><tr><td>-u</td><td>–username</td><td></td><td>用户名</td></tr><tr><td>-p</td><td>–password</td><td></td><td>密码</td></tr><tr><td>-d</td><td>–db</td><td></td><td>数据库实例，这个名称可以与备份时候的名字不一样</td></tr><tr><td>-c</td><td>–collection</td><td></td><td>导入集合，导入到那个集合去</td></tr><tr><td>–file</td><td></td><td></td><td>要导入的文件</td></tr><tr><td>–jsonArray</td><td></td><td></td><td>导入json格式的文件</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql5.7.26安装说明</title>
      <link href="/posts/5c064474/"/>
      <url>/posts/5c064474/</url>
      
        <content type="html"><![CDATA[<h1 id="mysql5-7-26安装说明"><a href="#mysql5-7-26安装说明" class="headerlink" title="mysql5.7.26安装说明"></a>mysql5.7.26安装说明</h1><p>解压.zip文件</p><p>将my.ini复制到解压后文件夹路径下<br>修改其中的路径为自己主机的路径</p><p>my.ini文件内容</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[client]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql客户端连接服务端时默认使用的端口</span></span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysql]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql客户端默认字符集</span></span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置3306端口</span></span><br><span class="line">port = 3306</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置mysql的安装目录</span></span><br><span class="line">basedir=E:\Database\MySQL-5.7.26</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span></span><br><span class="line">datadir=E:\Database\MySQL-5.7.26\data</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">允许最大连接数</span></span><br><span class="line">max_connections=20</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">服务端使用的字符集默认为8比特编码的latin1字符集</span></span><br><span class="line">character-set-server=utf8</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">创建新表时将使用的默认存储引擎</span></span><br><span class="line">default-storage-engine=INNODB</span><br><span class="line"></span><br><span class="line">bind_address=0.0.0.0</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">配置MySQL允许的最大数据包大小,否则，当导入的SQL脚本过大时，可能会发生失败</span></span><br><span class="line">max_allowed_packet=500M</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">忽略主机名的方式访问</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">skip-name-resolve</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">跳过密码登录</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">skip-grant-tables</span></span><br></pre></td></tr></table></figure><p>配置以下环境变量（修改为自己的路径）：<br>MYSQL_HOME：<br>D:\Database\MySQL-5.7.26</p><p>在Path中新增：<br>%MYSQL_HOME%\bin</p><p>安装Mysql服务：<br>mysqld install</p><p>初始化MySQL数据库：<br>mysqld –initialize </p><p>初始化后在数据库文件的路径里有一个 .err 结尾的文件<br>打开后在文件末尾处有root用户的密码，使用该密码初次登录</p><p>登录后初次修改root用户密码<br>alter user user() identified by ‘root’;</p><p>切换数据库<br>use mysql;</p><p>允许远程访问<br>update user set <code>Host</code> &#x3D; ‘%’ WHERE <code>User</code> &#x3D; ‘root’ LIMIT 1;</p><p>强制刷新权限<br>flush privileges;</p><p>卸载MySQL服务：<br>sc delete mysql</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jdk8环境搭建</title>
      <link href="/posts/4a17b156/"/>
      <url>/posts/4a17b156/</url>
      
        <content type="html"><![CDATA[<h2 id="1、使用官方安装包进行安装"><a href="#1、使用官方安装包进行安装" class="headerlink" title="1、使用官方安装包进行安装"></a>1、使用官方安装包进行安装</h2><h2 id="2、配置环境变量"><a href="#2、配置环境变量" class="headerlink" title="2、配置环境变量"></a>2、配置环境变量</h2><p>windows系统下，在系统变量中添加：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">JAVA_HOME:</span><br><span class="line">D:\Language\Java\jdk1.<span class="number">8.0</span>_221</span><br><span class="line"></span><br><span class="line">CLASSPATH:</span><br><span class="line">.;%JAVA_HOME%\lib;%JAVA_HOME%\lib\tools.jar</span><br></pre></td></tr></table></figure><p>在path中添加如下路径：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">%JAVA_HOME%\bin</span><br><span class="line">%JAVA_HOME%\jre\bin</span><br></pre></td></tr></table></figure><h2 id="3、验证"><a href="#3、验证" class="headerlink" title="3、验证"></a>3、验证</h2><p>在cmd窗口中输入：</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">java <span class="literal">-version</span></span><br><span class="line"></span><br><span class="line">// 能够正确输出如下信息</span><br><span class="line">java version <span class="string">&quot;1.8.0_221&quot;</span></span><br><span class="line">Java(TM) SE Runtime Environment (build <span class="number">1.8</span>.<span class="number">0</span>_221<span class="literal">-b11</span>)</span><br><span class="line">Java HotSpot(TM) <span class="number">64</span><span class="literal">-Bit</span> Server VM (build <span class="number">25.221</span><span class="literal">-b11</span>, mixed mode)</span><br><span class="line">// 说明安装成功</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
